{
  "carpet": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"carpet\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "A two dimensional array of x coordinates at each carpet point. If omitted, the plot is a cheater plot and the xaxis is hidden by default.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "A two dimensional array of y coordinates at each carpet point.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "a",
        "detail": "An array containing values of the first parameter value\nDefault: \nType: data array, Vector"
      },
      {
        "label": "a0",
        "detail": "Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.\nDefault: 0\nType: number"
      },
      {
        "label": "da",
        "detail": "Sets the a coordinate step. See `a0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "b",
        "detail": "A two dimensional array of y coordinates at each carpet point.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "b0",
        "detail": "Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.\nDefault: 0\nType: number"
      },
      {
        "label": "db",
        "detail": "Sets the b coordinate step. See `b0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "aaxis",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "baxis",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "color",
        "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
      },
      {
        "label": "carpet",
        "detail": "An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie\nDefault: \nType: string"
      },
      {
        "label": "cheaterslope",
        "detail": "The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been omitted.\nDefault: 1\nType: number"
      },
      {
        "label": "font",
        "detail": "The default font used for axis & tick labels on this carpet\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "baxis": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "arraydtick",
          "detail": "The stride between grid lines along the axis\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "arraytick0",
          "detail": "The starting index of grid lines along the axis\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "autorange",
          "detail": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to \"false\".\nDefault: true\nType: enumerated , one of ( true | false | \"reversed\" )"
        },
        {
          "label": "autotypenumbers",
          "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
        },
        {
          "label": "categoryarray",
          "detail": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "categoryorder",
          "detail": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" )"
        },
        {
          "label": "cheatertype",
          "detail": "\nDefault: \"value\"\nType: enumerated , one of ( \"index\" | \"value\" )"
        },
        {
          "label": "color",
          "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \nType: color"
        },
        {
          "label": "dtick",
          "detail": "The stride between grid lines along the axis\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "endline",
          "detail": "Determines whether or not a line is drawn at along the final value of this axis. If \"true\", the end line is drawn on top of the grid lines.\nDefault: \nType: boolean"
        },
        {
          "label": "endlinecolor",
          "detail": "Sets the line color of the end line.\nDefault: \nType: color"
        },
        {
          "label": "endlinewidth",
          "detail": "Sets the width (in px) of the end line.\nDefault: 1\nType: number"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "fixedrange",
          "detail": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.\nDefault: \nType: boolean"
        },
        {
          "label": "gridcolor",
          "detail": "Sets the axis line color.\nDefault: \nType: color"
        },
        {
          "label": "griddash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "gridwidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "labelpadding",
          "detail": "Extra padding between label and the axis\nDefault: 10\nType: integer"
        },
        {
          "label": "labelprefix",
          "detail": "Sets a axis label prefix.\nDefault: \nType: string"
        },
        {
          "label": "labelsuffix",
          "detail": "Sets a axis label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "linecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "linewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "minorgridcolor",
          "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
        },
        {
          "label": "minorgridcount",
          "detail": "Sets the number of minor grid ticks per major grid tick\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "minorgriddash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "minorgridwidth",
          "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "range",
          "detail": "Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: Array"
        },
        {
          "label": "rangemode",
          "detail": "If \"normal\", the range is computed in relation to the extrema of the input data. If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data.\nDefault: \"normal\"\nType: enumerated , one of ( \"normal\" | \"tozero\" | \"nonnegative\" )"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showgrid",
          "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: true\nType: boolean"
        },
        {
          "label": "showline",
          "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: \nType: boolean"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.\nDefault: \"start\"\nType: enumerated , one of ( \"start\" | \"end\" | \"both\" | \"none\" )"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "smoothing",
          "detail": "\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "startline",
          "detail": "Determines whether or not a line is drawn at along the starting value of this axis. If \"true\", the start line is drawn on top of the grid lines.\nDefault: \nType: boolean"
        },
        {
          "label": "startlinecolor",
          "detail": "Sets the line color of the start line.\nDefault: \nType: color"
        },
        {
          "label": "startlinewidth",
          "detail": "Sets the width (in px) of the start line.\nDefault: 1\nType: number"
        },
        {
          "label": "tick0",
          "detail": "The starting index of grid lines along the axis\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickfont",
          "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "tickmode",
          "detail": "\nDefault: \"array\"\nType: enumerated , one of ( \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "type",
          "detail": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\nDefault: \"-\"\nType: enumerated , one of ( \"-\" | \"linear\" | \"date\" | \"category\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this axis' title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "offset",
            "detail": "An additional amount by which to offset the title from the tick labels, given in pixels. Note that this used to be set by the now deprecated `titleoffset` attribute.\nDefault: 10\nType: number"
          },
          {
            "label": "text",
            "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \"\"\nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "aaxis": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "arraydtick",
          "detail": "The stride between grid lines along the axis\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "arraytick0",
          "detail": "The starting index of grid lines along the axis\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "autorange",
          "detail": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to \"false\".\nDefault: true\nType: enumerated , one of ( true | false | \"reversed\" )"
        },
        {
          "label": "autotypenumbers",
          "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
        },
        {
          "label": "categoryarray",
          "detail": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "categoryorder",
          "detail": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" )"
        },
        {
          "label": "cheatertype",
          "detail": "\nDefault: \"value\"\nType: enumerated , one of ( \"index\" | \"value\" )"
        },
        {
          "label": "color",
          "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \nType: color"
        },
        {
          "label": "dtick",
          "detail": "The stride between grid lines along the axis\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "endline",
          "detail": "Determines whether or not a line is drawn at along the final value of this axis. If \"true\", the end line is drawn on top of the grid lines.\nDefault: \nType: boolean"
        },
        {
          "label": "endlinecolor",
          "detail": "Sets the line color of the end line.\nDefault: \nType: color"
        },
        {
          "label": "endlinewidth",
          "detail": "Sets the width (in px) of the end line.\nDefault: 1\nType: number"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "fixedrange",
          "detail": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.\nDefault: \nType: boolean"
        },
        {
          "label": "gridcolor",
          "detail": "Sets the axis line color.\nDefault: \nType: color"
        },
        {
          "label": "griddash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "gridwidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "labelpadding",
          "detail": "Extra padding between label and the axis\nDefault: 10\nType: integer"
        },
        {
          "label": "labelprefix",
          "detail": "Sets a axis label prefix.\nDefault: \nType: string"
        },
        {
          "label": "labelsuffix",
          "detail": "Sets a axis label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "linecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "linewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "minorgridcolor",
          "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
        },
        {
          "label": "minorgridcount",
          "detail": "Sets the number of minor grid ticks per major grid tick\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "minorgriddash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "minorgridwidth",
          "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "range",
          "detail": "Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: Array"
        },
        {
          "label": "rangemode",
          "detail": "If \"normal\", the range is computed in relation to the extrema of the input data. If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data.\nDefault: \"normal\"\nType: enumerated , one of ( \"normal\" | \"tozero\" | \"nonnegative\" )"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showgrid",
          "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: true\nType: boolean"
        },
        {
          "label": "showline",
          "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: \nType: boolean"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.\nDefault: \"start\"\nType: enumerated , one of ( \"start\" | \"end\" | \"both\" | \"none\" )"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "smoothing",
          "detail": "\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "startline",
          "detail": "Determines whether or not a line is drawn at along the starting value of this axis. If \"true\", the start line is drawn on top of the grid lines.\nDefault: \nType: boolean"
        },
        {
          "label": "startlinecolor",
          "detail": "Sets the line color of the start line.\nDefault: \nType: color"
        },
        {
          "label": "startlinewidth",
          "detail": "Sets the width (in px) of the start line.\nDefault: 1\nType: number"
        },
        {
          "label": "tick0",
          "detail": "The starting index of grid lines along the axis\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickfont",
          "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "tickmode",
          "detail": "\nDefault: \"array\"\nType: enumerated , one of ( \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "type",
          "detail": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\nDefault: \"-\"\nType: enumerated , one of ( \"-\" | \"linear\" | \"date\" | \"category\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this axis' title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "offset",
            "detail": "An additional amount by which to offset the title from the tick labels, given in pixels. Note that this used to be set by the now deprecated `titleoffset` attribute.\nDefault: 10\nType: number"
          },
          {
            "label": "text",
            "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \"\"\nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "font": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \"\"Open Sans\", verdana, arial, sans-serif\"\nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: 12\nType: number greater than or equal to 1"
        }
      ]
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "indicator": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"indicator\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "title",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "mode",
        "detail": "Examples: \"number\", \"delta\", \"number+delta\", \"number+delta+gauge\"\nDefault: \nType: flaglist string. Any combination of \"number\", \"delta\", \"gauge\" joined with a \"+\""
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "value",
        "detail": "Sets the number to be displayed.\nDefault: \nType: number"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "align",
        "detail": "Sets the horizontal alignment of the `text` within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
      },
      {
        "label": "delta",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "number",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "gauge",
        "detail": "The gauge of the Indicator plot.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "number": {
      "items": [
        {
          "label": "font",
          "detail": "Set the font used to display main number\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "prefix",
          "detail": "Sets a prefix appearing before the number.\nDefault: \"\"\nType: string"
        },
        {
          "label": "suffix",
          "detail": "Sets a suffix appearing next to the number.\nDefault: \"\"\nType: string"
        },
        {
          "label": "valueformat",
          "detail": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "gauge": {
      "items": [
        {
          "label": "axis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "bar",
          "detail": "Set the appearance of the gauge's value\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "bgcolor",
          "detail": "Sets the gauge background color.\nDefault: \nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the color of the border enclosing the gauge.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) of the border enclosing the gauge.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "shape",
          "detail": "Set the shape of the gauge\nDefault: \"angular\"\nType: enumerated , one of ( \"angular\" | \"bullet\" )"
        },
        {
          "label": "steps",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "threshold",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "bar": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the background color of the arc.\nDefault: \"green\"\nType: color"
          },
          {
            "label": "line",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the bar as a fraction of the total thickness of the gauge.\nDefault: 1\nType: number between or equal to 0 and 1"
          }
        ],
        "line": {
          "items": [
            {
              "label": "color",
              "detail": "Sets the color of the line enclosing each sector.\nDefault: \"#444\"\nType: color"
            },
            {
              "label": "width",
              "detail": "Sets the width (in px) of the line enclosing each sector.\nDefault: 0\nType: number greater than or equal to 0"
            }
          ]
        }
      },
      "steps": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the background color of the arc.\nDefault: \nType: color"
          },
          {
            "label": "line",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "range",
            "detail": "Sets the range of this axis.\nDefault: \nType: Array"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the bar as a fraction of the total thickness of the gauge.\nDefault: 1\nType: number between or equal to 0 and 1"
          }
        ],
        "line": {
          "items": [
            {
              "label": "color",
              "detail": "Sets the color of the line enclosing each sector.\nDefault: \"#444\"\nType: color"
            },
            {
              "label": "width",
              "detail": "Sets the width (in px) of the line enclosing each sector.\nDefault: 0\nType: number greater than or equal to 0"
            }
          ]
        }
      },
      "threshold": {
        "line": {
          "items": [
            {
              "label": "color",
              "detail": "Sets the color of the threshold line.\nDefault: \"#444\"\nType: color"
            },
            {
              "label": "width",
              "detail": "Sets the width (in px) of the threshold line.\nDefault: 1\nType: number greater than or equal to 0"
            }
          ]
        },
        "items": [
          {
            "label": "line",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the threshold line as a fraction of the thickness of the gauge.\nDefault: 0.85\nType: number between or equal to 0 and 1"
          },
          {
            "label": "value",
            "detail": "Sets a treshold value drawn as a line.\nDefault: \nType: number"
          }
        ]
      },
      "axis": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "range",
            "detail": "Sets the range of this axis.\nDefault: \nType: Array"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "visible",
            "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: true\nType: boolean"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this indicator trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this indicator trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this indicator trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this indicator trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "title": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the title. It defaults to `center` except for bullet charts for which it defaults to right.\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "font",
          "detail": "Set the font used to display the title\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of this indicator.\nDefault: \nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "delta": {
      "items": [
        {
          "label": "decreasing",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "font",
          "detail": "Set the font used to display the delta\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "increasing",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "position",
          "detail": "Sets the position of delta with respect to the number.\nDefault: \"bottom\"\nType: enumerated , one of ( \"top\" | \"bottom\" | \"left\" | \"right\" )"
        },
        {
          "label": "prefix",
          "detail": "Sets a prefix appearing before the delta.\nDefault: \"\"\nType: string"
        },
        {
          "label": "reference",
          "detail": "Sets the reference value to compute the delta. By default, it is set to the current value.\nDefault: \nType: number"
        },
        {
          "label": "relative",
          "detail": "Show relative change\nDefault: \nType: boolean"
        },
        {
          "label": "suffix",
          "detail": "Sets a suffix appearing next to the delta.\nDefault: \"\"\nType: string"
        },
        {
          "label": "valueformat",
          "detail": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.\nDefault: \nType: string"
        }
      ],
      "decreasing": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color for increasing value.\nDefault: \"#FF4136\"\nType: color"
          },
          {
            "label": "symbol",
            "detail": "Sets the symbol to display for increasing value\nDefault: \"▼\"\nType: string"
          }
        ]
      },
      "increasing": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color for increasing value.\nDefault: \"#3D9970\"\nType: color"
          },
          {
            "label": "symbol",
            "detail": "Sets the symbol to display for increasing value\nDefault: \"▲\"\nType: string"
          }
        ]
      },
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "heatmapgl": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"heatmapgl\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Sets the x coordinate step. See `x0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "xtype",
        "detail": "If \"array\", the heatmap's x coordinates are given by \"x\" (the default behavior when `x` is provided). If \"scaled\", the heatmap's x coordinates are given by \"x0\" and \"dx\" (the default behavior when `x` is not provided).\nDefault: \nType: enumerated , one of ( \"array\" | \"scaled\" )"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Sets the y coordinate step. See `y0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "ytype",
        "detail": "If \"array\", the heatmap's y coordinates are given by \"y\" (the default behavior when `y` is provided) If \"scaled\", the heatmap's y coordinates are given by \"y0\" and \"dy\" (the default behavior when `y` is not provided)\nDefault: \nType: enumerated , one of ( \"array\" | \"scaled\" )"
      },
      {
        "label": "z",
        "detail": "Sets the z data.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each z value.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: \nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "zmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zmid",
        "detail": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "zmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zsmooth",
        "detail": "Picks a smoothing algorithm use to smooth `z` data.\nDefault: \"fast\"\nType: enumerated , one of ( \"fast\" | false )"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "transpose",
        "detail": "Transposes the z data.\nDefault: \nType: boolean"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "surface": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"surface\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the z coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "surfacecolor",
        "detail": "Sets the surface color values, used for setting a color scale independent of `z`.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each z value. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "scene",
        "detail": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.\nDefault: scene\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: \nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "cauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "cmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "cmid",
        "detail": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as z or surfacecolor. Has no effect when `cauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "cmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.\nDefault: \nType: boolean"
      },
      {
        "label": "contours",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hidesurface",
        "detail": "Determines whether or not a surface is drawn. For example, set `hidesurface` to \"false\" `contours.x.show` to \"true\" and `contours.y.show` to \"true\" to draw a wire frame plot.\nDefault: \nType: boolean"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lighting",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lightposition",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "opacityscale",
        "detail": "Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "zcalendar",
        "detail": "Sets the calendar system to use with `z` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "lightposition": {
      "items": [
        {
          "label": "x",
          "detail": "Numeric vector, representing the X coordinate for each vertex.\nDefault: 10\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "y",
          "detail": "Numeric vector, representing the Y coordinate for each vertex.\nDefault: 10000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "z",
          "detail": "Numeric vector, representing the Z coordinate for each vertex.\nDefault: 0\nType: number between or equal to -100000 and 100000"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "contours": {
      "items": [
        {
          "label": "x",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "y",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "z",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "x": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the contour lines.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "end",
            "detail": "Sets the end contour level value. Must be more than `contours.start`\nDefault: \nType: number"
          },
          {
            "label": "highlight",
            "detail": "Determines whether or not contour lines about the x dimension are highlighted on hover.\nDefault: true\nType: boolean"
          },
          {
            "label": "highlightcolor",
            "detail": "Sets the color of the highlighted contour lines.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "highlightwidth",
            "detail": "Sets the width of the highlighted contour lines.\nDefault: 2\nType: number between or equal to 1 and 16"
          },
          {
            "label": "project",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "show",
            "detail": "Determines whether or not contour lines about the x dimension are drawn.\nDefault: \nType: boolean"
          },
          {
            "label": "size",
            "detail": "Sets the step between each contour level. Must be positive.\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "start",
            "detail": "Sets the starting contour level value. Must be less than `contours.end`\nDefault: \nType: number"
          },
          {
            "label": "usecolormap",
            "detail": "An alternate to \"color\". Determines whether or not the contour lines are colored using the trace \"colorscale\".\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width of the contour lines.\nDefault: 2\nType: number between or equal to 1 and 16"
          }
        ],
        "project": {
          "items": [
            {
              "label": "x",
              "detail": "Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.\nDefault: \nType: boolean"
            },
            {
              "label": "y",
              "detail": "Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.\nDefault: \nType: boolean"
            },
            {
              "label": "z",
              "detail": "Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.\nDefault: \nType: boolean"
            }
          ]
        }
      },
      "z": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the contour lines.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "end",
            "detail": "Sets the end contour level value. Must be more than `contours.start`\nDefault: \nType: number"
          },
          {
            "label": "highlight",
            "detail": "Determines whether or not contour lines about the z dimension are highlighted on hover.\nDefault: true\nType: boolean"
          },
          {
            "label": "highlightcolor",
            "detail": "Sets the color of the highlighted contour lines.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "highlightwidth",
            "detail": "Sets the width of the highlighted contour lines.\nDefault: 2\nType: number between or equal to 1 and 16"
          },
          {
            "label": "project",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "show",
            "detail": "Determines whether or not contour lines about the z dimension are drawn.\nDefault: \nType: boolean"
          },
          {
            "label": "size",
            "detail": "Sets the step between each contour level. Must be positive.\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "start",
            "detail": "Sets the starting contour level value. Must be less than `contours.end`\nDefault: \nType: number"
          },
          {
            "label": "usecolormap",
            "detail": "An alternate to \"color\". Determines whether or not the contour lines are colored using the trace \"colorscale\".\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width of the contour lines.\nDefault: 2\nType: number between or equal to 1 and 16"
          }
        ],
        "project": {
          "items": [
            {
              "label": "x",
              "detail": "Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.\nDefault: \nType: boolean"
            },
            {
              "label": "y",
              "detail": "Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.\nDefault: \nType: boolean"
            },
            {
              "label": "z",
              "detail": "Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.\nDefault: \nType: boolean"
            }
          ]
        }
      },
      "y": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the contour lines.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "end",
            "detail": "Sets the end contour level value. Must be more than `contours.start`\nDefault: \nType: number"
          },
          {
            "label": "highlight",
            "detail": "Determines whether or not contour lines about the y dimension are highlighted on hover.\nDefault: true\nType: boolean"
          },
          {
            "label": "highlightcolor",
            "detail": "Sets the color of the highlighted contour lines.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "highlightwidth",
            "detail": "Sets the width of the highlighted contour lines.\nDefault: 2\nType: number between or equal to 1 and 16"
          },
          {
            "label": "project",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "show",
            "detail": "Determines whether or not contour lines about the y dimension are drawn.\nDefault: \nType: boolean"
          },
          {
            "label": "size",
            "detail": "Sets the step between each contour level. Must be positive.\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "start",
            "detail": "Sets the starting contour level value. Must be less than `contours.end`\nDefault: \nType: number"
          },
          {
            "label": "usecolormap",
            "detail": "An alternate to \"color\". Determines whether or not the contour lines are colored using the trace \"colorscale\".\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width of the contour lines.\nDefault: 2\nType: number between or equal to 1 and 16"
          }
        ],
        "project": {
          "items": [
            {
              "label": "x",
              "detail": "Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.\nDefault: \nType: boolean"
            },
            {
              "label": "y",
              "detail": "Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.\nDefault: \nType: boolean"
            },
            {
              "label": "z",
              "detail": "Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.\nDefault: \nType: boolean"
            }
          ]
        }
      }
    },
    "lighting": {
      "items": [
        {
          "label": "ambient",
          "detail": "Ambient light increases overall color visibility but can wash out the image.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "diffuse",
          "detail": "Represents the extent that incident rays are reflected in a range of angles.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "fresnel",
          "detail": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.\nDefault: 0.2\nType: number between or equal to 0 and 5"
        },
        {
          "label": "roughness",
          "detail": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.\nDefault: 0.5\nType: number between or equal to 0 and 1"
        },
        {
          "label": "specular",
          "detail": "Represents the level that incident rays are reflected in a single direction, causing shine.\nDefault: 0.05\nType: number between or equal to 0 and 2"
        }
      ]
    }
  },
  "pointcloud": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"pointcloud\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xy",
        "detail": "Faster alternative to specifying `x` and `y` separately. If supplied, it must be a typed `Float32Array` array that represents points such that `xy[i \" 2] = x[i]` and `xy[i \" 2 + 1] = y[i]`\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xbounds",
        "detail": "Specify `xbounds` in the shape of `[xMin, xMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `ybounds` for the performance benefits.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "ybounds",
        "detail": "Specify `ybounds` in the shape of `[yMin, yMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `xbounds` for the performance benefits.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "indices",
        "detail": "A sequential value, 0..n, supply it to avoid creating this array inside plotting. If specified, it must be a typed `Int32Array` array. Its length must be equal to or greater than the number of points. For the best performance and memory use, create one large `indices` typed array that is guaranteed to be at least as long as the largest number of points during use, and reuse it on each `Plotly.restyle()` call.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "marker": {
      "items": [
        {
          "label": "blend",
          "detail": "Determines if colors are blended together for a translucency effect in case `opacity` is specified as a value less then `1`. Setting `blend` to `true` reduces zoom/pan speed if used with large numbers of points.\nDefault: \nType: boolean"
        },
        {
          "label": "border",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "color",
          "detail": "Sets the marker fill color. It accepts a specific color. If the color is not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning.\nDefault: \nType: color"
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity. The default value is `1` (fully opaque). If the markers are not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning. Opacity fades the color even if `blend` is left on `false` even if there is no translucency effect in that case.\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "sizemax",
          "detail": "Sets the maximum size (in px) of the rendered marker points. Effective when the `pointcloud` shows only few points.\nDefault: 20\nType: number greater than or equal to 0.1"
        },
        {
          "label": "sizemin",
          "detail": "Sets the minimum size (in px) of the rendered marker points, effective when the `pointcloud` shows a million or more points.\nDefault: 0.5\nType: number between or equal to 0.1 and 2"
        }
      ],
      "border": {
        "items": [
          {
            "label": "arearatio",
            "detail": "Specifies what fraction of the marker area is covered with the border.\nDefault: 0\nType: number between or equal to 0 and 1"
          },
          {
            "label": "color",
            "detail": "Sets the stroke color. It accepts a specific color. If the color is not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning.\nDefault: \nType: color"
          }
        ]
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "mesh3d": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"mesh3d\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "i",
        "detail": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the \"first\" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "j",
        "detail": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the \"second\" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "k",
        "detail": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the \"third\" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "facecolor",
        "detail": "Sets the color of each face Overrides \"color\" and \"vertexcolor\".\nDefault: \nType: data array, Vector"
      },
      {
        "label": "intensity",
        "detail": "Sets the intensity values for vertices or cells as defined by `intensitymode`. It can be used for plotting fields on meshes.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "intensitymode",
        "detail": "Determines the source of `intensity` values.\nDefault: \"vertex\"\nType: enumerated , one of ( \"vertex\" | \"cell\" )"
      },
      {
        "label": "vertexcolor",
        "detail": "Sets the color of each vertex Overrides \"color\". While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "scene",
        "detail": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.\nDefault: scene\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "color",
        "detail": "Sets the color of the whole mesh\nDefault: \nType: color"
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "cauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here `intensity`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "cmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as `intensity` and if set, `cmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "cmid",
        "detail": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `intensity`. Has no effect when `cauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "cmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as `intensity` and if set, `cmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "alphahull",
        "detail": "Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If \"-1\", Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If \">0\", the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If \"0\", the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.\nDefault: -1\nType: number"
      },
      {
        "label": "delaunayaxis",
        "detail": "Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.\nDefault: \"z\"\nType: enumerated , one of ( \"x\" | \"y\" | \"z\" )"
      },
      {
        "label": "contour",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "flatshading",
        "detail": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.\nDefault: \nType: boolean"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lighting",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lightposition",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "zcalendar",
        "detail": "Sets the calendar system to use with `z` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "lightposition": {
      "items": [
        {
          "label": "x",
          "detail": "Numeric vector, representing the X coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "y",
          "detail": "Numeric vector, representing the Y coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "z",
          "detail": "Numeric vector, representing the Z coordinate for each vertex.\nDefault: 0\nType: number between or equal to -100000 and 100000"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "contour": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the color of the contour lines.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "show",
          "detail": "Sets whether or not dynamic contours are shown on hover\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width of the contour lines.\nDefault: 2\nType: number between or equal to 1 and 16"
        }
      ]
    },
    "lighting": {
      "items": [
        {
          "label": "ambient",
          "detail": "Ambient light increases overall color visibility but can wash out the image.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "diffuse",
          "detail": "Represents the extent that incident rays are reflected in a range of angles.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "facenormalsepsilon",
          "detail": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.\nDefault: 1e-06\nType: number between or equal to 0 and 1"
        },
        {
          "label": "fresnel",
          "detail": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.\nDefault: 0.2\nType: number between or equal to 0 and 5"
        },
        {
          "label": "roughness",
          "detail": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.\nDefault: 0.5\nType: number between or equal to 0 and 1"
        },
        {
          "label": "specular",
          "detail": "Represents the level that incident rays are reflected in a single direction, causing shine.\nDefault: 0.05\nType: number between or equal to 0 and 2"
        },
        {
          "label": "vertexnormalsepsilon",
          "detail": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.\nDefault: 1e-12\nType: number between or equal to 0 and 1"
        }
      ]
    }
  },
  "cone": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"cone\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates of the vector field and of the displayed cones.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates of the vector field and of the displayed cones.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the z coordinates of the vector field and of the displayed cones.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "u",
        "detail": "Sets the x components of the vector field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "v",
        "detail": "Sets the y components of the vector field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "w",
        "detail": "Sets the z components of the vector field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with the cones. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"u\", \"v\", \"w\", \"norm\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `norm` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "uhoverformat",
        "detail": "Sets the hover text formatting rulefor `u` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "vhoverformat",
        "detail": "Sets the hover text formatting rulefor `v` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "whoverformat",
        "detail": "Sets the hover text formatting rulefor `w` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "scene",
        "detail": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.\nDefault: scene\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "cauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "cmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "cmid",
        "detail": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "cmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "anchor",
        "detail": "Sets the cones' anchor with respect to their x/y/z positions. Note that \"cm\" denote the cone's center of mass which corresponds to 1/4 from the tail to tip.\nDefault: \"cm\"\nType: enumerated , one of ( \"tip\" | \"tail\" | \"cm\" | \"center\" )"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lighting",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lightposition",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "sizemode",
        "detail": "Determines whether `sizeref` is set as a \"scaled\" (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as \"absolute\" value (in the same units as the vector field).\nDefault: \"scaled\"\nType: enumerated , one of ( \"scaled\" | \"absolute\" )"
      },
      {
        "label": "sizeref",
        "detail": "Adjusts the cone size scaling. The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`. This factor (computed internally) corresponds to the minimum \"time\" to travel across two successive x/y/z positions at the average velocity of those two successive positions. All cones in a given trace use the same factor. With `sizemode` set to \"scaled\", `sizeref` is unitless, its default value is \"0.5\" With `sizemode` set to \"absolute\", `sizeref` has the same units as the u/v/w vector field, its the default value is half the sample's maximum vector norm.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "lightposition": {
      "items": [
        {
          "label": "x",
          "detail": "Numeric vector, representing the X coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "y",
          "detail": "Numeric vector, representing the Y coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "z",
          "detail": "Numeric vector, representing the Z coordinate for each vertex.\nDefault: 0\nType: number between or equal to -100000 and 100000"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "lighting": {
      "items": [
        {
          "label": "ambient",
          "detail": "Ambient light increases overall color visibility but can wash out the image.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "diffuse",
          "detail": "Represents the extent that incident rays are reflected in a range of angles.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "facenormalsepsilon",
          "detail": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.\nDefault: 1e-06\nType: number between or equal to 0 and 1"
        },
        {
          "label": "fresnel",
          "detail": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.\nDefault: 0.2\nType: number between or equal to 0 and 5"
        },
        {
          "label": "roughness",
          "detail": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.\nDefault: 0.5\nType: number between or equal to 0 and 1"
        },
        {
          "label": "specular",
          "detail": "Represents the level that incident rays are reflected in a single direction, causing shine.\nDefault: 0.05\nType: number between or equal to 0 and 2"
        },
        {
          "label": "vertexnormalsepsilon",
          "detail": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.\nDefault: 1e-12\nType: number between or equal to 0 and 1"
        }
      ]
    }
  },
  "histogram2dcontour": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"histogram2dcontour\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the sample data to be binned on the x axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the sample data to be binned on the y axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the aggregation data.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "texttemplate",
        "detail": "For this trace it only has an effect if `coloring` is set to \"heatmap\". Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "histfunc",
        "detail": "Specifies the binning function used for this histogram trace. If \"count\", the histogram values are computed by counting the number of values lying inside each bin. If \"sum\", \"avg\", \"min\", \"max\", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.\nDefault: \"count\"\nType: enumerated , one of ( \"count\" | \"sum\" | \"avg\" | \"min\" | \"max\" )"
      },
      {
        "label": "histnorm",
        "detail": "Specifies the type of normalization used for this histogram trace. If \"\", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If \"percent\" / \"probability\", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If \"density\", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If \"probability density\", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).\nDefault: \"\"\nType: enumerated , one of ( \"\" | \"percent\" | \"probability\" | \"density\" | \"probability density\" )"
      },
      {
        "label": "nbinsx",
        "detail": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.\nDefault: 0\nType: integer greater than or equal to 0"
      },
      {
        "label": "nbinsy",
        "detail": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.\nDefault: 0\nType: integer greater than or equal to 0"
      },
      {
        "label": "autobinx",
        "detail": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.\nDefault: \nType: boolean"
      },
      {
        "label": "autobiny",
        "detail": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.\nDefault: \nType: boolean"
      },
      {
        "label": "bingroup",
        "detail": "Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of \"1\" on two histogram2d traces will make them their x-bins and y-bins match separately.\nDefault: \"\"\nType: string"
      },
      {
        "label": "xbingroup",
        "detail": "Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`\nDefault: \"\"\nType: string"
      },
      {
        "label": "xbins",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "ybingroup",
        "detail": "Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`\nDefault: \"\"\nType: string"
      },
      {
        "label": "ybins",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "For this trace it only has an effect if `coloring` is set to \"heatmap\". Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "zmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zmid",
        "detail": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "zmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "autocontour",
        "detail": "Determines whether or not the contour level attributes are picked by an algorithm. If \"true\", the number of contour levels can be set in `ncontours`. If \"false\", set the contour level attributes in `contours`.\nDefault: true\nType: boolean"
      },
      {
        "label": "contours",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "ncontours",
        "detail": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is \"true\" or if `contours.size` is missing.\nDefault: 15\nType: integer greater than or equal to 1"
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "ybins": {
      "items": [
        {
          "label": "end",
          "detail": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "size",
          "detail": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M<n>\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "start",
          "detail": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.\nDefault: \nType: number or categorical coordinate string"
        }
      ]
    },
    "line": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the color of the contour level. Has no effect if `contours.coloring` is set to \"lines\".\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "smoothing",
          "detail": "Sets the amount of smoothing for the contour lines, where \"0\" corresponds to no smoothing.\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "width",
          "detail": "Sets the contour line width in (in px)\nDefault: 0.5\nType: number greater than or equal to 0"
        }
      ]
    },
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "xbins": {
      "items": [
        {
          "label": "end",
          "detail": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "size",
          "detail": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M<n>\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "start",
          "detail": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.\nDefault: \nType: number or categorical coordinate string"
        }
      ]
    },
    "marker": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the aggregation data.\nDefault: \nType: data array, Vector"
        }
      ]
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \"auto\"\nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \"auto\"\nType: number greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "contours": {
      "items": [
        {
          "label": "coloring",
          "detail": "Determines the coloring method showing the contour values. If \"fill\", coloring is done evenly between each contour level If \"heatmap\", a heatmap gradient coloring is applied between each contour level. If \"lines\", coloring is done on the contour lines. If \"none\", no coloring is applied on this trace.\nDefault: \"fill\"\nType: enumerated , one of ( \"fill\" | \"heatmap\" | \"lines\" | \"none\" )"
        },
        {
          "label": "end",
          "detail": "Sets the end contour level value. Must be more than `contours.start`\nDefault: \nType: number"
        },
        {
          "label": "labelfont",
          "detail": "Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "labelformat",
          "detail": "Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.\nDefault: \"\"\nType: string"
        },
        {
          "label": "operation",
          "detail": "Sets the constraint operation. \"=\" keeps regions equal to `value` \"<\" and \"<=\" keep regions less than `value` \">\" and \">=\" keep regions greater than `value` \"[]\", \"()\", \"[)\", and \"(]\" keep regions inside `value[0]` to `value[1]` \"][\", \")(\", \"](\", \")[\" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.\nDefault: \"=\"\nType: enumerated , one of ( \"=\" | \"<\" | \">=\" | \">\" | \"<=\" | \"[]\" | \"()\" | \"[)\" | \"(]\" | \"][\" | \")(\" | \"](\" | \")[\" )"
        },
        {
          "label": "showlabels",
          "detail": "Determines whether to label the contour lines with their values.\nDefault: \nType: boolean"
        },
        {
          "label": "showlines",
          "detail": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to \"fill\".\nDefault: true\nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the step between each contour level. Must be positive.\nDefault: \nType: number greater than or equal to 0"
        },
        {
          "label": "start",
          "detail": "Sets the starting contour level value. Must be less than `contours.end`\nDefault: \nType: number"
        },
        {
          "label": "type",
          "detail": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.\nDefault: \"levels\"\nType: enumerated , one of ( \"levels\" | \"constraint\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) \"value\" is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) \"value\" is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.\nDefault: 0\nType: number or categorical coordinate string"
        }
      ],
      "labelfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "scatter": {
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "error_y": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "fillpattern": {
      "items": [
        {
          "label": "bgcolor",
          "detail": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "fgcolor",
          "detail": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "fgopacity",
          "detail": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.\nDefault: \nType: number between or equal to 0 and 1"
        },
        {
          "label": "fillmode",
          "detail": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.\nDefault: \"replace\"\nType: enumerated , one of ( \"replace\" | \"overlay\" )"
        },
        {
          "label": "shape",
          "detail": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.\nDefault: \"\"\nType: enumerated or array of enumerateds , one of ( \"\" | \"/\" | \"\\\" | \"x\" | \"-\" | \"|\" | \"+\" | \".\" )"
        },
        {
          "label": "size",
          "detail": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "solidity",
          "detail": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.\nDefault: 0.3\nType: number or array of numbers between or equal to 0 and 1"
        }
      ]
    },
    "line": {
      "items": [
        {
          "label": "backoff",
          "detail": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".\nDefault: \"auto\"\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "color",
          "detail": "Sets the line color.\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "shape",
          "detail": "Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"spline\" | \"hv\" | \"vh\" | \"hvh\" | \"vhv\" )"
        },
        {
          "label": "simplify",
          "detail": "Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.\nDefault: true\nType: boolean"
        },
        {
          "label": "smoothing",
          "detail": "Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "error_x": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "copy_ystyle",
          "detail": "\nDefault: \nType: boolean"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scatter\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Sets the x coordinate step. See `x0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Sets the y coordinate step. See `y0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated or array of enumerateds , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "orientation",
        "detail": "Only relevant in the following cases: 1. when `scattermode` is set to \"group\". 2. when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is \"legendonly\" but not if it is `false`. Sets the stacking direction. With \"v\" (\"h\"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.\nDefault: \nType: enumerated , one of ( \"v\" | \"h\" )"
      },
      {
        "label": "groupnorm",
        "detail": "Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used - including if `visible` is \"legendonly\" but not if it is `false`. Sets the normalization for the sum of this `stackgroup`. With \"fraction\", the value of each trace at each location is divided by the sum of all trace values at that location. \"percent\" is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple `stackgroup`s on one subplot, each will be normalized within its own set.\nDefault: \"\"\nType: enumerated , one of ( \"\" | \"fraction\" | \"percent\" )"
      },
      {
        "label": "alignmentgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\nDefault: \"\"\nType: string"
      },
      {
        "label": "offsetgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\nDefault: \"\"\nType: string"
      },
      {
        "label": "stackgroup",
        "detail": "Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `orientation` is \"h\"). If blank or omitted this trace will not be stacked. Stacking also turns `fill` on by default, using \"tonexty\" (\"tonextx\") if `orientation` is \"h\" (\"v\") and sets the default `mode` to \"lines\" irrespective of point count. You can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.\nDefault: \"\"\nType: string"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "yperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the y axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "yperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "yperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_x",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_y",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "cliponaxis",
        "detail": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".\nDefault: true\nType: boolean"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "fill",
        "detail": "Sets the area to fill with a solid color. Defaults to \"none\" unless this trace is stacked, then it gets \"tonexty\" (\"tonextx\") if `orientation` is \"v\" (\"h\") Use with `fillcolor` if not \"none\". \"tozerox\" and \"tozeroy\" fill to x=0 and y=0 respectively. \"tonextx\" and \"tonexty\" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like \"tozerox\" and \"tozeroy\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.\nDefault: \nType: enumerated , one of ( \"none\" | \"tozeroy\" | \"tozerox\" | \"tonexty\" | \"tonextx\" | \"toself\" | \"tonext\" )"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "fillpattern",
        "detail": "Sets the pattern within the marker.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoveron",
        "detail": "Examples: \"points\", \"fills\", \"points+fills\"\nDefault: \nType: flaglist string. Any combination of \"points\", \"fills\" joined with a \"+\""
      },
      {
        "label": "stackgaps",
        "detail": "Only relevant when `stackgroup` is used, and only the first `stackgaps` found in the `stackgroup` will be used - including if `visible` is \"legendonly\" but not if it is `false`. Determines how we handle locations at which other traces in this group have data but this one does not. With \"infer zero\" we insert a zero at these locations. With \"interpolate\" we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.\nDefault: \"infer zero\"\nType: enumerated , one of ( \"infer zero\" | \"interpolate\" )"
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "angleref",
          "detail": "Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.\nDefault: \"up\"\nType: enumerated , one of ( \"previous\" | \"up\" )"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "gradient",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "maxdisplayed",
          "detail": "Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "standoff",
          "detail": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "gradient": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "type",
            "detail": "Sets the type of gradient used to fill the markers\nDefault: \"none\"\nType: enumerated or array of enumerateds , one of ( \"radial\" | \"horizontal\" | \"vertical\" | \"none\" )"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "densitymapbox": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"densitymapbox\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot\nDefault: \nType: data array, Vector"
      },
      {
        "label": "radius",
        "detail": "Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.\nDefault: 30\nType: number or array of numbers greater than or equal to 1"
      },
      {
        "label": "lat",
        "detail": "Sets the latitude coordinates (in degrees North).\nDefault: \nType: data array, Vector"
      },
      {
        "label": "lon",
        "detail": "Sets the longitude coordinates (in degrees East).\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"lon\", \"lat\", \"lon+lat\", \"lon+lat+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"lon\", \"lat\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "subplot",
        "detail": "Sets a reference between this trace's data coordinates and a mapbox subplot. If \"mapbox\" (the default value), the data refer to `layout.mapbox`. If \"mapbox2\", the data refer to `layout.mapbox2`, and so on.\nDefault: mapbox\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "zmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zmid",
        "detail": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "zmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "below",
        "detail": "Determines if the densitymapbox trace will be inserted before the layer with the specified ID. By default, densitymapbox traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.\nDefault: \nType: string"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "scattermapbox": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scattermapbox\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "lat",
        "detail": "Sets the latitude coordinates (in degrees North).\nDefault: \nType: data array, Vector"
      },
      {
        "label": "lon",
        "detail": "Sets the longitude coordinates (in degrees East).\nDefault: \nType: data array, Vector"
      },
      {
        "label": "cluster",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon` and `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"lon\", \"lat\", \"lon+lat\", \"lon+lat+text\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"lon\", \"lat\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "subplot",
        "detail": "Sets a reference between this trace's data coordinates and a mapbox subplot. If \"mapbox\" (the default value), the data refer to `layout.mapbox`. If \"mapbox2\", the data refer to `layout.mapbox2`, and so on.\nDefault: mapbox\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the icon text font (color=mapbox.layer.paint.text-color, size=mapbox.layer.layout.text-size). Has an effect only when `type` is set to \"symbol\".\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "below",
        "detail": "Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to \"''\".\nDefault: \nType: string"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "fill",
        "detail": "Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\nDefault: \"none\"\nType: enumerated , one of ( \"none\" | \"toself\" )"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the line color.\nDefault: \nType: color"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "allowoverlap",
          "detail": "Flag to draw all symbols, even if they overlap.\nDefault: \nType: boolean"
        },
        {
          "label": "angle",
          "detail": "Sets the marker orientation from true North, in degrees clockwise. When using the \"auto\" default, no rotation would be applied in perspective views which is different from using a zero angle.\nDefault: \"auto\"\nType: number or array of numbers"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for \"circle\" symbols.\nDefault: \"circle\"\nType: string or array of strings"
        }
      ],
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \"Open Sans Regular, Arial Unicode MS Regular\"\nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "cluster": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the color for each cluster step.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "enabled",
          "detail": "Determines whether clustering is enabled or disabled.\nDefault: \nType: boolean"
        },
        {
          "label": "maxzoom",
          "detail": "Sets the maximum zoom level. At zoom levels equal to or greater than this, points will never be clustered.\nDefault: 24\nType: number between or equal to 0 and 24"
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: 1\nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "size",
          "detail": "Sets the size for each cluster step.\nDefault: 20\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "step",
          "detail": "Sets how many points it takes to create a cluster or advance to the next cluster step. Use this in conjunction with arrays for `size` and / or `color`. If an integer, steps start at multiples of this number. If an array, each step extends from the given value until one less than the next value.\nDefault: -1\nType: number or array of numbers greater than or equal to -1"
        }
      ]
    }
  },
  "violin": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"violin\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover. For violin traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical. Note that the trace name is also used as a default value for attribute `scalegroup` (please see its description for details).\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x sample data or coordinates. See overview for more info.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "y",
        "detail": "Sets the y sample data or coordinates. See overview for more info.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "width",
        "detail": "Sets the width of the violin in data coordinates. If \"0\" (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.\nDefault: 0\nType: number greater than or equal to 0"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "orientation",
        "detail": "Sets the orientation of the violin(s). If \"v\" (\"h\"), the distribution is visualized along the vertical (horizontal).\nDefault: \nType: enumerated , one of ( \"v\" | \"h\" )"
      },
      {
        "label": "alignmentgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\nDefault: \"\"\nType: string"
      },
      {
        "label": "offsetgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\nDefault: \"\"\nType: string"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "box",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "quartilemethod",
        "detail": "Sets the method used to compute the sample's Q1 and Q3 quartiles. The \"linear\" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The \"exclusive\" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The \"inclusive\" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"exclusive\" | \"inclusive\" )"
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "bandwidth",
        "detail": "Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoveron",
        "detail": "Examples: \"violins\", \"points\", \"violins+points\", \"violins+points+kde\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"violins\", \"points\", \"kde\" joined with a \"+\" OR \"all\"."
      },
      {
        "label": "pointpos",
        "detail": "Sets the position of the sample points in relation to the violins. If \"0\", the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.\nDefault: \nType: number between or equal to -2 and 2"
      },
      {
        "label": "jitter",
        "detail": "Sets the amount of jitter in the sample points drawn. If \"0\", the sample points align along the distribution axis. If \"1\", the sample points are drawn in a random jitter of width equal to the width of the violins.\nDefault: \nType: number between or equal to 0 and 1"
      },
      {
        "label": "meanline",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "points",
        "detail": "If \"outliers\", only the sample points lying outside the whiskers are shown If \"suspectedoutliers\", the outlier points are shown and points either less than 4\"Q1-3\"Q3 or greater than 4\"Q3-3\"Q1 are highlighted (see `outliercolor`) If \"all\", all sample points are shown If \"false\", only the violins are shown with no sample points. Defaults to \"suspectedoutliers\" when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to \"outliers\".\nDefault: \nType: enumerated , one of ( \"all\" | \"outliers\" | \"suspectedoutliers\" | false )"
      },
      {
        "label": "scalegroup",
        "detail": "If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together\nDefault: \"\"\nType: string"
      },
      {
        "label": "scalemode",
        "detail": "Sets the metric by which the width of each violin is determined. \"width\" means each violin has the same (max) width \"count\" means the violins are scaled by the number of sample points making up each violin.\nDefault: \"width\"\nType: enumerated , one of ( \"width\" | \"count\" )"
      },
      {
        "label": "side",
        "detail": "Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under \"overlay\" mode, where one trace has `side` set to \"positive\" and the other to \"negative\".\nDefault: \"both\"\nType: enumerated , one of ( \"both\" | \"positive\" | \"negative\" )"
      },
      {
        "label": "span",
        "detail": "Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to \"manual\".\nDefault: \nType: Array"
      },
      {
        "label": "spanmode",
        "detail": "Sets the method by which the span in data space where the density function will be computed. \"soft\" means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. \"hard\" means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode \"manual\" and fill in the `span` attribute.\nDefault: \"soft\"\nType: enumerated , one of ( \"soft\" | \"hard\" | \"manual\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the color of line bounding the violin(s).\nDefault: \nType: color"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of line bounding the violin(s).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "outliercolor",
          "detail": "Sets the color of the outlier sample points.\nDefault: \"rgba(0, 0, 0, 0)\"\nType: color"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number greater than or equal to 0"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outliercolor",
            "detail": "Sets the border line color of the outlier sample points. Defaults to marker.color\nDefault: \nType: color"
          },
          {
            "label": "outlierwidth",
            "detail": "Sets the border line width (in px) of the outlier sample points.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: 0\nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "box": {
      "items": [
        {
          "label": "fillcolor",
          "detail": "Sets the inner box plot fill color.\nDefault: \nType: color"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "visible",
          "detail": "Determines if an miniature box plot is drawn inside the violins.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.\nDefault: 0.25\nType: number between or equal to 0 and 1"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the inner box plot bounding line color.\nDefault: \nType: color"
          },
          {
            "label": "width",
            "detail": "Sets the inner box plot bounding line width.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "meanline": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the mean line color.\nDefault: \nType: color"
        },
        {
          "label": "visible",
          "detail": "Determines if a line corresponding to the sample's mean is shown inside the violins. If `box.visible` is turned on, the mean line is drawn inside the inner box. Otherwise, the mean line is drawn from one side of the violin to other.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the mean line width.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    }
  },
  "splom": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"splom\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "dimensions",
        "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "diagonal",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "xaxes",
        "detail": "Sets the list of x axes corresponding to dimensions of this splom trace. By default, a splom will match the first N xaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.\nDefault: \nType: Array"
      },
      {
        "label": "yaxes",
        "detail": "Sets the list of y axes corresponding to dimensions of this splom trace. By default, a splom will match the first N yaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.\nDefault: \nType: Array"
      },
      {
        "label": "showlowerhalf",
        "detail": "Determines whether or not subplots on the lower half from the diagonal are displayed.\nDefault: true\nType: boolean"
      },
      {
        "label": "showupperhalf",
        "detail": "Determines whether or not subplots on the upper half from the diagonal are displayed.\nDefault: true\nType: boolean"
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "dimensions": {
      "items": [
        {
          "label": "axis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "label",
          "detail": "Sets the label corresponding to this splom dimension.\nDefault: \nType: string"
        },
        {
          "label": "name",
          "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
        },
        {
          "label": "templateitemname",
          "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
        },
        {
          "label": "values",
          "detail": "Sets the dimension values to be plotted.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this dimension is shown on the graph. Note that even visible false dimension contribute to the default grid generate by this splom trace.\nDefault: true\nType: boolean"
        }
      ],
      "axis": {
        "items": [
          {
            "label": "matches",
            "detail": "Determines whether or not the x & y axes generated by this dimension match. Equivalent to setting the `matches` axis attribute in the layout with the correct axis id.\nDefault: \nType: boolean"
          },
          {
            "label": "type",
            "detail": "Sets the axis type for this dimension's generated x and y axes. Note that the axis `type` values set in layout take precedence over this attribute.\nDefault: \nType: enumerated , one of ( \"linear\" | \"log\" | \"date\" | \"category\" )"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "diagonal": {
      "items": [
        {
          "label": "visible",
          "detail": "Determines whether or not subplots on the diagonal are displayed.\nDefault: true\nType: boolean"
        }
      ]
    }
  },
  "icicle": {
    "root": {
      "items": [
        {
          "label": "color",
          "detail": "sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        }
      ]
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "pathbar": {
      "items": [
        {
          "label": "edgeshape",
          "detail": "Determines which shape is used for edges between `barpath` labels.\nDefault: \">\"\nType: enumerated , one of ( \">\" | \"<\" | \"|\" | \"/\" | \"\\\" )"
        },
        {
          "label": "side",
          "detail": "Determines on which side of the the treemap the `pathbar` should be presented.\nDefault: \"top\"\nType: enumerated , one of ( \"top\" | \"bottom\" )"
        },
        {
          "label": "textfont",
          "detail": "Sets the font used inside `pathbar`.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.\nDefault: \nType: number greater than or equal to 12"
        },
        {
          "label": "visible",
          "detail": "Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.\nDefault: true\nType: boolean"
        }
      ],
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "leaf": {
      "items": [
        {
          "label": "opacity",
          "detail": "Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7\nDefault: \nType: number between or equal to 0 and 1"
        }
      ]
    },
    "tiling": {
      "items": [
        {
          "label": "flip",
          "detail": "Examples: \"x\", \"y\", \"x+y\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\" joined with a \"+\""
        },
        {
          "label": "orientation",
          "detail": "When set in conjunction with `tiling.flip`, determines on which side the root nodes are drawn in the chart. If `tiling.orientation` is \"v\" and `tiling.flip` is \"\", the root nodes appear at the top. If `tiling.orientation` is \"v\" and `tiling.flip` is \"y\", the root nodes appear at the bottom. If `tiling.orientation` is \"h\" and `tiling.flip` is \"\", the root nodes appear at the left. If `tiling.orientation` is \"h\" and `tiling.flip` is \"x\", the root nodes appear at the right.\nDefault: \"h\"\nType: enumerated , one of ( \"v\" | \"h\" )"
        },
        {
          "label": "pad",
          "detail": "Sets the inner padding (in px).\nDefault: 0\nType: number greater than or equal to 0"
        }
      ]
    },
    "insidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"icicle\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "parents",
        "detail": "Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "values",
        "detail": "Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "labels",
        "detail": "Sets the labels of each of the sectors.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements.\nDefault: \"top left\"\nType: enumerated , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"name\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the font used for `textinfo`.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "branchvalues",
        "detail": "Determines how the items in `values` are summed. When set to \"total\", items in `values` are taken to be value of all its descendants. When set to \"remainder\", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.\nDefault: \"remainder\"\nType: enumerated , one of ( \"remainder\" | \"total\" )"
      },
      {
        "label": "count",
        "detail": "Examples: \"branches\", \"leaves\", \"branches+leaves\"\nDefault: \nType: flaglist string. Any combination of \"branches\", \"leaves\" joined with a \"+\""
      },
      {
        "label": "tiling",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "pathbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextfont",
        "detail": "Sets the font used for `textinfo` lying inside the sector.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "outsidetextfont",
        "detail": "Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented on top left corner of a treemap graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "root",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "leaf",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "level",
        "detail": "Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "maxdepth",
        "detail": "Sets the number of rendered sectors from any given `level`. Set `maxdepth` to \"-1\" to render all the levels in the hierarchy.\nDefault: -1\nType: integer"
      },
      {
        "label": "sort",
        "detail": "Determines whether or not the sectors are reordered from largest to smallest.\nDefault: true\nType: boolean"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "outsidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this icicle trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this icicle trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this icicle trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this icicle trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "marker": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colors",
          "detail": "Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "pattern",
          "detail": "Sets the pattern within the marker.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.\nDefault: \nType: boolean"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the line enclosing each sector.\nDefault: 1\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "pattern": {
        "items": [
          {
            "label": "bgcolor",
            "detail": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgcolor",
            "detail": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgopacity",
            "detail": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "fillmode",
            "detail": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.\nDefault: \"replace\"\nType: enumerated , one of ( \"replace\" | \"overlay\" )"
          },
          {
            "label": "shape",
            "detail": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.\nDefault: \"\"\nType: enumerated or array of enumerateds , one of ( \"\" | \"/\" | \"\\\" | \"x\" | \"-\" | \"|\" | \"+\" | \".\" )"
          },
          {
            "label": "size",
            "detail": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
          },
          {
            "label": "solidity",
            "detail": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.\nDefault: 0.3\nType: number or array of numbers between or equal to 0 and 1"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "funnelarea": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"funnelarea\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "title",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "values",
        "detail": "Sets the values of the sectors. If omitted, we count occurrences of each label.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "labels",
        "detail": "Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "dlabel",
        "detail": "Sets the label step. See `label0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "label0",
        "detail": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.\nDefault: 0\nType: number"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "textposition",
        "detail": "Specifies the location of the `textinfo`.\nDefault: \"inside\"\nType: enumerated or array of enumerateds , one of ( \"inside\" | \"none\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `text` and `percent`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"percent\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `text` and `percent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the font used for `textinfo`.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"percent\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "aspectratio",
        "detail": "Sets the ratio between height and width\nDefault: 1\nType: number greater than or equal to 0"
      },
      {
        "label": "baseratio",
        "detail": "Sets the ratio between bottom length and maximum top length.\nDefault: 0.333\nType: number between or equal to 0 and 1"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextfont",
        "detail": "Sets the font used for `textinfo` lying inside the sector.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "scalegroup",
        "detail": "If there are multiple funnelareas that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.\nDefault: \"\"\nType: string"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this funnelarea trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this funnelarea trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this funnelarea trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this funnelarea trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "marker": {
      "items": [
        {
          "label": "colors",
          "detail": "Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "pattern",
          "detail": "Sets the pattern within the marker.\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the line enclosing each sector.\nDefault: 1\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "pattern": {
        "items": [
          {
            "label": "bgcolor",
            "detail": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgcolor",
            "detail": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgopacity",
            "detail": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "fillmode",
            "detail": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.\nDefault: \"replace\"\nType: enumerated , one of ( \"replace\" | \"overlay\" )"
          },
          {
            "label": "shape",
            "detail": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.\nDefault: \"\"\nType: enumerated or array of enumerateds , one of ( \"\" | \"/\" | \"\\\" | \"x\" | \"-\" | \"|\" | \"+\" | \".\" )"
          },
          {
            "label": "size",
            "detail": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
          },
          {
            "label": "solidity",
            "detail": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.\nDefault: 0.3\nType: number or array of numbers between or equal to 0 and 1"
          }
        ]
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "title": {
      "items": [
        {
          "label": "font",
          "detail": "Sets the font used for `title`. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "position",
          "detail": "Specifies the location of the `title`. Note that the title's position used to be set by the now deprecated `titleposition` attribute.\nDefault: \"top center\"\nType: enumerated , one of ( \"top left\" | \"top center\" | \"top right\" )"
        },
        {
          "label": "text",
          "detail": "Sets the title of the chart. If it is empty, no title is displayed. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "insidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "bar": {
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "error_y": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "error_x": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "copy_ystyle",
          "detail": "\nDefault: \nType: boolean"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "insidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "outsidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"bar\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Sets the x coordinate step. See `x0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Sets the y coordinate step. See `y0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "base",
        "detail": "Sets where the bar base is drawn (in position axis units). In \"stack\" or \"relative\" barmode, traces that set \"base\" will be excluded and drawn in \"overlay\" mode instead.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "width",
        "detail": "Sets the bar width (in position axis units).\nDefault: \nType: number or array of numbers greater than or equal to 0"
      },
      {
        "label": "offset",
        "detail": "Shifts the position where the bar is drawn (in position axis units). In \"group\" barmode, traces that set \"offset\" will be excluded and drawn in \"overlay\" mode instead.\nDefault: \nType: number or array of numbers"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Specifies the location of the `text`. \"inside\" positions `text` inside, next to the bar end (rotated and scaled if needed). \"outside\" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. \"auto\" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If \"none\", no text appears.\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"inside\" | \"outside\" | \"auto\" | \"none\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `value` and `label`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "orientation",
        "detail": "Sets the orientation of the bars. With \"v\" (\"h\"), the value of the each bar spans along the vertical (horizontal).\nDefault: \nType: enumerated , one of ( \"v\" | \"h\" )"
      },
      {
        "label": "alignmentgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\nDefault: \"\"\nType: string"
      },
      {
        "label": "offsetgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\nDefault: \"\"\nType: string"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "yperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the y axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "yperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "yperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textangle",
        "detail": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With \"auto\" the texts may automatically be rotated to fit with the maximum size in bars.\nDefault: \"auto\"\nType: angle"
      },
      {
        "label": "textfont",
        "detail": "Sets the font used for `text`.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_x",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_y",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "cliponaxis",
        "detail": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".\nDefault: true\nType: boolean"
      },
      {
        "label": "constraintext",
        "detail": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.\nDefault: \"both\"\nType: enumerated , one of ( \"inside\" | \"outside\" | \"both\" | \"none\" )"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextanchor",
        "detail": "Determines if texts are kept at center or start/end points in `textposition` \"inside\" mode.\nDefault: \"end\"\nType: enumerated , one of ( \"end\" | \"middle\" | \"start\" )"
      },
      {
        "label": "insidetextfont",
        "detail": "Sets the font used for `text` lying inside the bar.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "outsidetextfont",
        "detail": "Sets the font used for `text` lying outside the bar.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "marker": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the bars.\nDefault: 1\nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "pattern",
          "detail": "Sets the pattern within the marker.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "pattern": {
        "items": [
          {
            "label": "bgcolor",
            "detail": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgcolor",
            "detail": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgopacity",
            "detail": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "fillmode",
            "detail": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.\nDefault: \"replace\"\nType: enumerated , one of ( \"replace\" | \"overlay\" )"
          },
          {
            "label": "shape",
            "detail": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.\nDefault: \"\"\nType: enumerated or array of enumerateds , one of ( \"\" | \"/\" | \"\\\" | \"x\" | \"-\" | \"|\" | \"+\" | \".\" )"
          },
          {
            "label": "size",
            "detail": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
          },
          {
            "label": "solidity",
            "detail": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.\nDefault: 0.3\nType: number or array of numbers between or equal to 0 and 1"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "histogram2d": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"histogram2d\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the sample data to be binned on the x axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xgap",
        "detail": "Sets the horizontal gap (in pixels) between bricks.\nDefault: 0\nType: number greater than or equal to 0"
      },
      {
        "label": "y",
        "detail": "Sets the sample data to be binned on the y axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "ygap",
        "detail": "Sets the vertical gap (in pixels) between bricks.\nDefault: 0\nType: number greater than or equal to 0"
      },
      {
        "label": "z",
        "detail": "Sets the aggregation data.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z`\nDefault: \"\"\nType: string"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "histfunc",
        "detail": "Specifies the binning function used for this histogram trace. If \"count\", the histogram values are computed by counting the number of values lying inside each bin. If \"sum\", \"avg\", \"min\", \"max\", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.\nDefault: \"count\"\nType: enumerated , one of ( \"count\" | \"sum\" | \"avg\" | \"min\" | \"max\" )"
      },
      {
        "label": "histnorm",
        "detail": "Specifies the type of normalization used for this histogram trace. If \"\", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If \"percent\" / \"probability\", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If \"density\", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If \"probability density\", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).\nDefault: \"\"\nType: enumerated , one of ( \"\" | \"percent\" | \"probability\" | \"density\" | \"probability density\" )"
      },
      {
        "label": "nbinsx",
        "detail": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.\nDefault: 0\nType: integer greater than or equal to 0"
      },
      {
        "label": "nbinsy",
        "detail": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.\nDefault: 0\nType: integer greater than or equal to 0"
      },
      {
        "label": "autobinx",
        "detail": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.\nDefault: \nType: boolean"
      },
      {
        "label": "autobiny",
        "detail": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.\nDefault: \nType: boolean"
      },
      {
        "label": "bingroup",
        "detail": "Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of \"1\" on two histogram2d traces will make them their x-bins and y-bins match separately.\nDefault: \"\"\nType: string"
      },
      {
        "label": "xbingroup",
        "detail": "Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`\nDefault: \"\"\nType: string"
      },
      {
        "label": "xbins",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "ybingroup",
        "detail": "Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`\nDefault: \"\"\nType: string"
      },
      {
        "label": "ybins",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: \nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "zmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zmid",
        "detail": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "zmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zsmooth",
        "detail": "Picks a smoothing algorithm use to smooth `z` data.\nDefault: \nType: enumerated , one of ( \"fast\" | \"best\" | false )"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "ybins": {
      "items": [
        {
          "label": "end",
          "detail": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "size",
          "detail": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M<n>\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "start",
          "detail": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.\nDefault: \nType: number or categorical coordinate string"
        }
      ]
    },
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "xbins": {
      "items": [
        {
          "label": "end",
          "detail": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "size",
          "detail": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M<n>\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "start",
          "detail": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.\nDefault: \nType: number or categorical coordinate string"
        }
      ]
    },
    "marker": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the aggregation data.\nDefault: \nType: data array, Vector"
        }
      ]
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \"auto\"\nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \"auto\"\nType: number greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "isosurface": {
    "surface": {
      "items": [
        {
          "label": "count",
          "detail": "Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.\nDefault: 2\nType: integer greater than or equal to 1"
        },
        {
          "label": "fill",
          "detail": "Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "pattern",
          "detail": "Examples: \"A\", \"B\", \"A+B\", \"A+B+C\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"A\", \"B\", \"C\", \"D\", \"E\" joined with a \"+\" OR \"all\" or \"odd\" or \"even\"."
        },
        {
          "label": "show",
          "detail": "Hides/displays surfaces between minimum and maximum iso-values.\nDefault: true\nType: boolean"
        }
      ]
    },
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "caps": {
      "items": [
        {
          "label": "x",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "y",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "z",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "x": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "show",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: true\nType: boolean"
          }
        ]
      },
      "z": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "show",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: true\nType: boolean"
          }
        ]
      },
      "y": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "show",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: true\nType: boolean"
          }
        ]
      }
    },
    "contour": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the color of the contour lines.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "show",
          "detail": "Sets whether or not dynamic contours are shown on hover\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width of the contour lines.\nDefault: 2\nType: number between or equal to 1 and 16"
        }
      ]
    },
    "spaceframe": {
      "items": [
        {
          "label": "fill",
          "detail": "Sets the fill ratio of the `spaceframe` elements. The default fill value is 0.15 meaning that only 15% of the area of every faces of tetras would be shaded. Applying a greater `fill` ratio would allow the creation of stronger elements or could be sued to have entirely closed areas (in case of using 1).\nDefault: 0.15\nType: number between or equal to 0 and 1"
        },
        {
          "label": "show",
          "detail": "Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.\nDefault: \nType: boolean"
        }
      ]
    },
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"isosurface\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the X coordinates of the vertices on X axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the Y coordinates of the vertices on Y axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the Z coordinates of the vertices on Z axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "value",
        "detail": "Sets the 4th dimension (value) of the vertices.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "valuehoverformat",
        "detail": "Sets the hover text formatting rulefor `value` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "scene",
        "detail": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.\nDefault: scene\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "cauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "cmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "cmid",
        "detail": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "cmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "caps",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "contour",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "flatshading",
        "detail": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.\nDefault: true\nType: boolean"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "isomax",
        "detail": "Sets the maximum boundary for iso-surface plot.\nDefault: \nType: number"
      },
      {
        "label": "isomin",
        "detail": "Sets the minimum boundary for iso-surface plot.\nDefault: \nType: number"
      },
      {
        "label": "lighting",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lightposition",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "slices",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "spaceframe",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "surface",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "slices": {
      "items": [
        {
          "label": "x",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "y",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "z",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "x": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "locations",
            "detail": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.\nDefault: Default:\nType: data array, Vector"
          },
          {
            "label": "show",
            "detail": "Determines whether or not slice planes about the x dimension are drawn.\nDefault: \nType: boolean"
          }
        ]
      },
      "z": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "locations",
            "detail": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.\nDefault: Default:\nType: data array, Vector"
          },
          {
            "label": "show",
            "detail": "Determines whether or not slice planes about the z dimension are drawn.\nDefault: \nType: boolean"
          }
        ]
      },
      "y": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "locations",
            "detail": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.\nDefault: Default:\nType: data array, Vector"
          },
          {
            "label": "show",
            "detail": "Determines whether or not slice planes about the y dimension are drawn.\nDefault: \nType: boolean"
          }
        ]
      }
    },
    "lightposition": {
      "items": [
        {
          "label": "x",
          "detail": "Numeric vector, representing the X coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "y",
          "detail": "Numeric vector, representing the Y coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "z",
          "detail": "Numeric vector, representing the Z coordinate for each vertex.\nDefault: 0\nType: number between or equal to -100000 and 100000"
        }
      ]
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "lighting": {
      "items": [
        {
          "label": "ambient",
          "detail": "Ambient light increases overall color visibility but can wash out the image.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "diffuse",
          "detail": "Represents the extent that incident rays are reflected in a range of angles.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "facenormalsepsilon",
          "detail": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.\nDefault: 0\nType: number between or equal to 0 and 1"
        },
        {
          "label": "fresnel",
          "detail": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.\nDefault: 0.2\nType: number between or equal to 0 and 5"
        },
        {
          "label": "roughness",
          "detail": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.\nDefault: 0.5\nType: number between or equal to 0 and 1"
        },
        {
          "label": "specular",
          "detail": "Represents the level that incident rays are reflected in a single direction, causing shine.\nDefault: 0.05\nType: number between or equal to 0 and 2"
        },
        {
          "label": "vertexnormalsepsilon",
          "detail": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.\nDefault: 1e-12\nType: number between or equal to 0 and 1"
        }
      ]
    }
  },
  "scatterpolargl": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scatterpolargl\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "r",
        "detail": "Sets the radial coordinates\nDefault: \nType: data array, Vector"
      },
      {
        "label": "r0",
        "detail": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dr",
        "detail": "Sets the r coordinate step.\nDefault: 1\nType: number"
      },
      {
        "label": "theta",
        "detail": "Sets the angular coordinates\nDefault: \nType: data array, Vector"
      },
      {
        "label": "theta0",
        "detail": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dtheta",
        "detail": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.\nDefault: \nType: number"
      },
      {
        "label": "thetaunit",
        "detail": "Sets the unit of input \"theta\" values. Has an effect only when on \"linear\" angular axes.\nDefault: \"degrees\"\nType: enumerated , one of ( \"radians\" | \"degrees\" | \"gradians\" )"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated or array of enumerateds , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `r`, `theta` and `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"r\", \"theta\", \"r+theta\", \"r+theta+text\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"r\", \"theta\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "subplot",
        "detail": "Sets a reference between this trace's data coordinates and a polar subplot. If \"polar\" (the default value), the data refer to `layout.polar`. If \"polar2\", the data refer to `layout.polar2`, and so on.\nDefault: polar\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "fill",
        "detail": "Sets the area to fill with a solid color. Defaults to \"none\" unless this trace is stacked, then it gets \"tonexty\" (\"tonextx\") if `orientation` is \"v\" (\"h\") Use with `fillcolor` if not \"none\". \"tozerox\" and \"tozeroy\" fill to x=0 and y=0 respectively. \"tonextx\" and \"tonexty\" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like \"tozerox\" and \"tozeroy\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.\nDefault: \"none\"\nType: enumerated , one of ( \"none\" | \"tozeroy\" | \"tozerox\" | \"tonexty\" | \"tonextx\" | \"toself\" | \"tonext\" )"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the line color.\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the style of the lines.\nDefault: \"solid\"\nType: enumerated , one of ( \"dash\" | \"dashdot\" | \"dot\" | \"longdash\" | \"longdashdot\" | \"solid\" )"
        },
        {
          "label": "shape",
          "detail": "Determines the line shape. The values correspond to step-wise line shapes.\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"hv\" | \"vh\" | \"hvh\" | \"vhv\" )"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    }
  },
  "contour": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"contour\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Sets the x coordinate step. See `x0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "xtype",
        "detail": "If \"array\", the heatmap's x coordinates are given by \"x\" (the default behavior when `x` is provided). If \"scaled\", the heatmap's x coordinates are given by \"x0\" and \"dx\" (the default behavior when `x` is not provided).\nDefault: \nType: enumerated , one of ( \"array\" | \"scaled\" )"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Sets the y coordinate step. See `y0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "ytype",
        "detail": "If \"array\", the heatmap's y coordinates are given by \"y\" (the default behavior when `y` is provided) If \"scaled\", the heatmap's y coordinates are given by \"y0\" and \"dy\" (the default behavior when `y` is not provided)\nDefault: \nType: enumerated , one of ( \"array\" | \"scaled\" )"
      },
      {
        "label": "z",
        "detail": "Sets the z data.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each z value.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "texttemplate",
        "detail": "For this trace it only has an effect if `coloring` is set to \"heatmap\". Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "yperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the y axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "yperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "yperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "For this trace it only has an effect if `coloring` is set to \"heatmap\". Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: \nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "zmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zmid",
        "detail": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "zmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "autocontour",
        "detail": "Determines whether or not the contour level attributes are picked by an algorithm. If \"true\", the number of contour levels can be set in `ncontours`. If \"false\", set the contour level attributes in `contours`.\nDefault: true\nType: boolean"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array otherwise it is defaulted to false.\nDefault: \nType: boolean"
      },
      {
        "label": "contours",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color if `contours.type` is \"constraint\". Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverongaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.\nDefault: true\nType: boolean"
      },
      {
        "label": "ncontours",
        "detail": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is \"true\" or if `contours.size` is missing.\nDefault: 15\nType: integer greater than or equal to 1"
      },
      {
        "label": "transpose",
        "detail": "Transposes the z data.\nDefault: \nType: boolean"
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the color of the contour level. Has no effect if `contours.coloring` is set to \"lines\".\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "smoothing",
          "detail": "Sets the amount of smoothing for the contour lines, where \"0\" corresponds to no smoothing.\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "width",
          "detail": "Sets the contour line width in (in px) Defaults to \"0.5\" when `contours.type` is \"levels\". Defaults to \"2\" when `contour.type` is \"constraint\".\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \"auto\"\nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \"auto\"\nType: number greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "contours": {
      "items": [
        {
          "label": "coloring",
          "detail": "Determines the coloring method showing the contour values. If \"fill\", coloring is done evenly between each contour level If \"heatmap\", a heatmap gradient coloring is applied between each contour level. If \"lines\", coloring is done on the contour lines. If \"none\", no coloring is applied on this trace.\nDefault: \"fill\"\nType: enumerated , one of ( \"fill\" | \"heatmap\" | \"lines\" | \"none\" )"
        },
        {
          "label": "end",
          "detail": "Sets the end contour level value. Must be more than `contours.start`\nDefault: \nType: number"
        },
        {
          "label": "labelfont",
          "detail": "Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "labelformat",
          "detail": "Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.\nDefault: \"\"\nType: string"
        },
        {
          "label": "operation",
          "detail": "Sets the constraint operation. \"=\" keeps regions equal to `value` \"<\" and \"<=\" keep regions less than `value` \">\" and \">=\" keep regions greater than `value` \"[]\", \"()\", \"[)\", and \"(]\" keep regions inside `value[0]` to `value[1]` \"][\", \")(\", \"](\", \")[\" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.\nDefault: \"=\"\nType: enumerated , one of ( \"=\" | \"<\" | \">=\" | \">\" | \"<=\" | \"[]\" | \"()\" | \"[)\" | \"(]\" | \"][\" | \")(\" | \"](\" | \")[\" )"
        },
        {
          "label": "showlabels",
          "detail": "Determines whether to label the contour lines with their values.\nDefault: \nType: boolean"
        },
        {
          "label": "showlines",
          "detail": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to \"fill\".\nDefault: true\nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the step between each contour level. Must be positive.\nDefault: \nType: number greater than or equal to 0"
        },
        {
          "label": "start",
          "detail": "Sets the starting contour level value. Must be less than `contours.end`\nDefault: \nType: number"
        },
        {
          "label": "type",
          "detail": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.\nDefault: \"levels\"\nType: enumerated , one of ( \"levels\" | \"constraint\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) \"value\" is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) \"value\" is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.\nDefault: 0\nType: number or categorical coordinate string"
        }
      ],
      "labelfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "scattergeo": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scattergeo\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "lat",
        "detail": "Sets the latitude coordinates (in degrees North).\nDefault: \nType: data array, Vector"
      },
      {
        "label": "geojson",
        "detail": "Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when `locations` is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \"FeatureCollection\" or \"Feature\" with geometries of type \"Polygon\" or \"MultiPolygon\".\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "featureidkey",
        "detail": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example \"properties.name\".\nDefault: \"id\"\nType: string"
      },
      {
        "label": "locations",
        "detail": "Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "lon",
        "detail": "Sets the longitude coordinates (in degrees East).\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated or array of enumerateds , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon`, `location` and `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"lon\", \"lat\", \"lon+lat\", \"lon+lat+location\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"lon\", \"lat\", \"location\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "geo",
        "detail": "Sets a reference between this trace's geospatial coordinates and a geographic map. If \"geo\" (the default value), the geospatial coordinates refer to `layout.geo`. If \"geo2\", the geospatial coordinates refer to `layout.geo2`, and so on.\nDefault: geo\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "fill",
        "detail": "Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\nDefault: \"none\"\nType: enumerated , one of ( \"none\" | \"toself\" )"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "locationmode",
        "detail": "Determines the set of locations used to match entries in `locations` to regions on the map. Values \"ISO-3\", \"USA-states\", \"country names\" correspond to features on the base map and value \"geojson-id\" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.\nDefault: \"ISO-3\"\nType: enumerated , one of ( \"ISO-3\" | \"USA-states\" | \"country names\" | \"geojson-id\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the line color.\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "angleref",
          "detail": "Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen. With \"north\", angle 0 points north based on the current map projection.\nDefault: \"up\"\nType: enumerated , one of ( \"previous\" | \"up\" | \"north\" )"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "gradient",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "standoff",
          "detail": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "gradient": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "type",
            "detail": "Sets the type of gradient used to fill the markers\nDefault: \"none\"\nType: enumerated or array of enumerateds , one of ( \"radial\" | \"horizontal\" | \"vertical\" | \"none\" )"
          }
        ]
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    }
  },
  "volume": {
    "surface": {
      "items": [
        {
          "label": "count",
          "detail": "Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.\nDefault: 2\nType: integer greater than or equal to 1"
        },
        {
          "label": "fill",
          "detail": "Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "pattern",
          "detail": "Examples: \"A\", \"B\", \"A+B\", \"A+B+C\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"A\", \"B\", \"C\", \"D\", \"E\" joined with a \"+\" OR \"all\" or \"odd\" or \"even\"."
        },
        {
          "label": "show",
          "detail": "Hides/displays surfaces between minimum and maximum iso-values.\nDefault: true\nType: boolean"
        }
      ]
    },
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "caps": {
      "items": [
        {
          "label": "x",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "y",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "z",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "x": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "show",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: true\nType: boolean"
          }
        ]
      },
      "z": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "show",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: true\nType: boolean"
          }
        ]
      },
      "y": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "show",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: true\nType: boolean"
          }
        ]
      }
    },
    "contour": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the color of the contour lines.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "show",
          "detail": "Sets whether or not dynamic contours are shown on hover\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width of the contour lines.\nDefault: 2\nType: number between or equal to 1 and 16"
        }
      ]
    },
    "spaceframe": {
      "items": [
        {
          "label": "fill",
          "detail": "Sets the fill ratio of the `spaceframe` elements. The default fill value is 1 meaning that they are entirely shaded. Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "show",
          "detail": "Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.\nDefault: \nType: boolean"
        }
      ]
    },
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"volume\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the X coordinates of the vertices on X axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the Y coordinates of the vertices on Y axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the Z coordinates of the vertices on Z axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "value",
        "detail": "Sets the 4th dimension (value) of the vertices.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "valuehoverformat",
        "detail": "Sets the hover text formatting rulefor `value` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "scene",
        "detail": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.\nDefault: scene\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "cauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "cmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "cmid",
        "detail": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "cmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "caps",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "contour",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "flatshading",
        "detail": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.\nDefault: true\nType: boolean"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "isomax",
        "detail": "Sets the maximum boundary for iso-surface plot.\nDefault: \nType: number"
      },
      {
        "label": "isomin",
        "detail": "Sets the minimum boundary for iso-surface plot.\nDefault: \nType: number"
      },
      {
        "label": "lighting",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lightposition",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "opacityscale",
        "detail": "Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "slices",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "spaceframe",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "surface",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "slices": {
      "items": [
        {
          "label": "x",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "y",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "z",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "x": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "locations",
            "detail": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.\nDefault: Default:\nType: data array, Vector"
          },
          {
            "label": "show",
            "detail": "Determines whether or not slice planes about the x dimension are drawn.\nDefault: \nType: boolean"
          }
        ]
      },
      "z": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "locations",
            "detail": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.\nDefault: Default:\nType: data array, Vector"
          },
          {
            "label": "show",
            "detail": "Determines whether or not slice planes about the z dimension are drawn.\nDefault: \nType: boolean"
          }
        ]
      },
      "y": {
        "items": [
          {
            "label": "fill",
            "detail": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "locations",
            "detail": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.\nDefault: Default:\nType: data array, Vector"
          },
          {
            "label": "show",
            "detail": "Determines whether or not slice planes about the y dimension are drawn.\nDefault: \nType: boolean"
          }
        ]
      }
    },
    "lightposition": {
      "items": [
        {
          "label": "x",
          "detail": "Numeric vector, representing the X coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "y",
          "detail": "Numeric vector, representing the Y coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "z",
          "detail": "Numeric vector, representing the Z coordinate for each vertex.\nDefault: 0\nType: number between or equal to -100000 and 100000"
        }
      ]
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "lighting": {
      "items": [
        {
          "label": "ambient",
          "detail": "Ambient light increases overall color visibility but can wash out the image.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "diffuse",
          "detail": "Represents the extent that incident rays are reflected in a range of angles.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "facenormalsepsilon",
          "detail": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.\nDefault: 0\nType: number between or equal to 0 and 1"
        },
        {
          "label": "fresnel",
          "detail": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.\nDefault: 0.2\nType: number between or equal to 0 and 5"
        },
        {
          "label": "roughness",
          "detail": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.\nDefault: 0.5\nType: number between or equal to 0 and 1"
        },
        {
          "label": "specular",
          "detail": "Represents the level that incident rays are reflected in a single direction, causing shine.\nDefault: 0.05\nType: number between or equal to 0 and 2"
        },
        {
          "label": "vertexnormalsepsilon",
          "detail": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.\nDefault: 1e-12\nType: number between or equal to 0 and 1"
        }
      ]
    }
  },
  "histogram": {
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    },
    "cumulative": {
      "items": [
        {
          "label": "currentbin",
          "detail": "Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. \"include\" is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. \"exclude\" makes the opposite half-bin bias, and \"half\" removes it.\nDefault: \"include\"\nType: enumerated , one of ( \"include\" | \"exclude\" | \"half\" )"
        },
        {
          "label": "direction",
          "detail": "Only applies if cumulative is enabled. If \"increasing\" (default) we sum all prior bins, so the result increases from left to right. If \"decreasing\" we sum later bins so the result decreases from left to right.\nDefault: \"increasing\"\nType: enumerated , one of ( \"increasing\" | \"decreasing\" )"
        },
        {
          "label": "enabled",
          "detail": "If true, display the cumulative distribution by summing the binned values. Use the `direction` and `centralbin` attributes to tune the accumulation method. Note: in this mode, the \"density\" `histnorm` settings behave the same as their equivalents without \"density\": \"\" and \"density\" both rise to the number of data points, and \"probability\" and \"probability density\" both rise to the number of sample points.\nDefault: \nType: boolean"
        }
      ]
    },
    "ybins": {
      "items": [
        {
          "label": "end",
          "detail": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "size",
          "detail": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M<n>\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "start",
          "detail": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.\nDefault: \nType: number or categorical coordinate string"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "error_y": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "xbins": {
      "items": [
        {
          "label": "end",
          "detail": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "size",
          "detail": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M<n>\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "start",
          "detail": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.\nDefault: \nType: number or categorical coordinate string"
        }
      ]
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "error_x": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "copy_ystyle",
          "detail": "\nDefault: \nType: boolean"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "insidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "outsidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"histogram\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the sample data to be binned on the x axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the sample data to be binned on the y axis.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Specifies the location of the `text`. \"inside\" positions `text` inside, next to the bar end (rotated and scaled if needed). \"outside\" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. \"auto\" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If \"none\", no text appears.\nDefault: \"auto\"\nType: enumerated , one of ( \"inside\" | \"outside\" | \"auto\" | \"none\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label` and `value`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `binNumber` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "orientation",
        "detail": "Sets the orientation of the bars. With \"v\" (\"h\"), the value of the each bar spans along the vertical (horizontal).\nDefault: \nType: enumerated , one of ( \"v\" | \"h\" )"
      },
      {
        "label": "histfunc",
        "detail": "Specifies the binning function used for this histogram trace. If \"count\", the histogram values are computed by counting the number of values lying inside each bin. If \"sum\", \"avg\", \"min\", \"max\", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.\nDefault: \"count\"\nType: enumerated , one of ( \"count\" | \"sum\" | \"avg\" | \"min\" | \"max\" )"
      },
      {
        "label": "histnorm",
        "detail": "Specifies the type of normalization used for this histogram trace. If \"\", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If \"percent\" / \"probability\", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If \"density\", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If \"probability density\", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).\nDefault: \"\"\nType: enumerated , one of ( \"\" | \"percent\" | \"probability\" | \"density\" | \"probability density\" )"
      },
      {
        "label": "alignmentgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\nDefault: \"\"\nType: string"
      },
      {
        "label": "offsetgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\nDefault: \"\"\nType: string"
      },
      {
        "label": "nbinsx",
        "detail": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.\nDefault: 0\nType: integer greater than or equal to 0"
      },
      {
        "label": "nbinsy",
        "detail": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.\nDefault: 0\nType: integer greater than or equal to 0"
      },
      {
        "label": "autobinx",
        "detail": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.\nDefault: \nType: boolean"
      },
      {
        "label": "autobiny",
        "detail": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.\nDefault: \nType: boolean"
      },
      {
        "label": "bingroup",
        "detail": "Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same \"orientation\" under `barmode` \"stack\", \"relative\" and \"group\" are forced into the same bingroup, Using `bingroup`, traces under `barmode` \"overlay\" and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d\" trace can share the same `bingroup`\nDefault: \"\"\nType: string"
      },
      {
        "label": "xbins",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "ybins",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textangle",
        "detail": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With \"auto\" the texts may automatically be rotated to fit with the maximum size in bars.\nDefault: \"auto\"\nType: angle"
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_x",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_y",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "cliponaxis",
        "detail": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".\nDefault: true\nType: boolean"
      },
      {
        "label": "constraintext",
        "detail": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.\nDefault: \"both\"\nType: enumerated , one of ( \"inside\" | \"outside\" | \"both\" | \"none\" )"
      },
      {
        "label": "cumulative",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextanchor",
        "detail": "Determines if texts are kept at center or start/end points in `textposition` \"inside\" mode.\nDefault: \"end\"\nType: enumerated , one of ( \"end\" | \"middle\" | \"start\" )"
      },
      {
        "label": "insidetextfont",
        "detail": "Sets the font used for `text` lying inside the bar.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "outsidetextfont",
        "detail": "Sets the font used for `text` lying outside the bar.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "marker": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the bars.\nDefault: 1\nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "pattern",
          "detail": "Sets the pattern within the marker.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "pattern": {
        "items": [
          {
            "label": "bgcolor",
            "detail": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgcolor",
            "detail": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgopacity",
            "detail": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "fillmode",
            "detail": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.\nDefault: \"replace\"\nType: enumerated , one of ( \"replace\" | \"overlay\" )"
          },
          {
            "label": "shape",
            "detail": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.\nDefault: \"\"\nType: enumerated or array of enumerateds , one of ( \"\" | \"/\" | \"\\\" | \"x\" | \"-\" | \"|\" | \"+\" | \".\" )"
          },
          {
            "label": "size",
            "detail": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
          },
          {
            "label": "solidity",
            "detail": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.\nDefault: 0.3\nType: number or array of numbers between or equal to 0 and 1"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "parcoords": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"parcoords\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "dimensions",
        "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "labelangle",
        "detail": "Sets the angle of the labels with respect to the horizontal. For example, a `tickangle` of -90 draws the labels vertically. Tilted labels with \"labelangle\" may be positioned better inside margins when `labelposition` is set to \"bottom\".\nDefault: 0\nType: angle"
      },
      {
        "label": "labelfont",
        "detail": "Sets the font for the `dimension` labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "labelside",
        "detail": "Specifies the location of the `label`. \"top\" positions labels above, next to the title \"bottom\" positions labels below the graph Tilted labels with \"labelangle\" may be positioned better inside margins when `labelposition` is set to \"bottom\".\nDefault: \"top\"\nType: enumerated , one of ( \"top\" | \"bottom\" )"
      },
      {
        "label": "rangefont",
        "detail": "Sets the font for the `dimension` range values.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "tickfont",
        "detail": "Sets the font for the `dimension` tick values.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: \nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: [[0, #440154], [0.06274509803921569, #48186a], [0.12549019607843137, #472d7b], [0.18823529411764706, #424086], [0.25098039215686274, #3b528b], [0.3137254901960784, #33638d], [0.3764705882352941, #2c728e], [0.4392156862745098, #26828e], [0.5019607843137255, #21918c], [0.5647058823529412, #1fa088], [0.6274509803921569, #28ae80], [0.6901960784313725, #3fbc73], [0.7529411764705882, #5ec962], [0.8156862745098039, #84d44b], [0.8784313725490196, #addc30], [0.9411764705882353, #d8e219], [1, #fde725], ]\nType: colorscale"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.\nDefault: \nType: boolean"
        }
      ],
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "rangefont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "tickfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "labelfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "dimensions": {
      "items": [
        {
          "label": "constraintrange",
          "detail": "The domain range to which the filter on the dimension is constrained. Must be an array of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.\nDefault: \nType: Array"
        },
        {
          "label": "label",
          "detail": "The shown name of the dimension.\nDefault: \nType: string"
        },
        {
          "label": "multiselect",
          "detail": "Do we allow multiple selection ranges or just a single range?\nDefault: true\nType: boolean"
        },
        {
          "label": "name",
          "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
        },
        {
          "label": "range",
          "detail": "The domain range that represents the full, shown axis extent. Defaults to the `values` extent. Must be an array of `[fromValue, toValue]` with finite numbers as elements.\nDefault: \nType: Array"
        },
        {
          "label": "templateitemname",
          "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "values",
          "detail": "Dimension values. `values[n]` represents the value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated). Each value must be a finite number.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "visible",
          "detail": "Shows the dimension when set to `true` (the default). Hides the dimension for `false`.\nDefault: true\nType: boolean"
        }
      ]
    },
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this parcoords trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this parcoords trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this parcoords trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this parcoords trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the base color of unselected lines. in connection with `unselected.line.opacity`.\nDefault: \"#7f7f7f\"\nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the opacity of unselected lines. The default \"auto\" decreases the opacity smoothly as the number of lines increases. Use \"1\" to achieve exact `unselected.line.color`.\nDefault: \"auto\"\nType: number between or equal to 0 and 1"
          }
        ]
      }
    }
  },
  "scatter3d": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scatter3d\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the z coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "surfacecolor",
        "detail": "Sets the surface fill color.\nDefault: \nType: color"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"top center\"\nType: enumerated or array of enumerateds , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "scene",
        "detail": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.\nDefault: scene\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_x",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_y",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_z",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "projection",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "surfaceaxis",
        "detail": "If \"-1\", the scatter points are not fill with a surface If \"0\", \"1\", \"2\", the scatter points are filled with a Delaunay surface about the x, y, z respectively.\nDefault: \"-1\"\nType: enumerated , one of ( \"-1\" | \"0\" | \"1\" | \"2\" )"
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "zcalendar",
        "detail": "Sets the calendar system to use with `z` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of the lines.\nDefault: \"solid\"\nType: enumerated , one of ( \"dash\" | \"dashdot\" | \"dot\" | \"longdash\" | \"longdashdot\" | \"solid\" )"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ],
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "error_z": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "error_y": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "copy_zstyle",
          "detail": "\nDefault: \nType: boolean"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "error_x": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "copy_zstyle",
          "detail": "\nDefault: \nType: boolean"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "marker": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set \"marker.color\" to an rgba color and use its alpha channel.\nDefault: \nType: number between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"circle\" | \"circle-open\" | \"cross\" | \"diamond\" | \"diamond-open\" | \"square\" | \"square-open\" | \"x\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "projection": {
      "items": [
        {
          "label": "x",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "y",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "z",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "x": {
        "items": [
          {
            "label": "opacity",
            "detail": "Sets the projection color.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "scale",
            "detail": "Sets the scale factor determining the size of the projection marker points.\nDefault: 0.6666666666666666\nType: number between or equal to 0 and 10"
          },
          {
            "label": "show",
            "detail": "Sets whether or not projections are shown along the x axis.\nDefault: \nType: boolean"
          }
        ]
      },
      "z": {
        "items": [
          {
            "label": "opacity",
            "detail": "Sets the projection color.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "scale",
            "detail": "Sets the scale factor determining the size of the projection marker points.\nDefault: 0.6666666666666666\nType: number between or equal to 0 and 10"
          },
          {
            "label": "show",
            "detail": "Sets whether or not projections are shown along the z axis.\nDefault: \nType: boolean"
          }
        ]
      },
      "y": {
        "items": [
          {
            "label": "opacity",
            "detail": "Sets the projection color.\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "scale",
            "detail": "Sets the scale factor determining the size of the projection marker points.\nDefault: 0.6666666666666666\nType: number between or equal to 0 and 10"
          },
          {
            "label": "show",
            "detail": "Sets whether or not projections are shown along the y axis.\nDefault: \nType: boolean"
          }
        ]
      }
    }
  },
  "funnel": {
    "outsidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"funnel\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Sets the x coordinate step. See `x0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Sets the y coordinate step. See `y0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "width",
        "detail": "Sets the bar width (in position axis units).\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "offset",
        "detail": "Shifts the position where the bar is drawn (in position axis units). In \"group\" barmode, traces that set \"offset\" will be excluded and drawn in \"overlay\" mode instead.\nDefault: \nType: number"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Specifies the location of the `text`. \"inside\" positions `text` inside, next to the bar end (rotated and scaled if needed). \"outside\" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. \"auto\" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If \"none\", no text appears.\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"inside\" | \"outside\" | \"auto\" | \"none\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `percentInitial`, `percentPrevious`, `percentTotal`, `label` and `value`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"name\", \"x\", \"name+x\", \"name+x+y\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"name\", \"x\", \"y\", \"text\", \"percent initial\", \"percent previous\", \"percent total\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `percentInitial`, `percentPrevious` and `percentTotal`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "orientation",
        "detail": "Sets the orientation of the funnels. With \"v\" (\"h\"), the value of the each bar spans along the vertical (horizontal). By default funnels are tend to be oriented horizontally; unless only \"y\" array is presented or orientation is set to \"v\". Also regarding graphs including only 'horizontal' funnels, \"autorange\" on the \"y-axis\" are set to \"reversed\".\nDefault: \nType: enumerated , one of ( \"v\" | \"h\" )"
      },
      {
        "label": "alignmentgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\nDefault: \"\"\nType: string"
      },
      {
        "label": "offsetgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\nDefault: \"\"\nType: string"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "yperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the y axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "yperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "yperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textangle",
        "detail": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With \"auto\" the texts may automatically be rotated to fit with the maximum size in bars.\nDefault: 0\nType: angle"
      },
      {
        "label": "textfont",
        "detail": "Sets the font used for `text`.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+percent initial\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"percent initial\", \"percent previous\", \"percent total\", \"value\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "cliponaxis",
        "detail": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".\nDefault: true\nType: boolean"
      },
      {
        "label": "connector",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "constraintext",
        "detail": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.\nDefault: \"both\"\nType: enumerated , one of ( \"inside\" | \"outside\" | \"both\" | \"none\" )"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextanchor",
        "detail": "Determines if texts are kept at center or start/end points in `textposition` \"inside\" mode.\nDefault: \"middle\"\nType: enumerated , one of ( \"end\" | \"middle\" | \"start\" )"
      },
      {
        "label": "insidetextfont",
        "detail": "Sets the font used for `text` lying inside the bar.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "outsidetextfont",
        "detail": "Sets the font used for `text` lying outside the bar.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "marker": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the bars.\nDefault: 1\nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "insidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "connector": {
      "items": [
        {
          "label": "fillcolor",
          "detail": "Sets the fill color.\nDefault: \nType: color"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "visible",
          "detail": "Determines if connector regions and lines are drawn.\nDefault: true\nType: boolean"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "dash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "width",
            "detail": "Sets the line width (in px).\nDefault: 0\nType: number greater than or equal to 0"
          }
        ]
      }
    }
  },
  "barpolar": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"barpolar\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "base",
        "detail": "Sets where the bar base is drawn (in radial axis units). In \"stack\" barmode, traces that set \"base\" will be excluded and drawn in \"overlay\" mode instead.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "r",
        "detail": "Sets the radial coordinates\nDefault: \nType: data array, Vector"
      },
      {
        "label": "r0",
        "detail": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dr",
        "detail": "Sets the r coordinate step.\nDefault: 1\nType: number"
      },
      {
        "label": "theta",
        "detail": "Sets the angular coordinates\nDefault: \nType: data array, Vector"
      },
      {
        "label": "theta0",
        "detail": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dtheta",
        "detail": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.\nDefault: \nType: number"
      },
      {
        "label": "thetaunit",
        "detail": "Sets the unit of input \"theta\" values. Has an effect only when on \"linear\" angular axes.\nDefault: \"degrees\"\nType: enumerated , one of ( \"radians\" | \"degrees\" | \"gradians\" )"
      },
      {
        "label": "width",
        "detail": "Sets the bar angular width (in \"thetaunit\" units).\nDefault: \nType: number or array of numbers greater than or equal to 0"
      },
      {
        "label": "offset",
        "detail": "Shifts the angular position where the bar is drawn (in \"thetatunit\" units).\nDefault: \nType: number or array of numbers"
      },
      {
        "label": "text",
        "detail": "Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"r\", \"theta\", \"r+theta\", \"r+theta+text\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"r\", \"theta\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "subplot",
        "detail": "Sets a reference between this trace's data coordinates and a polar subplot. If \"polar\" (the default value), the data refer to `layout.polar`. If \"polar2\", the data refer to `layout.polar2`, and so on.\nDefault: polar\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the bars.\nDefault: 1\nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "pattern",
          "detail": "Sets the pattern within the marker.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "pattern": {
        "items": [
          {
            "label": "bgcolor",
            "detail": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgcolor",
            "detail": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgopacity",
            "detail": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "fillmode",
            "detail": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.\nDefault: \"replace\"\nType: enumerated , one of ( \"replace\" | \"overlay\" )"
          },
          {
            "label": "shape",
            "detail": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.\nDefault: \"\"\nType: enumerated or array of enumerateds , one of ( \"\" | \"/\" | \"\\\" | \"x\" | \"-\" | \"|\" | \"+\" | \".\" )"
          },
          {
            "label": "size",
            "detail": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
          },
          {
            "label": "solidity",
            "detail": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.\nDefault: 0.3\nType: number or array of numbers between or equal to 0 and 1"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    }
  },
  "waterfall": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"waterfall\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Sets the x coordinate step. See `x0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Sets the y coordinate step. See `y0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "base",
        "detail": "Sets where the bar base is drawn (in position axis units).\nDefault: \nType: number"
      },
      {
        "label": "width",
        "detail": "Sets the bar width (in position axis units).\nDefault: \nType: number or array of numbers greater than or equal to 0"
      },
      {
        "label": "measure",
        "detail": "An array containing types of values. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.\nDefault: Default:\nType: data array, Vector"
      },
      {
        "label": "offset",
        "detail": "Shifts the position where the bar is drawn (in position axis units). In \"group\" barmode, traces that set \"offset\" will be excluded and drawn in \"overlay\" mode instead.\nDefault: \nType: number or array of numbers"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Specifies the location of the `text`. \"inside\" positions `text` inside, next to the bar end (rotated and scaled if needed). \"outside\" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. \"auto\" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If \"none\", no text appears.\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"inside\" | \"outside\" | \"auto\" | \"none\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `initial`, `delta`, `final` and `label`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"name\", \"x\", \"name+x\", \"name+x+y\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"name\", \"x\", \"y\", \"text\", \"initial\", \"delta\", \"final\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `initial`, `delta` and `final`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "orientation",
        "detail": "Sets the orientation of the bars. With \"v\" (\"h\"), the value of the each bar spans along the vertical (horizontal).\nDefault: \nType: enumerated , one of ( \"v\" | \"h\" )"
      },
      {
        "label": "alignmentgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\nDefault: \"\"\nType: string"
      },
      {
        "label": "offsetgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\nDefault: \"\"\nType: string"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "yperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the y axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "yperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "yperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "textangle",
        "detail": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With \"auto\" the texts may automatically be rotated to fit with the maximum size in bars.\nDefault: \"auto\"\nType: angle"
      },
      {
        "label": "textfont",
        "detail": "Sets the font used for `text`.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+initial\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"initial\", \"delta\", \"final\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "cliponaxis",
        "detail": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".\nDefault: true\nType: boolean"
      },
      {
        "label": "connector",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "constraintext",
        "detail": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.\nDefault: \"both\"\nType: enumerated , one of ( \"inside\" | \"outside\" | \"both\" | \"none\" )"
      },
      {
        "label": "increasing",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "decreasing",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextanchor",
        "detail": "Determines if texts are kept at center or start/end points in `textposition` \"inside\" mode.\nDefault: \"end\"\nType: enumerated , one of ( \"end\" | \"middle\" | \"start\" )"
      },
      {
        "label": "insidetextfont",
        "detail": "Sets the font used for `text` lying inside the bar.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "outsidetextfont",
        "detail": "Sets the font used for `text` lying outside the bar.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "totals",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "decreasing": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of all decreasing values.\nDefault: \nType: color"
          },
          {
            "label": "line",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          }
        ],
        "line": {
          "items": [
            {
              "label": "color",
              "detail": "Sets the line color of all decreasing values.\nDefault: \nType: color"
            },
            {
              "label": "width",
              "detail": "Sets the line width of all decreasing values.\nDefault: 0\nType: number greater than or equal to 0"
            }
          ]
        }
      }
    },
    "outsidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "totals": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "line": {
          "items": [
            {
              "label": "color",
              "detail": "Sets the line color of all intermediate sums and total values.\nDefault: \nType: color"
            },
            {
              "label": "width",
              "detail": "Sets the line width of all intermediate sums and total values.\nDefault: 0\nType: number greater than or equal to 0"
            }
          ]
        },
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of all intermediate sums and total values.\nDefault: \nType: color"
          },
          {
            "label": "line",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          }
        ]
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "increasing": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of all increasing values.\nDefault: \nType: color"
          },
          {
            "label": "line",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          }
        ],
        "line": {
          "items": [
            {
              "label": "color",
              "detail": "Sets the line color of all increasing values.\nDefault: \nType: color"
            },
            {
              "label": "width",
              "detail": "Sets the line width of all increasing values.\nDefault: 0\nType: number greater than or equal to 0"
            }
          ]
        }
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "insidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "connector": {
      "items": [
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "mode",
          "detail": "Sets the shape of connector lines.\nDefault: \"between\"\nType: enumerated , one of ( \"spanning\" | \"between\" )"
        },
        {
          "label": "visible",
          "detail": "Determines if connector lines are drawn.\nDefault: true\nType: boolean"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "dash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "width",
            "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
          }
        ]
      }
    }
  },
  "ohlc": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"ohlc\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates. If absent, linear coordinate will be generated.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "close",
        "detail": "Sets the close values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "open",
        "detail": "Sets the open values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "high",
        "detail": "Sets the high values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "low",
        "detail": "Sets the low values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "increasing",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "decreasing",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "tickwidth",
        "detail": "Sets the width of the open/close tick marks relative to the \"x\" minimal interval.\nDefault: 0.3\nType: number between or equal to 0 and 0.5"
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\"). Note that this style setting can also be set per direction via `increasing.line.dash` and `decreasing.line.dash`.\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "width",
          "detail": "[object Object] Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "decreasing": {
      "items": [
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the line color.\nDefault: \"#FF4136\"\nType: color"
          },
          {
            "label": "dash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "width",
            "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "increasing": {
      "items": [
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the line color.\nDefault: \"#3D9970\"\nType: color"
          },
          {
            "label": "dash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "width",
            "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        },
        {
          "label": "split",
          "detail": "Show hover information (open, close, high, low) in separate labels.\nDefault: \nType: boolean"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "pie": {
    "outsidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"pie\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "title",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "values",
        "detail": "Sets the values of the sectors. If omitted, we count occurrences of each label.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "labels",
        "detail": "Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "dlabel",
        "detail": "Sets the label step. See `label0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "label0",
        "detail": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.\nDefault: 0\nType: number"
      },
      {
        "label": "pull",
        "detail": "Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.\nDefault: 0\nType: number or array of numbers between or equal to 0 and 1"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "textposition",
        "detail": "Specifies the location of the `textinfo`.\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"inside\" | \"outside\" | \"auto\" | \"none\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"percent\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "automargin",
        "detail": "Determines whether outside text labels can push the margins.\nDefault: \nType: boolean"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the font used for `textinfo`.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"percent\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "direction",
        "detail": "Specifies the direction at which succeeding sectors follow one another.\nDefault: \"counterclockwise\"\nType: enumerated , one of ( \"clockwise\" | \"counterclockwise\" )"
      },
      {
        "label": "hole",
        "detail": "Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.\nDefault: 0\nType: number between or equal to 0 and 1"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextfont",
        "detail": "Sets the font used for `textinfo` lying inside the sector.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextorientation",
        "detail": "Controls the orientation of the text inside chart sectors. When set to \"auto\", text may be oriented in any direction in order to be as big as possible in the middle of a sector. The \"horizontal\" option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The \"radial\" option orients text along the radius of the sector. The \"tangential\" option orients text perpendicular to the radius of the sector.\nDefault: \"auto\"\nType: enumerated , one of ( \"horizontal\" | \"radial\" | \"tangential\" | \"auto\" )"
      },
      {
        "label": "outsidetextfont",
        "detail": "Sets the font used for `textinfo` lying outside the sector.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "rotation",
        "detail": "Instead of the first slice starting at 12 o'clock, rotate to some other angle.\nDefault: 0\nType: angle"
      },
      {
        "label": "scalegroup",
        "detail": "If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.\nDefault: \"\"\nType: string"
      },
      {
        "label": "sort",
        "detail": "Determines whether or not the sectors are reordered from largest to smallest.\nDefault: true\nType: boolean"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this pie trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this pie trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this pie trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this pie trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "marker": {
      "items": [
        {
          "label": "colors",
          "detail": "Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "pattern",
          "detail": "Sets the pattern within the marker.\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the line enclosing each sector.\nDefault: \"#444\"\nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the line enclosing each sector.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "pattern": {
        "items": [
          {
            "label": "bgcolor",
            "detail": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgcolor",
            "detail": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgopacity",
            "detail": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "fillmode",
            "detail": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.\nDefault: \"replace\"\nType: enumerated , one of ( \"replace\" | \"overlay\" )"
          },
          {
            "label": "shape",
            "detail": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.\nDefault: \"\"\nType: enumerated or array of enumerateds , one of ( \"\" | \"/\" | \"\\\" | \"x\" | \"-\" | \"|\" | \"+\" | \".\" )"
          },
          {
            "label": "size",
            "detail": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
          },
          {
            "label": "solidity",
            "detail": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.\nDefault: 0.3\nType: number or array of numbers between or equal to 0 and 1"
          }
        ]
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "title": {
      "items": [
        {
          "label": "font",
          "detail": "Sets the font used for `title`. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "position",
          "detail": "Specifies the location of the `title`. Note that the title's position used to be set by the now deprecated `titleposition` attribute.\nDefault: \nType: enumerated , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle center\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
        },
        {
          "label": "text",
          "detail": "Sets the title of the chart. If it is empty, no title is displayed. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "insidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    }
  },
  "heatmap": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"heatmap\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Sets the x coordinate step. See `x0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "xtype",
        "detail": "If \"array\", the heatmap's x coordinates are given by \"x\" (the default behavior when `x` is provided). If \"scaled\", the heatmap's x coordinates are given by \"x0\" and \"dx\" (the default behavior when `x` is not provided).\nDefault: \nType: enumerated , one of ( \"array\" | \"scaled\" )"
      },
      {
        "label": "xgap",
        "detail": "Sets the horizontal gap (in pixels) between bricks.\nDefault: 0\nType: number greater than or equal to 0"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Sets the y coordinate step. See `y0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "ytype",
        "detail": "If \"array\", the heatmap's y coordinates are given by \"y\" (the default behavior when `y` is provided) If \"scaled\", the heatmap's y coordinates are given by \"y0\" and \"dy\" (the default behavior when `y` is not provided)\nDefault: \nType: enumerated , one of ( \"array\" | \"scaled\" )"
      },
      {
        "label": "ygap",
        "detail": "Sets the vertical gap (in pixels) between bricks.\nDefault: 0\nType: number greater than or equal to 0"
      },
      {
        "label": "z",
        "detail": "Sets the z data.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each z value.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "yperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the y axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "yperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "yperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: \nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "zmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zmid",
        "detail": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "zmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zsmooth",
        "detail": "Picks a smoothing algorithm use to smooth `z` data.\nDefault: \nType: enumerated , one of ( \"fast\" | \"best\" | false )"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array and `zsmooth` is not false; otherwise it is defaulted to false.\nDefault: \nType: boolean"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverongaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.\nDefault: true\nType: boolean"
      },
      {
        "label": "transpose",
        "detail": "Transposes the z data.\nDefault: \nType: boolean"
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \"auto\"\nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \"auto\"\nType: number greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "table": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"table\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "columnorder",
        "detail": "Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "columnwidth",
        "detail": "The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.\nDefault: \nType: number or array of numbers"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "cells",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "header",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "cells": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.\nDefault: \"center\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "fill",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "font",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "format",
          "detail": "Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.\nDefault: Default:\nType: data array, Vector"
        },
        {
          "label": "height",
          "detail": "The height of cells.\nDefault: 20\nType: number"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "prefix",
          "detail": "Prefix for cell values.\nDefault: \nType: string or array of strings"
        },
        {
          "label": "suffix",
          "detail": "Suffix for cell values.\nDefault: \nType: string or array of strings"
        },
        {
          "label": "values",
          "detail": "Cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.\nDefault: Default:\nType: data array, Vector"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \"grey\"\nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "\nDefault: 1\nType: number or array of numbers"
          }
        ]
      },
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      },
      "fill": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.\nDefault: \"white\"\nType: color or array of colors"
          }
        ]
      }
    },
    "header": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.\nDefault: \"center\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "fill",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "font",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "format",
          "detail": "Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.\nDefault: Default:\nType: data array, Vector"
        },
        {
          "label": "height",
          "detail": "The height of cells.\nDefault: 28\nType: number"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "prefix",
          "detail": "Prefix for cell values.\nDefault: \nType: string or array of strings"
        },
        {
          "label": "suffix",
          "detail": "Suffix for cell values.\nDefault: \nType: string or array of strings"
        },
        {
          "label": "values",
          "detail": "Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.\nDefault: Default:\nType: data array, Vector"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \"grey\"\nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "\nDefault: 1\nType: number or array of numbers"
          }
        ]
      },
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      },
      "fill": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.\nDefault: \"white\"\nType: color or array of colors"
          }
        ]
      }
    },
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this table trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this table trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this table trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this table trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "candlestick": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"candlestick\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates. If absent, linear coordinate will be generated.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "close",
        "detail": "Sets the close values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "open",
        "detail": "Sets the open values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "high",
        "detail": "Sets the high values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "low",
        "detail": "Sets the low values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "whiskerwidth",
        "detail": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).\nDefault: 0\nType: number between or equal to 0 and 1"
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "increasing",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "decreasing",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "width",
          "detail": "Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "decreasing": {
      "items": [
        {
          "label": "fillcolor",
          "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of line bounding the box(es).\nDefault: \"#FF4136\"\nType: color"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of line bounding the box(es).\nDefault: 2\nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "increasing": {
      "items": [
        {
          "label": "fillcolor",
          "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of line bounding the box(es).\nDefault: \"#3D9970\"\nType: color"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of line bounding the box(es).\nDefault: 2\nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        },
        {
          "label": "split",
          "detail": "Show hover information (open, close, high, low) in separate labels.\nDefault: \nType: boolean"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "sankey": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"sankey\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"\", \"\", \"+\", \"all\"\nDefault: \nType: flaglist string. Any combination of joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "orientation",
        "detail": "Sets the orientation of the Sankey diagram.\nDefault: \"h\"\nType: enumerated , one of ( \"v\" | \"h\" )"
      },
      {
        "label": "node",
        "detail": "The nodes of the Sankey plot.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "link",
        "detail": "The links of the Sankey plot.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the font for node labels\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "arrangement",
        "detail": "If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.\nDefault: \"snap\"\nType: enumerated , one of ( \"snap\" | \"perpendicular\" | \"freeform\" | \"fixed\" )"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "valueformat",
        "detail": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.\nDefault: \".3s\"\nType: string"
      },
      {
        "label": "valuesuffix",
        "detail": "Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.\nDefault: \"\"\nType: string"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this sankey trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this sankey trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this sankey trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this sankey trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "node": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the `node` color. It can be a single value, or an array for specifying color for each `node`. If `node.color` is omitted, then the default `Plotly` color palette will be cycled through to have a variety of colors. These defaults are not fully opaque, to allow some visibility of what is beneath the node.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "customdata",
          "detail": "Assigns extra data to each node.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "groups",
          "detail": "Groups of nodes. Each group is defined by an array with the indices of the nodes it contains. Multiple groups can be specified.\nDefault: []\nType: Array"
        },
        {
          "label": "hoverinfo",
          "detail": "Determines which trace information appear when hovering nodes. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"none\" | \"skip\" )"
        },
        {
          "label": "hoverlabel",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "hovertemplate",
          "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Variables `sourceLinks` and `targetLinks` are arrays of link objects.Finally, the template string has access to variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
        },
        {
          "label": "label",
          "detail": "The shown name of the node.\nDefault: Default:\nType: data array, Vector"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "pad",
          "detail": "Sets the padding (in px) between the `nodes`.\nDefault: 20\nType: number greater than or equal to 0"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the `nodes`.\nDefault: 20\nType: number greater than or equal to 1"
        },
        {
          "label": "x",
          "detail": "The normalized horizontal position of the node.\nDefault: Default:\nType: data array, Vector"
        },
        {
          "label": "y",
          "detail": "The normalized vertical position of the node.\nDefault: Default:\nType: data array, Vector"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the `line` around each `node`.\nDefault: \"#444\"\nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the `line` around each `node`.\nDefault: 0.5\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "hoverlabel": {
        "items": [
          {
            "label": "align",
            "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
          },
          {
            "label": "bgcolor",
            "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "font",
            "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "namelength",
            "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color or array of colors"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
            }
          ]
        }
      }
    },
    "link": {
      "items": [
        {
          "label": "arrowlen",
          "detail": "Sets the length (in px) of the links arrow, if 0 no arrow will be drawn.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "color",
          "detail": "Sets the `link` color. It can be a single value, or an array for specifying color for each `link`. If `link.color` is omitted, then by default, a translucent grey link will be used.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "colorscales",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "customdata",
          "detail": "Assigns extra data to each link.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "hoverinfo",
          "detail": "Determines which trace information appear when hovering links. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"none\" | \"skip\" )"
        },
        {
          "label": "hoverlabel",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "hovertemplate",
          "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Variables `source` and `target` are node objects.Finally, the template string has access to variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
        },
        {
          "label": "label",
          "detail": "The shown name of the link.\nDefault: Default:\nType: data array, Vector"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "source",
          "detail": "An integer number `[0..nodes.length - 1]` that represents the source node.\nDefault: Default:\nType: data array, Vector"
        },
        {
          "label": "target",
          "detail": "An integer number `[0..nodes.length - 1]` that represents the target node.\nDefault: Default:\nType: data array, Vector"
        },
        {
          "label": "value",
          "detail": "A numeric value representing the flow volume value.\nDefault: Default:\nType: data array, Vector"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the `line` around each `link`.\nDefault: \"#444\"\nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the `line` around each `link`.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorscales": {
        "items": [
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain.\nDefault: 1\nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain.\nDefault: 0\nType: number"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: [[0, white], [1, black], ]\nType: colorscale"
          },
          {
            "label": "label",
            "detail": "The label of the links to color based on their concentration within a flow.\nDefault: \"\"\nType: string"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          }
        ]
      },
      "hoverlabel": {
        "items": [
          {
            "label": "align",
            "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
          },
          {
            "label": "bgcolor",
            "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "font",
            "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "namelength",
            "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color or array of colors"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
            }
          ]
        }
      }
    }
  },
  "scattersmith": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scattersmith\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "imag",
        "detail": "Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "real",
        "detail": "Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated or array of enumerateds , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `real`, `imag` and `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"real\", \"imag\", \"real+imag\", \"real+imag+text\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"real\", \"imag\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "subplot",
        "detail": "Sets a reference between this trace's data coordinates and a smith subplot. If \"smith\" (the default value), the data refer to `layout.smith`. If \"smith2\", the data refer to `layout.smith2`, and so on.\nDefault: smith\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "cliponaxis",
        "detail": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".\nDefault: \nType: boolean"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "fill",
        "detail": "Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". scattersmith has a subset of the options available to scatter. \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other.\nDefault: \"none\"\nType: enumerated , one of ( \"none\" | \"toself\" | \"tonext\" )"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoveron",
        "detail": "Examples: \"points\", \"fills\", \"points+fills\"\nDefault: \nType: flaglist string. Any combination of \"points\", \"fills\" joined with a \"+\""
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "backoff",
          "detail": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".\nDefault: \"auto\"\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "color",
          "detail": "Sets the line color.\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "shape",
          "detail": "Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"spline\" )"
        },
        {
          "label": "smoothing",
          "detail": "Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "angleref",
          "detail": "Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.\nDefault: \"up\"\nType: enumerated , one of ( \"previous\" | \"up\" )"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "gradient",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "maxdisplayed",
          "detail": "Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "standoff",
          "detail": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "gradient": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "type",
            "detail": "Sets the type of gradient used to fill the markers\nDefault: \"none\"\nType: enumerated or array of enumerateds , one of ( \"radial\" | \"horizontal\" | \"vertical\" | \"none\" )"
          }
        ]
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    }
  },
  "treemap": {
    "root": {
      "items": [
        {
          "label": "color",
          "detail": "sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        }
      ]
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "pathbar": {
      "items": [
        {
          "label": "edgeshape",
          "detail": "Determines which shape is used for edges between `barpath` labels.\nDefault: \">\"\nType: enumerated , one of ( \">\" | \"<\" | \"|\" | \"/\" | \"\\\" )"
        },
        {
          "label": "side",
          "detail": "Determines on which side of the the treemap the `pathbar` should be presented.\nDefault: \"top\"\nType: enumerated , one of ( \"top\" | \"bottom\" )"
        },
        {
          "label": "textfont",
          "detail": "Sets the font used inside `pathbar`.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.\nDefault: \nType: number greater than or equal to 12"
        },
        {
          "label": "visible",
          "detail": "Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.\nDefault: true\nType: boolean"
        }
      ],
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "tiling": {
      "items": [
        {
          "label": "flip",
          "detail": "Examples: \"x\", \"y\", \"x+y\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\" joined with a \"+\""
        },
        {
          "label": "packing",
          "detail": "Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling\nDefault: \"squarify\"\nType: enumerated , one of ( \"squarify\" | \"binary\" | \"dice\" | \"slice\" | \"slice-dice\" | \"dice-slice\" )"
        },
        {
          "label": "pad",
          "detail": "Sets the inner padding (in px).\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "squarifyratio",
          "detail": "When using \"squarify\" `packing` algorithm, according to https://github.com/d3/d3-hierarchy/blob/v3.1.1/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using \"squarify\", unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.\nDefault: 1\nType: number greater than or equal to 1"
        }
      ]
    },
    "insidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"treemap\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "parents",
        "detail": "Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "values",
        "detail": "Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "labels",
        "detail": "Sets the labels of each of the sectors.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements.\nDefault: \"top left\"\nType: enumerated , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"name\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the font used for `textinfo`.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "branchvalues",
        "detail": "Determines how the items in `values` are summed. When set to \"total\", items in `values` are taken to be value of all its descendants. When set to \"remainder\", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.\nDefault: \"remainder\"\nType: enumerated , one of ( \"remainder\" | \"total\" )"
      },
      {
        "label": "count",
        "detail": "Examples: \"branches\", \"leaves\", \"branches+leaves\"\nDefault: \nType: flaglist string. Any combination of \"branches\", \"leaves\" joined with a \"+\""
      },
      {
        "label": "tiling",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "pathbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextfont",
        "detail": "Sets the font used for `textinfo` lying inside the sector.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "outsidetextfont",
        "detail": "Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented on top left corner of a treemap graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "root",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "level",
        "detail": "Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "maxdepth",
        "detail": "Sets the number of rendered sectors from any given `level`. Set `maxdepth` to \"-1\" to render all the levels in the hierarchy.\nDefault: -1\nType: integer"
      },
      {
        "label": "sort",
        "detail": "Determines whether or not the sectors are reordered from largest to smallest.\nDefault: true\nType: boolean"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "outsidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this treemap trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this treemap trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this treemap trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this treemap trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "marker": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colors",
          "detail": "Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "cornerradius",
          "detail": "Sets the maximum rounding of corners (in px).\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "depthfade",
          "detail": "Determines if the sector colors are faded towards the background from the leaves up to the headers. This option is unavailable when a `colorscale` is present, defaults to false when `marker.colors` is set, but otherwise defaults to true. When set to \"reversed\", the fading direction is inverted, that is the top elements within hierarchy are drawn with fully saturated colors while the leaves are faded towards the background color.\nDefault: \nType: enumerated , one of ( true | false | \"reversed\" )"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "pad",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "pattern",
          "detail": "Sets the pattern within the marker.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.\nDefault: \nType: boolean"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the line enclosing each sector.\nDefault: 1\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "pad": {
        "items": [
          {
            "label": "b",
            "detail": "Sets the padding form the bottom (in px).\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "l",
            "detail": "Sets the padding form the left (in px).\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "r",
            "detail": "Sets the padding form the right (in px).\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "t",
            "detail": "Sets the padding form the top (in px).\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "pattern": {
        "items": [
          {
            "label": "bgcolor",
            "detail": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgcolor",
            "detail": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgopacity",
            "detail": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "fillmode",
            "detail": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.\nDefault: \"replace\"\nType: enumerated , one of ( \"replace\" | \"overlay\" )"
          },
          {
            "label": "shape",
            "detail": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.\nDefault: \"\"\nType: enumerated or array of enumerateds , one of ( \"\" | \"/\" | \"\\\" | \"x\" | \"-\" | \"|\" | \"+\" | \".\" )"
          },
          {
            "label": "size",
            "detail": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
          },
          {
            "label": "solidity",
            "detail": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.\nDefault: 0.3\nType: number or array of numbers between or equal to 0 and 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "streamtube": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"streamtube\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates of the vector field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates of the vector field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the z coordinates of the vector field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "u",
        "detail": "Sets the x components of the vector field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "v",
        "detail": "Sets the y components of the vector field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "w",
        "detail": "Sets the z components of the vector field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets a text element associated with this trace. If trace `hoverinfo` contains a \"text\" flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.\nDefault: \"\"\nType: string"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"u\", \"v\", \"w\", \"norm\", \"divergence\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `tubex`, `tubey`, `tubez`, `tubeu`, `tubev`, `tubew`, `norm` and `divergence`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "uhoverformat",
        "detail": "Sets the hover text formatting rulefor `u` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "vhoverformat",
        "detail": "Sets the hover text formatting rulefor `v` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "whoverformat",
        "detail": "Sets the hover text formatting rulefor `w` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "scene",
        "detail": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.\nDefault: scene\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zhoverformat",
        "detail": "Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "cauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "cmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "cmid",
        "detail": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "cmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lighting",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "lightposition",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "maxdisplayed",
        "detail": "The maximum number of displayed segments in a streamtube.\nDefault: 1000\nType: integer greater than or equal to 0"
      },
      {
        "label": "sizeref",
        "detail": "The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.\nDefault: 1\nType: number greater than or equal to 0"
      },
      {
        "label": "starts",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "lightposition": {
      "items": [
        {
          "label": "x",
          "detail": "Numeric vector, representing the X coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "y",
          "detail": "Numeric vector, representing the Y coordinate for each vertex.\nDefault: 100000\nType: number between or equal to -100000 and 100000"
        },
        {
          "label": "z",
          "detail": "Numeric vector, representing the Z coordinate for each vertex.\nDefault: 0\nType: number between or equal to -100000 and 100000"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "starts": {
      "items": [
        {
          "label": "x",
          "detail": "Sets the x components of the starting position of the streamtubes\nDefault: \nType: data array, Vector"
        },
        {
          "label": "y",
          "detail": "Sets the y components of the starting position of the streamtubes\nDefault: \nType: data array, Vector"
        },
        {
          "label": "z",
          "detail": "Sets the z components of the starting position of the streamtubes\nDefault: \nType: data array, Vector"
        }
      ]
    },
    "lighting": {
      "items": [
        {
          "label": "ambient",
          "detail": "Ambient light increases overall color visibility but can wash out the image.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "diffuse",
          "detail": "Represents the extent that incident rays are reflected in a range of angles.\nDefault: 0.8\nType: number between or equal to 0 and 1"
        },
        {
          "label": "facenormalsepsilon",
          "detail": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.\nDefault: 1e-06\nType: number between or equal to 0 and 1"
        },
        {
          "label": "fresnel",
          "detail": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.\nDefault: 0.2\nType: number between or equal to 0 and 5"
        },
        {
          "label": "roughness",
          "detail": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.\nDefault: 0.5\nType: number between or equal to 0 and 1"
        },
        {
          "label": "specular",
          "detail": "Represents the level that incident rays are reflected in a single direction, causing shine.\nDefault: 0.05\nType: number between or equal to 0 and 2"
        },
        {
          "label": "vertexnormalsepsilon",
          "detail": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.\nDefault: 1e-12\nType: number between or equal to 0 and 1"
        }
      ]
    }
  },
  "choroplethmapbox": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"choroplethmapbox\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the color values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "geojson",
        "detail": "Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \"FeatureCollection\" or \"Feature\" with geometries of type \"Polygon\" or \"MultiPolygon\".\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "featureidkey",
        "detail": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example \"properties.name\".\nDefault: \"id\"\nType: string"
      },
      {
        "label": "locations",
        "detail": "Sets which features found in \"geojson\" to plot using their feature `id` field.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each location.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"location\", \"z\", \"location+z\", \"location+z+text\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"location\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `properties` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "subplot",
        "detail": "Sets a reference between this trace's data coordinates and a mapbox subplot. If \"mapbox\" (the default value), the data refer to `layout.mapbox`. If \"mapbox2\", the data refer to `layout.mapbox2`, and so on.\nDefault: mapbox\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "zmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zmid",
        "detail": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "zmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "below",
        "detail": "Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmapbox traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.\nDefault: \nType: string"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      }
    },
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "marker": {
      "items": [
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the locations.\nDefault: 1\nType: number or array of numbers between or equal to 0 and 1"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \"#444\"\nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: 1\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      }
    }
  },
  "scatterpolar": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scatterpolar\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "r",
        "detail": "Sets the radial coordinates\nDefault: \nType: data array, Vector"
      },
      {
        "label": "r0",
        "detail": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dr",
        "detail": "Sets the r coordinate step.\nDefault: 1\nType: number"
      },
      {
        "label": "theta",
        "detail": "Sets the angular coordinates\nDefault: \nType: data array, Vector"
      },
      {
        "label": "theta0",
        "detail": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dtheta",
        "detail": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.\nDefault: \nType: number"
      },
      {
        "label": "thetaunit",
        "detail": "Sets the unit of input \"theta\" values. Has an effect only when on \"linear\" angular axes.\nDefault: \"degrees\"\nType: enumerated , one of ( \"radians\" | \"degrees\" | \"gradians\" )"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated or array of enumerateds , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `r`, `theta` and `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"r\", \"theta\", \"r+theta\", \"r+theta+text\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"r\", \"theta\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "subplot",
        "detail": "Sets a reference between this trace's data coordinates and a polar subplot. If \"polar\" (the default value), the data refer to `layout.polar`. If \"polar2\", the data refer to `layout.polar2`, and so on.\nDefault: polar\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "cliponaxis",
        "detail": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".\nDefault: \nType: boolean"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "fill",
        "detail": "Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". scatterpolar has a subset of the options available to scatter. \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other.\nDefault: \"none\"\nType: enumerated , one of ( \"none\" | \"toself\" | \"tonext\" )"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoveron",
        "detail": "Examples: \"points\", \"fills\", \"points+fills\"\nDefault: \nType: flaglist string. Any combination of \"points\", \"fills\" joined with a \"+\""
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "backoff",
          "detail": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".\nDefault: \"auto\"\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "color",
          "detail": "Sets the line color.\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "shape",
          "detail": "Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"spline\" )"
        },
        {
          "label": "smoothing",
          "detail": "Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "angleref",
          "detail": "Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.\nDefault: \"up\"\nType: enumerated , one of ( \"previous\" | \"up\" )"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "gradient",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "maxdisplayed",
          "detail": "Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "standoff",
          "detail": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "gradient": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "type",
            "detail": "Sets the type of gradient used to fill the markers\nDefault: \"none\"\nType: enumerated or array of enumerateds , one of ( \"radial\" | \"horizontal\" | \"vertical\" | \"none\" )"
          }
        ]
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    }
  },
  "scattercarpet": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scattercarpet\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "a",
        "detail": "Sets the a-axis coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "b",
        "detail": "Sets the b-axis coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated or array of enumerateds , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `a`, `b` and `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"a\", \"b\", \"a+b\", \"a+b+text\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"a\", \"b\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "carpet",
        "detail": "An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie\nDefault: \nType: string"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "fill",
        "detail": "Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". scatterternary has a subset of the options available to scatter. \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other.\nDefault: \"none\"\nType: enumerated , one of ( \"none\" | \"toself\" | \"tonext\" )"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoveron",
        "detail": "Examples: \"points\", \"fills\", \"points+fills\"\nDefault: \nType: flaglist string. Any combination of \"points\", \"fills\" joined with a \"+\""
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "backoff",
          "detail": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".\nDefault: \"auto\"\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "color",
          "detail": "Sets the line color.\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "shape",
          "detail": "Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"spline\" )"
        },
        {
          "label": "smoothing",
          "detail": "Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "angleref",
          "detail": "Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.\nDefault: \"up\"\nType: enumerated , one of ( \"previous\" | \"up\" )"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "gradient",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "maxdisplayed",
          "detail": "Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "standoff",
          "detail": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "gradient": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "type",
            "detail": "Sets the type of gradient used to fill the markers\nDefault: \"none\"\nType: enumerated or array of enumerateds , one of ( \"radial\" | \"horizontal\" | \"vertical\" | \"none\" )"
          }
        ]
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    }
  },
  "scatterternary": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scatterternary\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "a",
        "detail": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "b",
        "detail": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "c",
        "detail": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated or array of enumerateds , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `a`, `b`, `c` and `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"a\", \"b\", \"a+b\", \"a+b+c\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"a\", \"b\", \"c\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "subplot",
        "detail": "Sets a reference between this trace's data coordinates and a ternary subplot. If \"ternary\" (the default value), the data refer to `layout.ternary`. If \"ternary2\", the data refer to `layout.ternary2`, and so on.\nDefault: ternary\nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "cliponaxis",
        "detail": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".\nDefault: true\nType: boolean"
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "fill",
        "detail": "Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". scatterternary has a subset of the options available to scatter. \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other.\nDefault: \"none\"\nType: enumerated , one of ( \"none\" | \"toself\" | \"tonext\" )"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoveron",
        "detail": "Examples: \"points\", \"fills\", \"points+fills\"\nDefault: \nType: flaglist string. Any combination of \"points\", \"fills\" joined with a \"+\""
      },
      {
        "label": "sum",
        "detail": "The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum\nDefault: 0\nType: number greater than or equal to 0"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "backoff",
          "detail": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".\nDefault: \"auto\"\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "color",
          "detail": "Sets the line color.\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "shape",
          "detail": "Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"spline\" )"
        },
        {
          "label": "smoothing",
          "detail": "Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "angleref",
          "detail": "Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.\nDefault: \"up\"\nType: enumerated , one of ( \"previous\" | \"up\" )"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "gradient",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "maxdisplayed",
          "detail": "Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "standoff",
          "detail": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.\nDefault: 0\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "gradient": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "type",
            "detail": "Sets the type of gradient used to fill the markers\nDefault: \"none\"\nType: enumerated or array of enumerateds , one of ( \"radial\" | \"horizontal\" | \"vertical\" | \"none\" )"
          }
        ]
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    }
  },
  "sunburst": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"sunburst\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "parents",
        "detail": "Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "values",
        "detail": "Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "labels",
        "detail": "Sets the labels of each of the sectors.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"name\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the font used for `textinfo`.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textinfo",
        "detail": "Examples: \"label\", \"text\", \"label+text\", \"label+text+value\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"label\", \"text\", \"value\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "branchvalues",
        "detail": "Determines how the items in `values` are summed. When set to \"total\", items in `values` are taken to be value of all its descendants. When set to \"remainder\", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.\nDefault: \"remainder\"\nType: enumerated , one of ( \"remainder\" | \"total\" )"
      },
      {
        "label": "count",
        "detail": "Examples: \"branches\", \"leaves\", \"branches+leaves\"\nDefault: \nType: flaglist string. Any combination of \"branches\", \"leaves\" joined with a \"+\""
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextfont",
        "detail": "Sets the font used for `textinfo` lying inside the sector.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "insidetextorientation",
        "detail": "Controls the orientation of the text inside chart sectors. When set to \"auto\", text may be oriented in any direction in order to be as big as possible in the middle of a sector. The \"horizontal\" option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The \"radial\" option orients text along the radius of the sector. The \"tangential\" option orients text perpendicular to the radius of the sector.\nDefault: \"auto\"\nType: enumerated , one of ( \"horizontal\" | \"radial\" | \"tangential\" | \"auto\" )"
      },
      {
        "label": "outsidetextfont",
        "detail": "Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented at the center of a sunburst graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "root",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "leaf",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "level",
        "detail": "Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "maxdepth",
        "detail": "Sets the number of rendered sectors from any given `level`. Set `maxdepth` to \"-1\" to render all the levels in the hierarchy.\nDefault: -1\nType: integer"
      },
      {
        "label": "rotation",
        "detail": "Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.\nDefault: 0\nType: angle"
      },
      {
        "label": "sort",
        "detail": "Determines whether or not the sectors are reordered from largest to smallest.\nDefault: true\nType: boolean"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "outsidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "root": {
      "items": [
        {
          "label": "color",
          "detail": "sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        }
      ]
    },
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this sunburst trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this sunburst trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this sunburst trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this sunburst trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "marker": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colors",
          "detail": "Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "pattern",
          "detail": "Sets the pattern within the marker.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.\nDefault: \nType: boolean"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the line enclosing each sector.\nDefault: 1\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "pattern": {
        "items": [
          {
            "label": "bgcolor",
            "detail": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgcolor",
            "detail": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "fgopacity",
            "detail": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "fillmode",
            "detail": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.\nDefault: \"replace\"\nType: enumerated , one of ( \"replace\" | \"overlay\" )"
          },
          {
            "label": "shape",
            "detail": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.\nDefault: \"\"\nType: enumerated or array of enumerateds , one of ( \"\" | \"/\" | \"\\\" | \"x\" | \"-\" | \"|\" | \"+\" | \".\" )"
          },
          {
            "label": "size",
            "detail": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.\nDefault: 8\nType: number or array of numbers greater than or equal to 0"
          },
          {
            "label": "solidity",
            "detail": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.\nDefault: 0.3\nType: number or array of numbers between or equal to 0 and 1"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "insidetextfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "leaf": {
      "items": [
        {
          "label": "opacity",
          "detail": "Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7\nDefault: \nType: number between or equal to 0 and 1"
        }
      ]
    }
  },
  "layout": {
    "geo": {
      "items": [
        {
          "label": "bgcolor",
          "detail": "Set the background color of the map\nDefault: \"#fff\"\nType: color"
        },
        {
          "label": "center",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "coastlinecolor",
          "detail": "Sets the coastline color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "coastlinewidth",
          "detail": "Sets the coastline stroke width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "countrycolor",
          "detail": "Sets line color of the country boundaries.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "countrywidth",
          "detail": "Sets line width (in px) of the country boundaries.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "domain",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "fitbounds",
          "detail": "Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range` getting auto-filled. If \"locations\", only the trace's visible locations are considered in the `fitbounds` computations. If \"geojson\", the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to \"false\".\nDefault: \nType: enumerated , one of ( false | \"locations\" | \"geojson\" )"
        },
        {
          "label": "framecolor",
          "detail": "Sets the color the frame.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "framewidth",
          "detail": "Sets the stroke width (in px) of the frame.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lakecolor",
          "detail": "Sets the color of the lakes.\nDefault: \"#3399FF\"\nType: color"
        },
        {
          "label": "landcolor",
          "detail": "Sets the land mass color.\nDefault: \"#F0DC82\"\nType: color"
        },
        {
          "label": "lataxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "lonaxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "oceancolor",
          "detail": "Sets the ocean color\nDefault: \"#3399FF\"\nType: color"
        },
        {
          "label": "projection",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "resolution",
          "detail": "Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.\nDefault: \"110\"\nType: enumerated , one of ( \"110\" | \"50\" )"
        },
        {
          "label": "rivercolor",
          "detail": "Sets color of the rivers.\nDefault: \"#3399FF\"\nType: color"
        },
        {
          "label": "riverwidth",
          "detail": "Sets the stroke width (in px) of the rivers.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "scope",
          "detail": "Set the scope of the map.\nDefault: \"world\"\nType: enumerated , one of ( \"africa\" | \"asia\" | \"europe\" | \"north america\" | \"south america\" | \"usa\" | \"world\" )"
        },
        {
          "label": "showcoastlines",
          "detail": "Sets whether or not the coastlines are drawn.\nDefault: \nType: boolean"
        },
        {
          "label": "showcountries",
          "detail": "Sets whether or not country boundaries are drawn.\nDefault: \nType: boolean"
        },
        {
          "label": "showframe",
          "detail": "Sets whether or not a frame is drawn around the map.\nDefault: \nType: boolean"
        },
        {
          "label": "showlakes",
          "detail": "Sets whether or not lakes are drawn.\nDefault: \nType: boolean"
        },
        {
          "label": "showland",
          "detail": "Sets whether or not land masses are filled in color.\nDefault: \nType: boolean"
        },
        {
          "label": "showocean",
          "detail": "Sets whether or not oceans are filled in color.\nDefault: \nType: boolean"
        },
        {
          "label": "showrivers",
          "detail": "Sets whether or not rivers are drawn.\nDefault: \nType: boolean"
        },
        {
          "label": "showsubunits",
          "detail": "Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.\nDefault: \nType: boolean"
        },
        {
          "label": "subunitcolor",
          "detail": "Sets the color of the subunits boundaries.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "subunitwidth",
          "detail": "Sets the stroke width (in px) of the subunits boundaries.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "uirevision",
          "detail": "Controls persistence of user-driven changes in the view (projection and center). Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "visible",
          "detail": "Sets the default visibility of the base layers.\nDefault: true\nType: boolean"
        }
      ],
      "lataxis": {
        "items": [
          {
            "label": "dtick",
            "detail": "Sets the graticule's longitude/latitude tick step.\nDefault: \nType: number"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the graticule's stroke color.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the graticule's stroke width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "range",
            "detail": "Sets the range of this axis (in degrees), sets the map's clipped coordinates.\nDefault: \nType: Array"
          },
          {
            "label": "showgrid",
            "detail": "Sets whether or not graticule are shown on the map.\nDefault: \nType: boolean"
          },
          {
            "label": "tick0",
            "detail": "Sets the graticule's starting tick longitude/latitude.\nDefault: 0\nType: number"
          }
        ]
      },
      "domain": {
        "items": [
          {
            "label": "column",
            "detail": "If there is a layout grid, use the domain for this column in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "row",
            "detail": "If there is a layout grid, use the domain for this row in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "x",
            "detail": "Sets the horizontal domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.\nDefault: [0, 1]\nType: Array"
          },
          {
            "label": "y",
            "detail": "Sets the vertical domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.\nDefault: [0, 1]\nType: Array"
          }
        ]
      },
      "lonaxis": {
        "items": [
          {
            "label": "dtick",
            "detail": "Sets the graticule's longitude/latitude tick step.\nDefault: \nType: number"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the graticule's stroke color.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the graticule's stroke width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "range",
            "detail": "Sets the range of this axis (in degrees), sets the map's clipped coordinates.\nDefault: \nType: Array"
          },
          {
            "label": "showgrid",
            "detail": "Sets whether or not graticule are shown on the map.\nDefault: \nType: boolean"
          },
          {
            "label": "tick0",
            "detail": "Sets the graticule's starting tick longitude/latitude.\nDefault: 0\nType: number"
          }
        ]
      },
      "center": {
        "items": [
          {
            "label": "lat",
            "detail": "Sets the latitude of the map's center. For all projection types, the map's latitude center lies at the middle of the latitude range by default.\nDefault: \nType: number"
          },
          {
            "label": "lon",
            "detail": "Sets the longitude of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise.\nDefault: \nType: number"
          }
        ]
      },
      "projection": {
        "items": [
          {
            "label": "distance",
            "detail": "For satellite projection type only. Sets the distance from the center of the sphere to the point of view as a proportion of the sphere’s radius.\nDefault: 2\nType: number greater than or equal to 1.001"
          },
          {
            "label": "parallels",
            "detail": "For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.\nDefault: \nType: Array"
          },
          {
            "label": "rotation",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "scale",
            "detail": "Zooms in or out on the map view. A scale of \"1\" corresponds to the largest zoom level that fits the map's lon and lat ranges.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "tilt",
            "detail": "For satellite projection type only. Sets the tilt angle of perspective projection.\nDefault: 0\nType: number"
          },
          {
            "label": "type",
            "detail": "Sets the projection type.\nDefault: \nType: enumerated , one of ( \"airy\" | \"aitoff\" | \"albers\" | \"albers usa\" | \"august\" | \"azimuthal equal area\" | \"azimuthal equidistant\" | \"baker\" | \"bertin1953\" | \"boggs\" | \"bonne\" | \"bottomley\" | \"bromley\" | \"collignon\" | \"conic conformal\" | \"conic equal area\" | \"conic equidistant\" | \"craig\" | \"craster\" | \"cylindrical equal area\" | \"cylindrical stereographic\" | \"eckert1\" | \"eckert2\" | \"eckert3\" | \"eckert4\" | \"eckert5\" | \"eckert6\" | \"eisenlohr\" | \"equal earth\" | \"equirectangular\" | \"fahey\" | \"foucaut\" | \"foucaut sinusoidal\" | \"ginzburg4\" | \"ginzburg5\" | \"ginzburg6\" | \"ginzburg8\" | \"ginzburg9\" | \"gnomonic\" | \"gringorten\" | \"gringorten quincuncial\" | \"guyou\" | \"hammer\" | \"hill\" | \"homolosine\" | \"hufnagel\" | \"hyperelliptical\" | \"kavrayskiy7\" | \"lagrange\" | \"larrivee\" | \"laskowski\" | \"loximuthal\" | \"mercator\" | \"miller\" | \"mollweide\" | \"mt flat polar parabolic\" | \"mt flat polar quartic\" | \"mt flat polar sinusoidal\" | \"natural earth\" | \"natural earth1\" | \"natural earth2\" | \"nell hammer\" | \"nicolosi\" | \"orthographic\" | \"patterson\" | \"peirce quincuncial\" | \"polyconic\" | \"rectangular polyconic\" | \"robinson\" | \"satellite\" | \"sinu mollweide\" | \"sinusoidal\" | \"stereographic\" | \"times\" | \"transverse mercator\" | \"van der grinten\" | \"van der grinten2\" | \"van der grinten3\" | \"van der grinten4\" | \"wagner4\" | \"wagner6\" | \"wiechel\" | \"winkel tripel\" | \"winkel3\" )"
          }
        ],
        "rotation": {
          "items": [
            {
              "label": "lat",
              "detail": "Rotates the map along meridians (in degrees North).\nDefault: \nType: number"
            },
            {
              "label": "lon",
              "detail": "Rotates the map along parallels (in degrees East). Defaults to the center of the `lonaxis.range` values.\nDefault: \nType: number"
            },
            {
              "label": "roll",
              "detail": "Roll the map (in degrees) For example, a roll of \"180\" makes the map appear upside down.\nDefault: \nType: number"
            }
          ]
        }
      }
    },
    "xaxis": {
      "autorangeoptions": {
        "items": [
          {
            "label": "clipmax",
            "detail": "Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "clipmin",
            "detail": "Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "include",
            "detail": "Ensure this value is included in autorange.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "maxallowed",
            "detail": "Use this value exactly as autorange maximum.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minallowed",
            "detail": "Use this value exactly as autorange minimum.\nDefault: \nType: number or categorical coordinate string"
          }
        ]
      },
      "items": [
        {
          "label": "anchor",
          "detail": "If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to \"free\", this axis' position is determined by `position`.\nDefault: \nType: enumerated , one of ( \"free\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "automargin",
          "detail": "Examples: \"height\", \"width\", \"height+width\", \"height+width+left\", \"true\"\nDefault: \nType: flaglist string. Any combination of \"height\", \"width\", \"left\", \"right\", \"top\", \"bottom\" joined with a \"+\" OR true or false."
        },
        {
          "label": "autorange",
          "detail": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to \"false\". Using \"min\" applies autorange only to set the minimum. Using \"max\" applies autorange only to set the maximum. Using \"min reversed\" applies autorange only to set the minimum on a reversed axis. Using \"max reversed\" applies autorange only to set the maximum on a reversed axis. Using \"reversed\" applies autorange on both ends and reverses the axis direction.\nDefault: true\nType: enumerated , one of ( true | false | \"reversed\" | \"min reversed\" | \"max reversed\" | \"min\" | \"max\" )"
        },
        {
          "label": "autorangeoptions",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "autotypenumbers",
          "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
        },
        {
          "label": "calendar",
          "detail": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
        },
        {
          "label": "categoryarray",
          "detail": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "categoryorder",
          "detail": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to \"total ascending\" or \"total descending\" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" | \"total ascending\" | \"total descending\" | \"min ascending\" | \"min descending\" | \"max ascending\" | \"max descending\" | \"sum ascending\" | \"sum descending\" | \"mean ascending\" | \"mean descending\" | \"median ascending\" | \"median descending\" )"
        },
        {
          "label": "color",
          "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "constrain",
          "detail": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the \"range\", or by decreasing the \"domain\". Default is \"domain\" for axes containing image traces, \"range\" otherwise.\nDefault: \nType: enumerated , one of ( \"range\" | \"domain\" )"
        },
        {
          "label": "constraintoward",
          "detail": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are \"left\", \"center\" (default), and \"right\" for x axes, and \"top\", \"middle\" (default), and \"bottom\" for y axes.\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" | \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "dividercolor",
          "detail": "Sets the color of the dividers Only has an effect on \"multicategory\" axes.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "dividerwidth",
          "detail": "Sets the width (in px) of the dividers Only has an effect on \"multicategory\" axes.\nDefault: 1\nType: number"
        },
        {
          "label": "domain",
          "detail": "Sets the domain of this axis (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "fixedrange",
          "detail": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.\nDefault: \nType: boolean"
        },
        {
          "label": "gridcolor",
          "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
        },
        {
          "label": "griddash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "gridwidth",
          "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "hoverformat",
          "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "layer",
          "detail": "Sets the layer on which this axis is displayed. If \"above traces\", this axis is displayed above all the subplot's traces If \"below traces\", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to \"false\" to show markers and/or text nodes above this axis.\nDefault: \"above traces\"\nType: enumerated , one of ( \"above traces\" | \"below traces\" )"
        },
        {
          "label": "linecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "linewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "matches",
          "detail": "If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.\nDefault: \nType: enumerated , one of ( \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "maxallowed",
          "detail": "Determines the maximum range of this axis.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "minallowed",
          "detail": "Determines the minimum range of this axis.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "minor",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "mirror",
          "detail": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If \"true\", the axis lines are mirrored. If \"ticks\", the axis lines and ticks are mirrored. If \"false\", mirroring is disable. If \"all\", axis lines are mirrored on all shared-axes subplots. If \"allticks\", axis lines and ticks are mirrored on all shared-axes subplots.\nDefault: \nType: enumerated , one of ( true | \"ticks\" | false | \"all\" | \"allticks\" )"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "overlaying",
          "detail": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If \"false\", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.\nDefault: \nType: enumerated , one of ( \"free\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "position",
          "detail": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to \"free\".\nDefault: 0\nType: number between or equal to 0 and 1"
        },
        {
          "label": "range",
          "detail": "Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.\nDefault: \nType: Array"
        },
        {
          "label": "rangebreaks",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "rangemode",
          "detail": "If \"normal\", the range is computed in relation to the extrema of the input data. If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data. Applies only to linear axes.\nDefault: \"normal\"\nType: enumerated , one of ( \"normal\" | \"tozero\" | \"nonnegative\" )"
        },
        {
          "label": "rangeselector",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "rangeslider",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "scaleanchor",
          "detail": "If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: \"x\"}, xaxis2: {scaleanchor: \"y\"}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: \"x\"}, xaxis: {scaleanchor: \"y\"}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: \"x\"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).\nDefault: \nType: enumerated , one of ( \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" | false )"
        },
        {
          "label": "scaleratio",
          "detail": "If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showdividers",
          "detail": "Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on \"multicategory\" axes.\nDefault: true\nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showgrid",
          "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: \nType: boolean"
        },
        {
          "label": "showline",
          "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: \nType: boolean"
        },
        {
          "label": "showspikes",
          "detail": "Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest\nDefault: \nType: boolean"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "side",
          "detail": "Determines whether a x (y) axis is positioned at the \"bottom\" (\"left\") or \"top\" (\"right\") of the plotting area.\nDefault: \nType: enumerated , one of ( \"top\" | \"bottom\" | \"left\" | \"right\" )"
        },
        {
          "label": "spikecolor",
          "detail": "Sets the spike color. If undefined, will use the series color\nDefault: \nType: color"
        },
        {
          "label": "spikedash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"dash\"\nType: string"
        },
        {
          "label": "spikemode",
          "detail": "Examples: \"toaxis\", \"across\", \"toaxis+across\", \"toaxis+across+marker\"\nDefault: \nType: flaglist string. Any combination of \"toaxis\", \"across\", \"marker\" joined with a \"+\""
        },
        {
          "label": "spikesnap",
          "detail": "Determines whether spikelines are stuck to the cursor or to the closest datapoints.\nDefault: \"hovered data\"\nType: enumerated , one of ( \"data\" | \"cursor\" | \"hovered data\" )"
        },
        {
          "label": "spikethickness",
          "detail": "Sets the width (in px) of the zero line.\nDefault: 3\nType: number"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabelmode",
          "detail": "Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` \"date\" When set to \"period\", tick labels are drawn in the middle of the period between ticks.\nDefault: \"instant\"\nType: enumerated , one of ( \"instant\" | \"period\" )"
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". Otherwise on \"category\" and \"multicategory\" axes the default is \"allow\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to \"period\". Similarly left or right has no effect on y axes or when `ticklabelmode` is set to \"period\". Has no effect on \"multicategory\" axes or when `tickson` is set to \"boundaries\". When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided). If \"sync\", the number of ticks will sync with the overlayed axis set by `overlaying` property.\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" | \"sync\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "tickson",
          "detail": "Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` \"category\" or \"multicategory\". When set to \"boundaries\", ticks and grid lines are drawn half a category to the left/bottom of labels.\nDefault: \"labels\"\nType: enumerated , one of ( \"labels\" | \"boundaries\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "type",
          "detail": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\nDefault: \"-\"\nType: enumerated , one of ( \"-\" | \"linear\" | \"log\" | \"date\" | \"category\" | \"multicategory\" )"
        },
        {
          "label": "uirevision",
          "detail": "Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "visible",
          "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: \nType: boolean"
        },
        {
          "label": "zeroline",
          "detail": "Determines whether or not a line is drawn at along the 0 value of this axis. If \"true\", the zero line is drawn on top of the grid lines.\nDefault: \nType: boolean"
        },
        {
          "label": "zerolinecolor",
          "detail": "Sets the line color of the zero line.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "zerolinewidth",
          "detail": "Sets the width (in px) of the zero line.\nDefault: 1\nType: number"
        }
      ],
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "rangebreaks": {
        "items": [
          {
            "label": "bounds",
            "detail": "Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.\nDefault: \nType: Array"
          },
          {
            "label": "dvalue",
            "detail": "Sets the size of each `values` item. The default is one day in milliseconds.\nDefault: 86400000\nType: number greater than or equal to 0"
          },
          {
            "label": "enabled",
            "detail": "Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for \"date\" axis type.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "pattern",
            "detail": "Determines a pattern on the time line that generates breaks. If \"day of week\" - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If \"hour\" - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] } or simply { bounds: ['sat', 'mon'] } breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] } breaks from 5pm to 8am (i.e. skips non-work hours).\nDefault: \nType: enumerated , one of ( \"day of week\" | \"hour\" | \"\" )"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "values",
            "detail": "Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.\nDefault: \nType: Array"
          }
        ]
      },
      "rangeslider": {
        "items": [
          {
            "label": "autorange",
            "detail": "Determines whether or not the range slider range is computed in relation to the input data. If `range` is provided, then `autorange` is set to \"false\".\nDefault: true\nType: boolean"
          },
          {
            "label": "bgcolor",
            "detail": "Sets the background color of the range slider.\nDefault: \"#fff\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the border color of the range slider.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the border width of the range slider.\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "range",
            "detail": "Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is \"log\", then you must take the log of your desired range. If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: Array"
          },
          {
            "label": "thickness",
            "detail": "The height of the range slider as a fraction of the total plot area height.\nDefault: 0.15\nType: number between or equal to 0 and 1"
          },
          {
            "label": "visible",
            "detail": "Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`\nDefault: true\nType: boolean"
          },
          {
            "label": "yaxis",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          }
        ],
        "yaxis": {
          "items": [
            {
              "label": "range",
              "detail": "Sets the range of this axis for the rangeslider.\nDefault: \nType: Array"
            },
            {
              "label": "rangemode",
              "detail": "Determines whether or not the range of this axis in the rangeslider use the same value than in the main plot when zooming in/out. If \"auto\", the autorange will be used. If \"fixed\", the `range` is used. If \"match\", the current range of the corresponding y-axis on the main subplot is used.\nDefault: \"match\"\nType: enumerated , one of ( \"auto\" | \"fixed\" | \"match\" )"
            }
          ]
        }
      },
      "rangeselector": {
        "items": [
          {
            "label": "activecolor",
            "detail": "Sets the background color of the active range selector button.\nDefault: \nType: color"
          },
          {
            "label": "bgcolor",
            "detail": "Sets the background color of the range selector buttons.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the color of the border enclosing the range selector.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) of the border enclosing the range selector.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "buttons",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "font",
            "detail": "Sets the font of the range selector button text.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "visible",
            "detail": "Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to \"date\".\nDefault: \nType: boolean"
          },
          {
            "label": "x",
            "detail": "Sets the x position (in normalized coordinates) of the range selector.\nDefault: \nType: number between or equal to -2 and 3"
          },
          {
            "label": "xanchor",
            "detail": "Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the range selector.\nDefault: \"left\"\nType: enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position (in normalized coordinates) of the range selector.\nDefault: \nType: number between or equal to -2 and 3"
          },
          {
            "label": "yanchor",
            "detail": "Sets the range selector's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the range selector.\nDefault: \"bottom\"\nType: enumerated , one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" )"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "buttons": {
          "items": [
            {
              "label": "count",
              "detail": "Sets the number of steps to take to update the range. Use with `step` to specify the update interval.\nDefault: 1\nType: number greater than or equal to 0"
            },
            {
              "label": "label",
              "detail": "Sets the text label to appear on the button.\nDefault: \nType: string"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "step",
              "detail": "The unit of measurement that the `count` value will set the range by.\nDefault: \"month\"\nType: enumerated , one of ( \"month\" | \"year\" | \"day\" | \"hour\" | \"minute\" | \"second\" | \"all\" )"
            },
            {
              "label": "stepmode",
              "detail": "Sets the range update mode. If \"backward\", the range update shifts the start of range back \"count\" times \"step\" milliseconds. If \"todate\", the range update shifts the start of range back to the first timestamp from \"count\" times \"step\" milliseconds back. For example, with `step` set to \"year\" and `count` set to \"1\" the range update shifts the start of the range back to January 01 of the current year. Month and year \"todate\" are currently available only for the built-in (Gregorian) calendar.\nDefault: \"backward\"\nType: enumerated , one of ( \"backward\" | \"todate\" )"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "visible",
              "detail": "Determines whether or not this button is visible.\nDefault: true\nType: boolean"
            }
          ]
        }
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "standoff",
            "detail": "Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "text",
            "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      },
      "minor": {
        "items": [
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 5\nType: integer greater than or equal to 0"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: \nType: boolean"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "annotations": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.\nDefault: \"center\"\nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "arrowcolor",
          "detail": "Sets the color of the annotation arrow.\nDefault: \nType: color"
        },
        {
          "label": "arrowhead",
          "detail": "Sets the end annotation arrow head style.\nDefault: 1\nType: integer between or equal to 0 and 8"
        },
        {
          "label": "arrowside",
          "detail": "Examples: \"end\", \"start\", \"end+start\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"end\", \"start\" joined with a \"+\" OR \"none\"."
        },
        {
          "label": "arrowsize",
          "detail": "Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.\nDefault: 1\nType: number greater than or equal to 0.3"
        },
        {
          "label": "arrowwidth",
          "detail": "Sets the width (in px) of annotation arrow line.\nDefault: \nType: number greater than or equal to 0.1"
        },
        {
          "label": "ax",
          "detail": "Sets the x component of the arrow tail about the arrow head. If `axref` is `pixel`, a positive (negative) component corresponds to an arrow pointing from right to left (left to right). If `axref` is not `pixel` and is exactly the same as `xref`, this is an absolute value on that axis, like `x`, specified in the same coordinates as `xref`.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "axref",
          "detail": "Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a x axis id (e.g. \"x\" or \"x2\"), the `x` position refers to a x coordinate. If set to \"paper\", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the left (right). If set to a x axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., \"x2 domain\" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis. In order for absolute positioning of the arrow to work, \"axref\" must be exactly the same as \"xref\", otherwise \"axref\" will revert to \"pixel\" (explained next). For relative positioning, \"axref\" can be set to \"pixel\", in which case the \"ax\" value is specified in pixels relative to \"x\". Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.\nDefault: \"pixel\"\nType: enumerated , one of ( \"pixel\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "ay",
          "detail": "Sets the y component of the arrow tail about the arrow head. If `ayref` is `pixel`, a positive (negative) component corresponds to an arrow pointing from bottom to top (top to bottom). If `ayref` is not `pixel` and is exactly the same as `yref`, this is an absolute value on that axis, like `y`, specified in the same coordinates as `yref`.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "ayref",
          "detail": "Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a y axis id (e.g. \"y\" or \"y2\"), the `y` position refers to a y coordinate. If set to \"paper\", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the bottom (top). If set to a y axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., \"y2 domain\" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis. In order for absolute positioning of the arrow to work, \"ayref\" must be exactly the same as \"yref\", otherwise \"ayref\" will revert to \"pixel\" (explained next). For relative positioning, \"ayref\" can be set to \"pixel\", in which case the \"ay\" value is specified in pixels relative to \"y\". Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.\nDefault: \"pixel\"\nType: enumerated , one of ( \"pixel\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the annotation.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the color of the border enclosing the annotation `text`.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "borderpad",
          "detail": "Sets the padding (in px) between the `text` and the enclosing border.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) of the border enclosing the annotation `text`.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "captureevents",
          "detail": "Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is \"false\" unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.\nDefault: \nType: boolean"
        },
        {
          "label": "clicktoshow",
          "detail": "Makes this annotation respond to clicks on the plot. If you click a data point that exactly matches the `x` and `y` values of this annotation, and it is hidden (visible: false), it will appear. In \"onoff\" mode, you must click the same point again to make it disappear, so if you click multiple points, you can show multiple annotations. In \"onout\" mode, a click anywhere else in the plot (on another data point or not) will hide this annotation. If you need to show/hide this annotation in response to different `x` or `y` values, you can set `xclick` and/or `yclick`. This is useful for example to label the side of a bar. To label markers though, `standoff` is preferred over `xclick` and `yclick`.\nDefault: \nType: enumerated , one of ( false | \"onoff\" | \"onout\" )"
        },
        {
          "label": "font",
          "detail": "Sets the annotation text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "height",
          "detail": "Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.\nDefault: \nType: number greater than or equal to 1"
        },
        {
          "label": "hoverlabel",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "hovertext",
          "detail": "Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.\nDefault: \nType: string"
        },
        {
          "label": "name",
          "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the annotation (text + arrow).\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "showarrow",
          "detail": "Determines whether or not the annotation is drawn with an arrow. If \"true\", `text` is placed near the arrow's tail. If \"false\", `text` lines up with the `x` and `y` provided.\nDefault: true\nType: boolean"
        },
        {
          "label": "standoff",
          "detail": "Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "startarrowhead",
          "detail": "Sets the start annotation arrow head style.\nDefault: 1\nType: integer between or equal to 0 and 8"
        },
        {
          "label": "startarrowsize",
          "detail": "Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.\nDefault: 1\nType: number greater than or equal to 0.3"
        },
        {
          "label": "startstandoff",
          "detail": "Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "templateitemname",
          "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
        },
        {
          "label": "text",
          "detail": "Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported.\nDefault: \nType: string"
        },
        {
          "label": "textangle",
          "detail": "Sets the angle at which the `text` is drawn with respect to the horizontal.\nDefault: 0\nType: angle"
        },
        {
          "label": "valign",
          "detail": "Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.\nDefault: \"middle\"\nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this annotation is visible.\nDefault: true\nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.\nDefault: \nType: number greater than or equal to 1"
        },
        {
          "label": "x",
          "detail": "Sets the annotation's x position. If the axis `type` is \"log\", then you must take the log of your desired range. If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "xanchor",
          "detail": "Sets the text box's horizontal position anchor This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the annotation. For example, if `x` is set to 1, `xref` to \"paper\" and `xanchor` to \"right\" then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If \"auto\", the anchor is equivalent to \"center\" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.\nDefault: \"auto\"\nType: enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xclick",
          "detail": "Toggle this annotation when clicking a data point whose `x` value is `xclick` rather than the annotation's `x` value.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "xref",
          "detail": "Sets the annotation's x coordinate axis. If set to a x axis id (e.g. \"x\" or \"x2\"), the `x` position refers to a x coordinate. If set to \"paper\", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the left (right). If set to a x axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., \"x2 domain\" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.\nDefault: \nType: enumerated , one of ( \"paper\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "xshift",
          "detail": "Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.\nDefault: 0\nType: number"
        },
        {
          "label": "y",
          "detail": "Sets the annotation's y position. If the axis `type` is \"log\", then you must take the log of your desired range. If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "yanchor",
          "detail": "Sets the text box's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the annotation. For example, if `y` is set to 1, `yref` to \"paper\" and `yanchor` to \"top\" then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If \"auto\", the anchor is equivalent to \"middle\" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.\nDefault: \"auto\"\nType: enumerated , one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "yclick",
          "detail": "Toggle this annotation when clicking a data point whose `y` value is `yclick` rather than the annotation's `y` value.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "yref",
          "detail": "Sets the annotation's y coordinate axis. If set to a y axis id (e.g. \"y\" or \"y2\"), the `y` position refers to a y coordinate. If set to \"paper\", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the bottom (top). If set to a y axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., \"y2 domain\" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.\nDefault: \nType: enumerated , one of ( \"paper\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "yshift",
          "detail": "Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.\nDefault: 0\nType: number"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "hoverlabel": {
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.\nDefault: \nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.\nDefault: \nType: color"
          },
          {
            "label": "font",
            "detail": "Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.\nDefault: \nType: Dict containing one or more of the keys listed below."
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "activeselection": {
      "items": [
        {
          "label": "fillcolor",
          "detail": "Sets the color filling the active selection' interior.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the active selection.\nDefault: 0.5\nType: number between or equal to 0 and 1"
        }
      ]
    },
    "newselection": {
      "items": [
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "mode",
          "detail": "Describes how a new selection is created. If `immediate`, a new selection is created after first mouse up. If `gradual`, a new selection is not created after first mouse. By adding to and subtracting from the initial selection, this option allows declaring extra outlines of the selection.\nDefault: \"immediate\"\nType: enumerated , one of ( \"immediate\" | \"gradual\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the line color. By default uses either dark grey or white to increase contrast with background color.\nDefault: \nType: color"
          },
          {
            "label": "dash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"dot\"\nType: string"
          },
          {
            "label": "width",
            "detail": "Sets the line width (in px).\nDefault: 1\nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "sliders": {
      "items": [
        {
          "label": "active",
          "detail": "Determines which button (by index starting from 0) is considered active.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "activebgcolor",
          "detail": "Sets the background color of the slider grip while dragging.\nDefault: \"#dbdde0\"\nType: color"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the slider.\nDefault: \"#f8fafc\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the color of the border enclosing the slider.\nDefault: \"#bec8d9\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) of the border enclosing the slider.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "currentvalue",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "font",
          "detail": "Sets the font of the slider step labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "len",
          "detail": "Sets the length of the slider This measure excludes the padding of both ends. That is, the slider's length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this slider length is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minorticklen",
          "detail": "Sets the length in pixels of minor step tick marks\nDefault: 4\nType: number greater than or equal to 0"
        },
        {
          "label": "name",
          "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
        },
        {
          "label": "pad",
          "detail": "Set the padding of the slider component along each side.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "steps",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "templateitemname",
          "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the color of the border enclosing the slider.\nDefault: \"#333\"\nType: color"
        },
        {
          "label": "ticklen",
          "detail": "Sets the length in pixels of step tick marks\nDefault: 7\nType: number greater than or equal to 0"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "transition",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "visible",
          "detail": "Determines whether or not the slider is visible.\nDefault: true\nType: boolean"
        },
        {
          "label": "x",
          "detail": "Sets the x position (in normalized coordinates) of the slider.\nDefault: 0\nType: number between or equal to -2 and 3"
        },
        {
          "label": "xanchor",
          "detail": "Sets the slider's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the range selector.\nDefault: \"left\"\nType: enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position (in normalized coordinates) of the slider.\nDefault: 0\nType: number between or equal to -2 and 3"
        },
        {
          "label": "yanchor",
          "detail": "Sets the slider's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the range selector.\nDefault: \"top\"\nType: enumerated , one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" )"
        }
      ],
      "pad": {
        "items": [
          {
            "label": "b",
            "detail": "The amount of padding (in px) along the bottom of the component.\nDefault: 0\nType: number"
          },
          {
            "label": "l",
            "detail": "The amount of padding (in px) on the left side of the component.\nDefault: 0\nType: number"
          },
          {
            "label": "r",
            "detail": "The amount of padding (in px) on the right side of the component.\nDefault: 0\nType: number"
          },
          {
            "label": "t",
            "detail": "The amount of padding (in px) along the top of the component.\nDefault: 20\nType: number"
          }
        ]
      },
      "steps": {
        "items": [
          {
            "label": "args",
            "detail": "Sets the arguments values to be passed to the Plotly method set in `method` on slide.\nDefault: \nType: Array"
          },
          {
            "label": "execute",
            "detail": "When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_sliderchange` method and executing the API command manually without losing the benefit of the slider automatically binding to the state of the plot through the specification of `method` and `args`.\nDefault: true\nType: boolean"
          },
          {
            "label": "label",
            "detail": "Sets the text label to appear on the slider\nDefault: \nType: string"
          },
          {
            "label": "method",
            "detail": "Sets the Plotly method to be called when the slider value is changed. If the `skip` method is used, the API slider will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to slider events manually via JavaScript.\nDefault: \"restyle\"\nType: enumerated , one of ( \"restyle\" | \"relayout\" | \"animate\" | \"update\" | \"skip\" )"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "Sets the value of the slider step, used to refer to the step programatically. Defaults to the slider label if not provided.\nDefault: \nType: string"
          },
          {
            "label": "visible",
            "detail": "Determines whether or not this step is included in the slider.\nDefault: true\nType: boolean"
          }
        ]
      },
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "transition": {
        "items": [
          {
            "label": "duration",
            "detail": "Sets the duration of the slider transition\nDefault: 150\nType: number greater than or equal to 0"
          },
          {
            "label": "easing",
            "detail": "Sets the easing function of the slider transition\nDefault: \"cubic-in-out\"\nType: enumerated , one of ( \"linear\" | \"quad\" | \"cubic\" | \"sin\" | \"exp\" | \"circle\" | \"elastic\" | \"back\" | \"bounce\" | \"linear-in\" | \"quad-in\" | \"cubic-in\" | \"sin-in\" | \"exp-in\" | \"circle-in\" | \"elastic-in\" | \"back-in\" | \"bounce-in\" | \"linear-out\" | \"quad-out\" | \"cubic-out\" | \"sin-out\" | \"exp-out\" | \"circle-out\" | \"elastic-out\" | \"back-out\" | \"bounce-out\" | \"linear-in-out\" | \"quad-in-out\" | \"cubic-in-out\" | \"sin-in-out\" | \"exp-in-out\" | \"circle-in-out\" | \"elastic-in-out\" | \"back-in-out\" | \"bounce-in-out\" )"
          }
        ]
      },
      "currentvalue": {
        "items": [
          {
            "label": "font",
            "detail": "Sets the font of the current value label text.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "offset",
            "detail": "The amount of space, in pixels, between the current value label and the slider.\nDefault: 10\nType: number"
          },
          {
            "label": "prefix",
            "detail": "When currentvalue.visible is true, this sets the prefix of the label.\nDefault: \nType: string"
          },
          {
            "label": "suffix",
            "detail": "When currentvalue.visible is true, this sets the suffix of the label.\nDefault: \nType: string"
          },
          {
            "label": "visible",
            "detail": "Shows the currently-selected value above the slider.\nDefault: true\nType: boolean"
          },
          {
            "label": "xanchor",
            "detail": "The alignment of the value readout relative to the length of the slider.\nDefault: \"left\"\nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "selections": {
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the line color.\nDefault: \nType: color"
          },
          {
            "label": "dash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"dot\"\nType: string"
          },
          {
            "label": "width",
            "detail": "Sets the line width (in px).\nDefault: 1\nType: number greater than or equal to 1"
          }
        ]
      },
      "items": [
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "name",
          "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the selection.\nDefault: 0.7\nType: number between or equal to 0 and 1"
        },
        {
          "label": "path",
          "detail": "For `type` \"path\" - a valid SVG path similar to `shapes.path` in data coordinates. Allowed segments are: M, L and Z.\nDefault: \nType: string"
        },
        {
          "label": "templateitemname",
          "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
        },
        {
          "label": "type",
          "detail": "Specifies the selection type to be drawn. If \"rect\", a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`) and (`x0`,`y1`). If \"path\", draw a custom SVG path using `path`.\nDefault: \nType: enumerated , one of ( \"rect\" | \"path\" )"
        },
        {
          "label": "x0",
          "detail": "Sets the selection's starting x position.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "x1",
          "detail": "Sets the selection's end x position.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "xref",
          "detail": "Sets the selection's x coordinate axis. If set to a x axis id (e.g. \"x\" or \"x2\"), the `x` position refers to a x coordinate. If set to \"paper\", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the left (right). If set to a x axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., \"x2 domain\" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.\nDefault: \nType: enumerated , one of ( \"paper\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "y0",
          "detail": "Sets the selection's starting y position.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "y1",
          "detail": "Sets the selection's end y position.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "yref",
          "detail": "Sets the selection's x coordinate axis. If set to a y axis id (e.g. \"y\" or \"y2\"), the `y` position refers to a y coordinate. If set to \"paper\", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the bottom (top). If set to a y axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., \"y2 domain\" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.\nDefault: \nType: enumerated , one of ( \"paper\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        }
      ]
    },
    "colorscale": {
      "items": [
        {
          "label": "diverging",
          "detail": "Sets the default diverging colorscale. Note that `autocolorscale` must be true for this attribute to work.\nDefault: [[0, rgb(5,10,172)], [0.35, rgb(106,137,247)], [0.5, rgb(190,190,190)], [0.6, rgb(220,170,132)], [0.7, rgb(230,145,90)], [1, rgb(178,10,28)], ]\nType: colorscale"
        },
        {
          "label": "sequential",
          "detail": "Sets the default sequential colorscale for positive values. Note that `autocolorscale` must be true for this attribute to work.\nDefault: [[0, rgb(220,220,220)], [0.2, rgb(245,195,157)], [0.4, rgb(245,160,105)], [1, rgb(178,10,28)], ]\nType: colorscale"
        },
        {
          "label": "sequentialminus",
          "detail": "Sets the default sequential colorscale for negative values. Note that `autocolorscale` must be true for this attribute to work.\nDefault: [[0, rgb(5,10,172)], [0.35, rgb(40,60,190)], [0.5, rgb(70,100,245)], [0.6, rgb(90,120,245)], [0.7, rgb(106,137,247)], [1, rgb(220,220,220)], ]\nType: colorscale"
        }
      ]
    },
    "smith": {
      "items": [
        {
          "label": "bgcolor",
          "detail": "Set the background color of the subplot\nDefault: \"#fff\"\nType: color"
        },
        {
          "label": "domain",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "imaginaryaxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "realaxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "imaginaryaxis": {
        "items": [
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "layer",
            "detail": "Sets the layer on which this axis is displayed. If \"above traces\", this axis is displayed above all the subplot's traces If \"below traces\", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to \"false\" to show markers and/or text nodes above this axis.\nDefault: \"above traces\"\nType: enumerated , one of ( \"above traces\" | \"below traces\" )"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: true\nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Defaults to `realaxis.tickvals` plus the same as negatives and zero.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 2\nType: number greater than or equal to 0"
          },
          {
            "label": "visible",
            "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: true\nType: boolean"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      },
      "domain": {
        "items": [
          {
            "label": "column",
            "detail": "If there is a layout grid, use the domain for this column in the grid for this smith subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "row",
            "detail": "If there is a layout grid, use the domain for this row in the grid for this smith subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "x",
            "detail": "Sets the horizontal domain of this smith subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          },
          {
            "label": "y",
            "detail": "Sets the vertical domain of this smith subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          }
        ]
      },
      "realaxis": {
        "items": [
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "layer",
            "detail": "Sets the layer on which this axis is displayed. If \"above traces\", this axis is displayed above all the subplot's traces If \"below traces\", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to \"false\" to show markers and/or text nodes above this axis.\nDefault: \"above traces\"\nType: enumerated , one of ( \"above traces\" | \"below traces\" )"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: true\nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "side",
            "detail": "Determines on which side of real axis line the tick and tick labels appear.\nDefault: \"top\"\nType: enumerated , one of ( \"top\" | \"bottom\" )"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: 90\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"top\" (\"bottom\"), this axis' are drawn above (below) the axis line.\nDefault: \nType: enumerated , one of ( \"top\" | \"bottom\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear.\nDefault: 0.20.5125\nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 2\nType: number greater than or equal to 0"
          },
          {
            "label": "visible",
            "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: true\nType: boolean"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "activeshape": {
      "items": [
        {
          "label": "fillcolor",
          "detail": "Sets the color filling the active shape' interior.\nDefault: \"rgb(255,0,255)\"\nType: color"
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the active shape.\nDefault: 0.5\nType: number between or equal to 0 and 1"
        }
      ]
    },
    "font": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \"\"Open Sans\", verdana, arial, sans-serif\"\nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: 12\nType: number greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of all hover labels on graph\nDefault: \nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of all hover labels on graph.\nDefault: \nType: color"
        },
        {
          "label": "font",
          "detail": "Sets the default hover label font used by all traces on the graph.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "grouptitlefont",
          "detail": "Sets the font for group titles in hover (unified modes). Defaults to `hoverlabel.font`.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer greater than or equal to -1"
        }
      ],
      "grouptitlefont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \"Arial, sans-serif\"\nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: 13\nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "shapes": {
      "label": {
        "items": [
          {
            "label": "font",
            "detail": "Sets the shape label text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "padding",
            "detail": "Sets padding (in px) between edge of label and edge of shape.\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "text",
            "detail": "Sets the text to display with shape. It is also used for legend item if `name` is not provided.\nDefault: \"\"\nType: string"
          },
          {
            "label": "textangle",
            "detail": "Sets the angle at which the label text is drawn with respect to the horizontal. For lines, angle \"auto\" is the same angle as the line. For all other shapes, angle \"auto\" is horizontal.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "textposition",
            "detail": "Sets the position of the label text relative to the shape. Supported values for rectangles, circles and paths are \"top left\", \"top center\", \"top right\", \"middle left\", \"middle center\", \"middle right\", \"bottom left\", \"bottom center\", and \"bottom right\". Supported values for lines are \"start\", \"middle\", and \"end\". Default: \"middle center\" for rectangles, circles, and paths; \"middle\" for lines.\nDefault: \nType: enumerated , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" | \"start\" | \"middle\" | \"end\" )"
          },
          {
            "label": "texttemplate",
            "detail": "Template string used for rendering the shape's label. Note that this will override `text`. Variables are inserted using %{variable}, for example \"x0: %{x0}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{x0:$.2f}\". See https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{x0|%m %b %Y}\". See https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. A single multiplication or division operation may be applied to numeric variables, and combined with d3 number formatting, for example \"Length in cm: %{x0\"2.54}\", \"%{slope\"60:.1f} meters per second.\" For log axes, variable values are given in log units. For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms. Finally, the template string has access to variables `x0`, `x1`, `y0`, `y1`, `slope`, `dx`, `dy`, `width`, `height`, `length`, `xcenter` and `ycenter`.\nDefault: \"\"\nType: string"
          },
          {
            "label": "xanchor",
            "detail": "Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the \"left\", \"center\" or \"right\" of the label text. For example, if `textposition` is set to \"top right\" and `xanchor` to \"right\" then the right-most portion of the label text lines up with the right-most edge of the shape.\nDefault: \"auto\"\nType: enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "yanchor",
            "detail": "Sets the label's vertical position anchor This anchor binds the specified `textposition` to the \"top\", \"middle\" or \"bottom\" of the label text. For example, if `textposition` is set to \"top right\" and `yanchor` to \"top\" then the top-most portion of the label text lines up with the top-most edge of the shape.\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      },
      "items": [
        {
          "label": "editable",
          "detail": "Determines whether the shape could be activated for edit or not. Has no effect when the older editable shapes mode is enabled via `config.editable` or `config.edits.shapePosition`.\nDefault: \nType: boolean"
        },
        {
          "label": "fillcolor",
          "detail": "Sets the color filling the shape's interior. Only applies to closed shapes.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "fillrule",
          "detail": "Determines which regions of complex paths constitute the interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule\nDefault: \"evenodd\"\nType: enumerated , one of ( \"evenodd\" | \"nonzero\" )"
        },
        {
          "label": "label",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "layer",
          "detail": "Specifies whether shapes are drawn below or above traces.\nDefault: \"above\"\nType: enumerated , one of ( \"below\" | \"above\" )"
        },
        {
          "label": "legend",
          "detail": "Sets the reference to a legend to show this shape in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
        },
        {
          "label": "legendgroup",
          "detail": "Sets the legend group for this shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
        },
        {
          "label": "legendgrouptitle",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "legendrank",
          "detail": "Sets the legend rank for this shape. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
        },
        {
          "label": "legendwidth",
          "detail": "Sets the width (in px or fraction) of the legend for this shape.\nDefault: \nType: number greater than or equal to 0"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "name",
          "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the shape.\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "path",
          "detail": "For `type` \"path\" - a valid SVG path with the pixel values replaced by data values in `xsizemode`/`ysizemode` being \"scaled\" and taken unmodified as pixels relative to `xanchor` and `yanchor` in case of \"pixel\" size mode. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained \"polybezier\" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789\nDefault: \nType: string"
        },
        {
          "label": "showlegend",
          "detail": "Determines whether or not this shape is shown in the legend.\nDefault: \nType: boolean"
        },
        {
          "label": "templateitemname",
          "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
        },
        {
          "label": "type",
          "detail": "Specifies the shape type to be drawn. If \"line\", a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) with respect to the axes' sizing mode. If \"circle\", a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) with respect to the axes' sizing mode. If \"rect\", a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) with respect to the axes' sizing mode. If \"path\", draw a custom SVG path using `path`. with respect to the axes' sizing mode.\nDefault: \nType: enumerated , one of ( \"circle\" | \"rect\" | \"path\" | \"line\" )"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this shape is visible. If \"legendonly\", the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
        },
        {
          "label": "x0",
          "detail": "Sets the shape's starting x position. See `type` and `xsizemode` for more info.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "x1",
          "detail": "Sets the shape's end x position. See `type` and `xsizemode` for more info.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "xanchor",
          "detail": "Only relevant in conjunction with `xsizemode` set to \"pixel\". Specifies the anchor point on the x axis to which `x0`, `x1` and x coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `xsizemode` not set to \"pixel\".\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "xref",
          "detail": "Sets the shape's x coordinate axis. If set to a x axis id (e.g. \"x\" or \"x2\"), the `x` position refers to a x coordinate. If set to \"paper\", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the left (right). If set to a x axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., \"x2 domain\" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.\nDefault: \nType: enumerated , one of ( \"paper\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "xsizemode",
          "detail": "Sets the shapes's sizing mode along the x axis. If set to \"scaled\", `x0`, `x1` and x coordinates within `path` refer to data values on the x axis or a fraction of the plot area's width (`xref` set to \"paper\"). If set to \"pixel\", `xanchor` specifies the x position in terms of data or plot fraction but `x0`, `x1` and x coordinates within `path` are pixels relative to `xanchor`. This way, the shape can have a fixed width while maintaining a position relative to data or plot fraction.\nDefault: \"scaled\"\nType: enumerated , one of ( \"scaled\" | \"pixel\" )"
        },
        {
          "label": "y0",
          "detail": "Sets the shape's starting y position. See `type` and `ysizemode` for more info.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "y1",
          "detail": "Sets the shape's end y position. See `type` and `ysizemode` for more info.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "yanchor",
          "detail": "Only relevant in conjunction with `ysizemode` set to \"pixel\". Specifies the anchor point on the y axis to which `y0`, `y1` and y coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `ysizemode` not set to \"pixel\".\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "yref",
          "detail": "Sets the shape's y coordinate axis. If set to a y axis id (e.g. \"y\" or \"y2\"), the `y` position refers to a y coordinate. If set to \"paper\", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the bottom (top). If set to a y axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., \"y2 domain\" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.\nDefault: \nType: enumerated , one of ( \"paper\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "ysizemode",
          "detail": "Sets the shapes's sizing mode along the y axis. If set to \"scaled\", `y0`, `y1` and y coordinates within `path` refer to data values on the y axis or a fraction of the plot area's height (`yref` set to \"paper\"). If set to \"pixel\", `yanchor` specifies the y position in terms of data or plot fraction but `y0`, `y1` and y coordinates within `path` are pixels relative to `yanchor`. This way, the shape can have a fixed height while maintaining a position relative to data or plot fraction.\nDefault: \"scaled\"\nType: enumerated , one of ( \"scaled\" | \"pixel\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the line color.\nDefault: \nType: color"
          },
          {
            "label": "dash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "width",
            "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
          }
        ]
      },
      "legendgrouptitle": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "text",
            "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "coloraxis": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when `cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
        }
      ],
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "scene": {
      "items": [
        {
          "label": "annotations",
          "detail": "An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "aspectmode",
          "detail": "If \"cube\", this scene's axes are drawn as a cube, regardless of the axes' ranges. If \"data\", this scene's axes are drawn in proportion with the axes' ranges. If \"manual\", this scene's axes are drawn in proportion with the input of \"aspectratio\" (the default behavior if \"aspectratio\" is provided). If \"auto\", this scene's axes are drawn using the results of \"data\" except when one axis is more than four times the size of the two others, where in that case the results of \"cube\" are used.\nDefault: \"auto\"\nType: enumerated , one of ( \"auto\" | \"cube\" | \"data\" | \"manual\" )"
        },
        {
          "label": "aspectratio",
          "detail": "Sets this scene's axis aspectratio.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "bgcolor",
          "detail": "\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "camera",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "domain",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "dragmode",
          "detail": "Determines the mode of drag interactions for this scene.\nDefault: \nType: enumerated , one of ( \"orbit\" | \"turntable\" | \"zoom\" | \"pan\" | false )"
        },
        {
          "label": "hovermode",
          "detail": "Determines the mode of hover interactions for this scene.\nDefault: \"closest\"\nType: enumerated , one of ( \"closest\" | false )"
        },
        {
          "label": "uirevision",
          "detail": "Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "xaxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "yaxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "zaxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "zaxis": {
        "autorangeoptions": {
          "items": [
            {
              "label": "clipmax",
              "detail": "Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "clipmin",
              "detail": "Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "include",
              "detail": "Ensure this value is included in autorange.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "maxallowed",
              "detail": "Use this value exactly as autorange maximum.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "minallowed",
              "detail": "Use this value exactly as autorange minimum.\nDefault: \nType: number or categorical coordinate string"
            }
          ]
        },
        "items": [
          {
            "label": "autorange",
            "detail": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to \"false\". Using \"min\" applies autorange only to set the minimum. Using \"max\" applies autorange only to set the maximum. Using \"min reversed\" applies autorange only to set the minimum on a reversed axis. Using \"max reversed\" applies autorange only to set the maximum on a reversed axis. Using \"reversed\" applies autorange on both ends and reverses the axis direction.\nDefault: true\nType: enumerated , one of ( true | false | \"reversed\" | \"min reversed\" | \"max reversed\" | \"min\" | \"max\" )"
          },
          {
            "label": "autorangeoptions",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "autotypenumbers",
            "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
          },
          {
            "label": "backgroundcolor",
            "detail": "Sets the background color of this axis' wall.\nDefault: \"rgba(204, 204, 204, 0.5)\"\nType: color"
          },
          {
            "label": "calendar",
            "detail": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
          },
          {
            "label": "categoryarray",
            "detail": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "categoryorder",
            "detail": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to \"total ascending\" or \"total descending\" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" | \"total ascending\" | \"total descending\" | \"min ascending\" | \"min descending\" | \"max ascending\" | \"max descending\" | \"sum ascending\" | \"sum descending\" | \"mean ascending\" | \"mean descending\" | \"median ascending\" | \"median descending\" )"
          },
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"rgb(204, 204, 204)\"\nType: color"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "maxallowed",
            "detail": "Determines the maximum range of this axis.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minallowed",
            "detail": "Determines the minimum range of this axis.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "mirror",
            "detail": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If \"true\", the axis lines are mirrored. If \"ticks\", the axis lines and ticks are mirrored. If \"false\", mirroring is disable. If \"all\", axis lines are mirrored on all shared-axes subplots. If \"allticks\", axis lines and ticks are mirrored on all shared-axes subplots.\nDefault: \nType: enumerated , one of ( true | \"ticks\" | false | \"all\" | \"allticks\" )"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "range",
            "detail": "Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.\nDefault: \nType: Array"
          },
          {
            "label": "rangemode",
            "detail": "If \"normal\", the range is computed in relation to the extrema of the input data. If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data. Applies only to linear axes.\nDefault: \"normal\"\nType: enumerated , one of ( \"normal\" | \"tozero\" | \"nonnegative\" )"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showaxeslabels",
            "detail": "Sets whether or not this axis is labeled\nDefault: true\nType: boolean"
          },
          {
            "label": "showbackground",
            "detail": "Sets whether or not this axis' wall has a background color.\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: \nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: \nType: boolean"
          },
          {
            "label": "showspikes",
            "detail": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "spikecolor",
            "detail": "Sets the color of the spikes.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "spikesides",
            "detail": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.\nDefault: true\nType: boolean"
          },
          {
            "label": "spikethickness",
            "detail": "Sets the thickness (in px) of the spikes.\nDefault: 2\nType: number greater than or equal to 0"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "type",
            "detail": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\nDefault: \"-\"\nType: enumerated , one of ( \"-\" | \"linear\" | \"log\" | \"date\" | \"category\" )"
          },
          {
            "label": "visible",
            "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: \nType: boolean"
          },
          {
            "label": "zeroline",
            "detail": "Determines whether or not a line is drawn at along the 0 value of this axis. If \"true\", the zero line is drawn on top of the grid lines.\nDefault: \nType: boolean"
          },
          {
            "label": "zerolinecolor",
            "detail": "Sets the line color of the zero line.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "zerolinewidth",
            "detail": "Sets the width (in px) of the zero line.\nDefault: 1\nType: number"
          }
        ],
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "text",
              "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "aspectratio": {
        "items": [
          {
            "label": "x",
            "detail": "\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "y",
            "detail": "\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "z",
            "detail": "\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "camera": {
        "items": [
          {
            "label": "center",
            "detail": "Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "eye",
            "detail": "Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "projection",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "up",
            "detail": "Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is \"{x: 0, y: 0, z: 1}\" which means that the z axis points up.\nDefault: \nType: Dict containing one or more of the keys listed below."
          }
        ],
        "eye": {
          "items": [
            {
              "label": "x",
              "detail": "\nDefault: 1.25\nType: number"
            },
            {
              "label": "y",
              "detail": "\nDefault: 1.25\nType: number"
            },
            {
              "label": "z",
              "detail": "\nDefault: 1.25\nType: number"
            }
          ]
        },
        "center": {
          "items": [
            {
              "label": "x",
              "detail": "\nDefault: 0\nType: number"
            },
            {
              "label": "y",
              "detail": "\nDefault: 0\nType: number"
            },
            {
              "label": "z",
              "detail": "\nDefault: 0\nType: number"
            }
          ]
        },
        "projection": {
          "items": [
            {
              "label": "type",
              "detail": "Sets the projection type. The projection type could be either \"perspective\" or \"orthographic\". The default is \"perspective\".\nDefault: \"perspective\"\nType: enumerated , one of ( \"perspective\" | \"orthographic\" )"
            }
          ]
        },
        "up": {
          "items": [
            {
              "label": "x",
              "detail": "\nDefault: 0\nType: number"
            },
            {
              "label": "y",
              "detail": "\nDefault: 0\nType: number"
            },
            {
              "label": "z",
              "detail": "\nDefault: 1\nType: number"
            }
          ]
        }
      },
      "annotations": {
        "items": [
          {
            "label": "align",
            "detail": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.\nDefault: \"center\"\nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "arrowcolor",
            "detail": "Sets the color of the annotation arrow.\nDefault: \nType: color"
          },
          {
            "label": "arrowhead",
            "detail": "Sets the end annotation arrow head style.\nDefault: 1\nType: integer between or equal to 0 and 8"
          },
          {
            "label": "arrowside",
            "detail": "Examples: \"end\", \"start\", \"end+start\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"end\", \"start\" joined with a \"+\" OR \"none\"."
          },
          {
            "label": "arrowsize",
            "detail": "Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.\nDefault: 1\nType: number greater than or equal to 0.3"
          },
          {
            "label": "arrowwidth",
            "detail": "Sets the width (in px) of annotation arrow line.\nDefault: \nType: number greater than or equal to 0.1"
          },
          {
            "label": "ax",
            "detail": "Sets the x component of the arrow tail about the arrow head (in pixels).\nDefault: \nType: number"
          },
          {
            "label": "ay",
            "detail": "Sets the y component of the arrow tail about the arrow head (in pixels).\nDefault: \nType: number"
          },
          {
            "label": "bgcolor",
            "detail": "Sets the background color of the annotation.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the color of the border enclosing the annotation `text`.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "borderpad",
            "detail": "Sets the padding (in px) between the `text` and the enclosing border.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) of the border enclosing the annotation `text`.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "captureevents",
            "detail": "Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is \"false\" unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.\nDefault: \nType: boolean"
          },
          {
            "label": "font",
            "detail": "Sets the annotation text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "height",
            "detail": "Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.\nDefault: \nType: number greater than or equal to 1"
          },
          {
            "label": "hoverlabel",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "hovertext",
            "detail": "Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.\nDefault: \nType: string"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "opacity",
            "detail": "Sets the opacity of the annotation (text + arrow).\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "showarrow",
            "detail": "Determines whether or not the annotation is drawn with an arrow. If \"true\", `text` is placed near the arrow's tail. If \"false\", `text` lines up with the `x` and `y` provided.\nDefault: true\nType: boolean"
          },
          {
            "label": "standoff",
            "detail": "Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "startarrowhead",
            "detail": "Sets the start annotation arrow head style.\nDefault: 1\nType: integer between or equal to 0 and 8"
          },
          {
            "label": "startarrowsize",
            "detail": "Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.\nDefault: 1\nType: number greater than or equal to 0.3"
          },
          {
            "label": "startstandoff",
            "detail": "Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "text",
            "detail": "Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported.\nDefault: \nType: string"
          },
          {
            "label": "textangle",
            "detail": "Sets the angle at which the `text` is drawn with respect to the horizontal.\nDefault: 0\nType: angle"
          },
          {
            "label": "valign",
            "detail": "Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.\nDefault: \"middle\"\nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "visible",
            "detail": "Determines whether or not this annotation is visible.\nDefault: true\nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.\nDefault: \nType: number greater than or equal to 1"
          },
          {
            "label": "x",
            "detail": "Sets the annotation's x position.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "xanchor",
            "detail": "Sets the text box's horizontal position anchor This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the annotation. For example, if `x` is set to 1, `xref` to \"paper\" and `xanchor` to \"right\" then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If \"auto\", the anchor is equivalent to \"center\" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.\nDefault: \"auto\"\nType: enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xshift",
            "detail": "Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.\nDefault: 0\nType: number"
          },
          {
            "label": "y",
            "detail": "Sets the annotation's y position.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "yanchor",
            "detail": "Sets the text box's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the annotation. For example, if `y` is set to 1, `yref` to \"paper\" and `yanchor` to \"top\" then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If \"auto\", the anchor is equivalent to \"middle\" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.\nDefault: \"auto\"\nType: enumerated , one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "yshift",
            "detail": "Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.\nDefault: 0\nType: number"
          },
          {
            "label": "z",
            "detail": "Sets the annotation's z position.\nDefault: \nType: number or categorical coordinate string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "hoverlabel": {
          "items": [
            {
              "label": "bgcolor",
              "detail": "Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.\nDefault: \nType: color"
            },
            {
              "label": "bordercolor",
              "detail": "Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.\nDefault: \nType: color"
            },
            {
              "label": "font",
              "detail": "Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.\nDefault: \nType: Dict containing one or more of the keys listed below."
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "domain": {
        "items": [
          {
            "label": "column",
            "detail": "If there is a layout grid, use the domain for this column in the grid for this scene subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "row",
            "detail": "If there is a layout grid, use the domain for this row in the grid for this scene subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "x",
            "detail": "Sets the horizontal domain of this scene subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          },
          {
            "label": "y",
            "detail": "Sets the vertical domain of this scene subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          }
        ]
      },
      "xaxis": {
        "autorangeoptions": {
          "items": [
            {
              "label": "clipmax",
              "detail": "Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "clipmin",
              "detail": "Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "include",
              "detail": "Ensure this value is included in autorange.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "maxallowed",
              "detail": "Use this value exactly as autorange maximum.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "minallowed",
              "detail": "Use this value exactly as autorange minimum.\nDefault: \nType: number or categorical coordinate string"
            }
          ]
        },
        "items": [
          {
            "label": "autorange",
            "detail": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to \"false\". Using \"min\" applies autorange only to set the minimum. Using \"max\" applies autorange only to set the maximum. Using \"min reversed\" applies autorange only to set the minimum on a reversed axis. Using \"max reversed\" applies autorange only to set the maximum on a reversed axis. Using \"reversed\" applies autorange on both ends and reverses the axis direction.\nDefault: true\nType: enumerated , one of ( true | false | \"reversed\" | \"min reversed\" | \"max reversed\" | \"min\" | \"max\" )"
          },
          {
            "label": "autorangeoptions",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "autotypenumbers",
            "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
          },
          {
            "label": "backgroundcolor",
            "detail": "Sets the background color of this axis' wall.\nDefault: \"rgba(204, 204, 204, 0.5)\"\nType: color"
          },
          {
            "label": "calendar",
            "detail": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
          },
          {
            "label": "categoryarray",
            "detail": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "categoryorder",
            "detail": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to \"total ascending\" or \"total descending\" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" | \"total ascending\" | \"total descending\" | \"min ascending\" | \"min descending\" | \"max ascending\" | \"max descending\" | \"sum ascending\" | \"sum descending\" | \"mean ascending\" | \"mean descending\" | \"median ascending\" | \"median descending\" )"
          },
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"rgb(204, 204, 204)\"\nType: color"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "maxallowed",
            "detail": "Determines the maximum range of this axis.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minallowed",
            "detail": "Determines the minimum range of this axis.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "mirror",
            "detail": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If \"true\", the axis lines are mirrored. If \"ticks\", the axis lines and ticks are mirrored. If \"false\", mirroring is disable. If \"all\", axis lines are mirrored on all shared-axes subplots. If \"allticks\", axis lines and ticks are mirrored on all shared-axes subplots.\nDefault: \nType: enumerated , one of ( true | \"ticks\" | false | \"all\" | \"allticks\" )"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "range",
            "detail": "Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.\nDefault: \nType: Array"
          },
          {
            "label": "rangemode",
            "detail": "If \"normal\", the range is computed in relation to the extrema of the input data. If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data. Applies only to linear axes.\nDefault: \"normal\"\nType: enumerated , one of ( \"normal\" | \"tozero\" | \"nonnegative\" )"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showaxeslabels",
            "detail": "Sets whether or not this axis is labeled\nDefault: true\nType: boolean"
          },
          {
            "label": "showbackground",
            "detail": "Sets whether or not this axis' wall has a background color.\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: \nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: \nType: boolean"
          },
          {
            "label": "showspikes",
            "detail": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "spikecolor",
            "detail": "Sets the color of the spikes.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "spikesides",
            "detail": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.\nDefault: true\nType: boolean"
          },
          {
            "label": "spikethickness",
            "detail": "Sets the thickness (in px) of the spikes.\nDefault: 2\nType: number greater than or equal to 0"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "type",
            "detail": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\nDefault: \"-\"\nType: enumerated , one of ( \"-\" | \"linear\" | \"log\" | \"date\" | \"category\" )"
          },
          {
            "label": "visible",
            "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: \nType: boolean"
          },
          {
            "label": "zeroline",
            "detail": "Determines whether or not a line is drawn at along the 0 value of this axis. If \"true\", the zero line is drawn on top of the grid lines.\nDefault: \nType: boolean"
          },
          {
            "label": "zerolinecolor",
            "detail": "Sets the line color of the zero line.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "zerolinewidth",
            "detail": "Sets the width (in px) of the zero line.\nDefault: 1\nType: number"
          }
        ],
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "text",
              "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "yaxis": {
        "autorangeoptions": {
          "items": [
            {
              "label": "clipmax",
              "detail": "Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "clipmin",
              "detail": "Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "include",
              "detail": "Ensure this value is included in autorange.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "maxallowed",
              "detail": "Use this value exactly as autorange maximum.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "minallowed",
              "detail": "Use this value exactly as autorange minimum.\nDefault: \nType: number or categorical coordinate string"
            }
          ]
        },
        "items": [
          {
            "label": "autorange",
            "detail": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to \"false\". Using \"min\" applies autorange only to set the minimum. Using \"max\" applies autorange only to set the maximum. Using \"min reversed\" applies autorange only to set the minimum on a reversed axis. Using \"max reversed\" applies autorange only to set the maximum on a reversed axis. Using \"reversed\" applies autorange on both ends and reverses the axis direction.\nDefault: true\nType: enumerated , one of ( true | false | \"reversed\" | \"min reversed\" | \"max reversed\" | \"min\" | \"max\" )"
          },
          {
            "label": "autorangeoptions",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "autotypenumbers",
            "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
          },
          {
            "label": "backgroundcolor",
            "detail": "Sets the background color of this axis' wall.\nDefault: \"rgba(204, 204, 204, 0.5)\"\nType: color"
          },
          {
            "label": "calendar",
            "detail": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
          },
          {
            "label": "categoryarray",
            "detail": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "categoryorder",
            "detail": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to \"total ascending\" or \"total descending\" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" | \"total ascending\" | \"total descending\" | \"min ascending\" | \"min descending\" | \"max ascending\" | \"max descending\" | \"sum ascending\" | \"sum descending\" | \"mean ascending\" | \"mean descending\" | \"median ascending\" | \"median descending\" )"
          },
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"rgb(204, 204, 204)\"\nType: color"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "maxallowed",
            "detail": "Determines the maximum range of this axis.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minallowed",
            "detail": "Determines the minimum range of this axis.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "mirror",
            "detail": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If \"true\", the axis lines are mirrored. If \"ticks\", the axis lines and ticks are mirrored. If \"false\", mirroring is disable. If \"all\", axis lines are mirrored on all shared-axes subplots. If \"allticks\", axis lines and ticks are mirrored on all shared-axes subplots.\nDefault: \nType: enumerated , one of ( true | \"ticks\" | false | \"all\" | \"allticks\" )"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "range",
            "detail": "Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.\nDefault: \nType: Array"
          },
          {
            "label": "rangemode",
            "detail": "If \"normal\", the range is computed in relation to the extrema of the input data. If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data. Applies only to linear axes.\nDefault: \"normal\"\nType: enumerated , one of ( \"normal\" | \"tozero\" | \"nonnegative\" )"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showaxeslabels",
            "detail": "Sets whether or not this axis is labeled\nDefault: true\nType: boolean"
          },
          {
            "label": "showbackground",
            "detail": "Sets whether or not this axis' wall has a background color.\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: \nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: \nType: boolean"
          },
          {
            "label": "showspikes",
            "detail": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "spikecolor",
            "detail": "Sets the color of the spikes.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "spikesides",
            "detail": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.\nDefault: true\nType: boolean"
          },
          {
            "label": "spikethickness",
            "detail": "Sets the thickness (in px) of the spikes.\nDefault: 2\nType: number greater than or equal to 0"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "type",
            "detail": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\nDefault: \"-\"\nType: enumerated , one of ( \"-\" | \"linear\" | \"log\" | \"date\" | \"category\" )"
          },
          {
            "label": "visible",
            "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: \nType: boolean"
          },
          {
            "label": "zeroline",
            "detail": "Determines whether or not a line is drawn at along the 0 value of this axis. If \"true\", the zero line is drawn on top of the grid lines.\nDefault: \nType: boolean"
          },
          {
            "label": "zerolinecolor",
            "detail": "Sets the line color of the zero line.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "zerolinewidth",
            "detail": "Sets the width (in px) of the zero line.\nDefault: 1\nType: number"
          }
        ],
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "text",
              "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "polar": {
      "items": [
        {
          "label": "angularaxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "bgcolor",
          "detail": "Set the background color of the subplot\nDefault: \"#fff\"\nType: color"
        },
        {
          "label": "domain",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "gridshape",
          "detail": "Determines if the radial axis grid lines and angular axis line are drawn as \"circular\" sectors or as \"linear\" (polygon) sectors. Has an effect only when the angular axis has `type` \"category\". Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is \"circular\" (so that radial axis scale is the same as the data scale).\nDefault: \"circular\"\nType: enumerated , one of ( \"circular\" | \"linear\" )"
        },
        {
          "label": "hole",
          "detail": "Sets the fraction of the radius to cut out of the polar subplot.\nDefault: 0\nType: number between or equal to 0 and 1"
        },
        {
          "label": "radialaxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "sector",
          "detail": "Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with \"0\" corresponding to rightmost limit of the polar subplot.\nDefault: [0, 360]\nType: Array"
        },
        {
          "label": "uirevision",
          "detail": "Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
        }
      ],
      "angularaxis": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "autotypenumbers",
            "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
          },
          {
            "label": "categoryarray",
            "detail": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "categoryorder",
            "detail": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to \"total ascending\" or \"total descending\" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" | \"total ascending\" | \"total descending\" | \"min ascending\" | \"min descending\" | \"max ascending\" | \"max descending\" | \"sum ascending\" | \"sum descending\" | \"mean ascending\" | \"mean descending\" | \"median ascending\" | \"median descending\" )"
          },
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "direction",
            "detail": "Sets the direction corresponding to positive angles.\nDefault: \"counterclockwise\"\nType: enumerated , one of ( \"counterclockwise\" | \"clockwise\" )"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "layer",
            "detail": "Sets the layer on which this axis is displayed. If \"above traces\", this axis is displayed above all the subplot's traces If \"below traces\", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to \"false\" to show markers and/or text nodes above this axis.\nDefault: \"above traces\"\nType: enumerated , one of ( \"above traces\" | \"below traces\" )"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "period",
            "detail": "Set the angular period. Has an effect only when `angularaxis.type` is \"category\".\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "rotation",
            "detail": "Sets that start position (in degrees) of the angular axis By default, polar subplots with `direction` set to \"counterclockwise\" get a `rotation` of \"0\" which corresponds to due East (like what mathematicians prefer). In turn, polar with `direction` set to \"clockwise\" get a rotation of \"90\" which corresponds to due North (like on a compass),\nDefault: \nType: angle"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: true\nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thetaunit",
            "detail": "Sets the format unit of the formatted \"theta\" values. Has an effect only when `angularaxis.type` is \"linear\".\nDefault: \"degrees\"\nType: enumerated , one of ( \"radians\" | \"degrees\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "type",
            "detail": "Sets the angular axis type. If \"linear\", set `thetaunit` to determine the unit in which axis value are shown. If \"category, use `period` to set the number of integer coordinates around polar axis.\nDefault: \"-\"\nType: enumerated , one of ( \"-\" | \"linear\" | \"category\" )"
          },
          {
            "label": "uirevision",
            "detail": "Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar<N>.uirevision`.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "visible",
            "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: true\nType: boolean"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      },
      "domain": {
        "items": [
          {
            "label": "column",
            "detail": "If there is a layout grid, use the domain for this column in the grid for this polar subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "row",
            "detail": "If there is a layout grid, use the domain for this row in the grid for this polar subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "x",
            "detail": "Sets the horizontal domain of this polar subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          },
          {
            "label": "y",
            "detail": "Sets the vertical domain of this polar subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          }
        ]
      },
      "radialaxis": {
        "autorangeoptions": {
          "items": [
            {
              "label": "clipmax",
              "detail": "Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "clipmin",
              "detail": "Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "include",
              "detail": "Ensure this value is included in autorange.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "maxallowed",
              "detail": "Use this value exactly as autorange maximum.\nDefault: \nType: number or categorical coordinate string"
            },
            {
              "label": "minallowed",
              "detail": "Use this value exactly as autorange minimum.\nDefault: \nType: number or categorical coordinate string"
            }
          ]
        },
        "items": [
          {
            "label": "angle",
            "detail": "Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first `polar.sector` angle.\nDefault: \nType: angle"
          },
          {
            "label": "autorange",
            "detail": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to \"false\". Using \"min\" applies autorange only to set the minimum. Using \"max\" applies autorange only to set the maximum. Using \"min reversed\" applies autorange only to set the minimum on a reversed axis. Using \"max reversed\" applies autorange only to set the maximum on a reversed axis. Using \"reversed\" applies autorange on both ends and reverses the axis direction.\nDefault: true\nType: enumerated , one of ( true | false | \"reversed\" | \"min reversed\" | \"max reversed\" | \"min\" | \"max\" )"
          },
          {
            "label": "autorangeoptions",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "autotypenumbers",
            "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
          },
          {
            "label": "calendar",
            "detail": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
          },
          {
            "label": "categoryarray",
            "detail": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "categoryorder",
            "detail": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to \"total ascending\" or \"total descending\" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" | \"total ascending\" | \"total descending\" | \"min ascending\" | \"min descending\" | \"max ascending\" | \"max descending\" | \"sum ascending\" | \"sum descending\" | \"mean ascending\" | \"mean descending\" | \"median ascending\" | \"median descending\" )"
          },
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "layer",
            "detail": "Sets the layer on which this axis is displayed. If \"above traces\", this axis is displayed above all the subplot's traces If \"below traces\", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to \"false\" to show markers and/or text nodes above this axis.\nDefault: \"above traces\"\nType: enumerated , one of ( \"above traces\" | \"below traces\" )"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "maxallowed",
            "detail": "Determines the maximum range of this axis.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minallowed",
            "detail": "Determines the minimum range of this axis.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "range",
            "detail": "Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.\nDefault: \nType: Array"
          },
          {
            "label": "rangemode",
            "detail": "If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data. If \"normal\", the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).\nDefault: \"tozero\"\nType: enumerated , one of ( \"tozero\" | \"nonnegative\" | \"normal\" )"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: true\nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "side",
            "detail": "Determines on which side of radial axis line the tick and tick labels appear.\nDefault: \"clockwise\"\nType: enumerated , one of ( \"clockwise\" | \"counterclockwise\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "type",
            "detail": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\nDefault: \"-\"\nType: enumerated , one of ( \"-\" | \"linear\" | \"log\" | \"date\" | \"category\" )"
          },
          {
            "label": "uirevision",
            "detail": "Controls persistence of user-driven changes in axis `range`, `autorange`, `angle`, and `title` if in `editable: true` configuration. Defaults to `polar<N>.uirevision`.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "visible",
            "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: true\nType: boolean"
          }
        ],
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "text",
              "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \"\"\nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "ternary": {
      "items": [
        {
          "label": "aaxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "baxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "bgcolor",
          "detail": "Set the background color of the subplot\nDefault: \"#fff\"\nType: color"
        },
        {
          "label": "caxis",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "domain",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "sum",
          "detail": "The number each triplet should sum to, and the maximum range of each axis\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "uirevision",
          "detail": "Controls persistence of user-driven changes in axis `min` and `title`, if not overridden in the individual axes. Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
        }
      ],
      "baxis": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "layer",
            "detail": "Sets the layer on which this axis is displayed. If \"above traces\", this axis is displayed above all the subplot's traces If \"below traces\", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to \"false\" to show markers and/or text nodes above this axis.\nDefault: \"above traces\"\nType: enumerated , one of ( \"above traces\" | \"below traces\" )"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "min",
            "detail": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 6\nType: integer greater than or equal to 1"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: true\nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "uirevision",
            "detail": "Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.\nDefault: \nType: number or categorical coordinate string"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "text",
              "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "aaxis": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "layer",
            "detail": "Sets the layer on which this axis is displayed. If \"above traces\", this axis is displayed above all the subplot's traces If \"below traces\", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to \"false\" to show markers and/or text nodes above this axis.\nDefault: \"above traces\"\nType: enumerated , one of ( \"above traces\" | \"below traces\" )"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "min",
            "detail": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 6\nType: integer greater than or equal to 1"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: true\nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "uirevision",
            "detail": "Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.\nDefault: \nType: number or categorical coordinate string"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "text",
              "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "caxis": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "color",
            "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "hoverformat",
            "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "layer",
            "detail": "Sets the layer on which this axis is displayed. If \"above traces\", this axis is displayed above all the subplot's traces If \"below traces\", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to \"false\" to show markers and/or text nodes above this axis.\nDefault: \"above traces\"\nType: enumerated , one of ( \"above traces\" | \"below traces\" )"
          },
          {
            "label": "linecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "linewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "min",
            "detail": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 6\nType: integer greater than or equal to 1"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: true\nType: boolean"
          },
          {
            "label": "showline",
            "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "uirevision",
            "detail": "Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.\nDefault: \nType: number or categorical coordinate string"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "text",
              "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      },
      "domain": {
        "items": [
          {
            "label": "column",
            "detail": "If there is a layout grid, use the domain for this column in the grid for this ternary subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "row",
            "detail": "If there is a layout grid, use the domain for this row in the grid for this ternary subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "x",
            "detail": "Sets the horizontal domain of this ternary subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          },
          {
            "label": "y",
            "detail": "Sets the vertical domain of this ternary subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          }
        ]
      }
    },
    "grid": {
      "items": [
        {
          "label": "columns",
          "detail": "The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.\nDefault: \nType: integer greater than or equal to 1"
        },
        {
          "label": "domain",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "pattern",
          "detail": "If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: \"coupled\" gives one x axis per column and one y axis per row. \"independent\" uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.\nDefault: \"coupled\"\nType: enumerated , one of ( \"independent\" | \"coupled\" )"
        },
        {
          "label": "roworder",
          "detail": "Is the first row the top or the bottom? Note that columns are always enumerated from left to right.\nDefault: \"top to bottom\"\nType: enumerated , one of ( \"top to bottom\" | \"bottom to top\" )"
        },
        {
          "label": "rows",
          "detail": "The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.\nDefault: \nType: integer greater than or equal to 1"
        },
        {
          "label": "subplots",
          "detail": "Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like \"xy\" or \"x3y2\", or \"\" to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.\nDefault: \nType: Array"
        },
        {
          "label": "xaxes",
          "detail": "Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like \"x\", \"x2\", etc., or \"\" to not put an x axis in that column. Entries other than \"\" must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.\nDefault: \nType: Array"
        },
        {
          "label": "xgap",
          "detail": "Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.\nDefault: \nType: number between or equal to 0 and 1"
        },
        {
          "label": "xside",
          "detail": "Sets where the x axis labels and titles go. \"bottom\" means the very bottom of the grid. \"bottom plot\" is the lowest plot that each x axis is used in. \"top\" and \"top plot\" are similar.\nDefault: \"bottom plot\"\nType: enumerated , one of ( \"bottom\" | \"bottom plot\" | \"top plot\" | \"top\" )"
        },
        {
          "label": "yaxes",
          "detail": "Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like \"y\", \"y2\", etc., or \"\" to not put a y axis in that row. Entries other than \"\" must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.\nDefault: \nType: Array"
        },
        {
          "label": "ygap",
          "detail": "Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.\nDefault: \nType: number between or equal to 0 and 1"
        },
        {
          "label": "yside",
          "detail": "Sets where the y axis labels and titles go. \"left\" means the very left edge of the grid. \"left plot\" is the leftmost plot that each y axis is used in. \"right\" and \"right plot\" are similar.\nDefault: \"left plot\"\nType: enumerated , one of ( \"left\" | \"left plot\" | \"right plot\" | \"right\" )"
        }
      ],
      "domain": {
        "items": [
          {
            "label": "x",
            "detail": "Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.\nDefault: [0, 1]\nType: Array"
          },
          {
            "label": "y",
            "detail": "Sets the vertical domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.\nDefault: [0, 1]\nType: Array"
          }
        ]
      }
    },
    "yaxis": {
      "autorangeoptions": {
        "items": [
          {
            "label": "clipmax",
            "detail": "Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "clipmin",
            "detail": "Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "include",
            "detail": "Ensure this value is included in autorange.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "maxallowed",
            "detail": "Use this value exactly as autorange maximum.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "minallowed",
            "detail": "Use this value exactly as autorange minimum.\nDefault: \nType: number or categorical coordinate string"
          }
        ]
      },
      "items": [
        {
          "label": "anchor",
          "detail": "If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to \"free\", this axis' position is determined by `position`.\nDefault: \nType: enumerated , one of ( \"free\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "automargin",
          "detail": "Examples: \"height\", \"width\", \"height+width\", \"height+width+left\", \"true\"\nDefault: \nType: flaglist string. Any combination of \"height\", \"width\", \"left\", \"right\", \"top\", \"bottom\" joined with a \"+\" OR true or false."
        },
        {
          "label": "autorange",
          "detail": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to \"false\". Using \"min\" applies autorange only to set the minimum. Using \"max\" applies autorange only to set the maximum. Using \"min reversed\" applies autorange only to set the minimum on a reversed axis. Using \"max reversed\" applies autorange only to set the maximum on a reversed axis. Using \"reversed\" applies autorange on both ends and reverses the axis direction.\nDefault: true\nType: enumerated , one of ( true | false | \"reversed\" | \"min reversed\" | \"max reversed\" | \"min\" | \"max\" )"
        },
        {
          "label": "autorangeoptions",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "autoshift",
          "detail": "Automatically reposition the axis to avoid overlap with other axes with the same `overlaying` value. This repositioning will account for any `shift` amount applied to other axes on the same side with `autoshift` is set to true. Only has an effect if `anchor` is set to \"free\".\nDefault: \nType: boolean"
        },
        {
          "label": "autotypenumbers",
          "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
        },
        {
          "label": "calendar",
          "detail": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
        },
        {
          "label": "categoryarray",
          "detail": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "categoryorder",
          "detail": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to \"total ascending\" or \"total descending\" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" | \"total ascending\" | \"total descending\" | \"min ascending\" | \"min descending\" | \"max ascending\" | \"max descending\" | \"sum ascending\" | \"sum descending\" | \"mean ascending\" | \"mean descending\" | \"median ascending\" | \"median descending\" )"
        },
        {
          "label": "color",
          "detail": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "constrain",
          "detail": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the \"range\", or by decreasing the \"domain\". Default is \"domain\" for axes containing image traces, \"range\" otherwise.\nDefault: \nType: enumerated , one of ( \"range\" | \"domain\" )"
        },
        {
          "label": "constraintoward",
          "detail": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are \"left\", \"center\" (default), and \"right\" for x axes, and \"top\", \"middle\" (default), and \"bottom\" for y axes.\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" | \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "dividercolor",
          "detail": "Sets the color of the dividers Only has an effect on \"multicategory\" axes.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "dividerwidth",
          "detail": "Sets the width (in px) of the dividers Only has an effect on \"multicategory\" axes.\nDefault: 1\nType: number"
        },
        {
          "label": "domain",
          "detail": "Sets the domain of this axis (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "fixedrange",
          "detail": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.\nDefault: \nType: boolean"
        },
        {
          "label": "gridcolor",
          "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
        },
        {
          "label": "griddash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "gridwidth",
          "detail": "Sets the width (in px) of the grid lines.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "hoverformat",
          "detail": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "layer",
          "detail": "Sets the layer on which this axis is displayed. If \"above traces\", this axis is displayed above all the subplot's traces If \"below traces\", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to \"false\" to show markers and/or text nodes above this axis.\nDefault: \"above traces\"\nType: enumerated , one of ( \"above traces\" | \"below traces\" )"
        },
        {
          "label": "linecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "linewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "matches",
          "detail": "If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.\nDefault: \nType: enumerated , one of ( \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "maxallowed",
          "detail": "Determines the maximum range of this axis.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "minallowed",
          "detail": "Determines the minimum range of this axis.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "minor",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "mirror",
          "detail": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If \"true\", the axis lines are mirrored. If \"ticks\", the axis lines and ticks are mirrored. If \"false\", mirroring is disable. If \"all\", axis lines are mirrored on all shared-axes subplots. If \"allticks\", axis lines and ticks are mirrored on all shared-axes subplots.\nDefault: \nType: enumerated , one of ( true | \"ticks\" | false | \"all\" | \"allticks\" )"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "overlaying",
          "detail": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If \"false\", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.\nDefault: \nType: enumerated , one of ( \"free\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "position",
          "detail": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to \"free\".\nDefault: 0\nType: number between or equal to 0 and 1"
        },
        {
          "label": "range",
          "detail": "Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.\nDefault: \nType: Array"
        },
        {
          "label": "rangebreaks",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "rangemode",
          "detail": "If \"normal\", the range is computed in relation to the extrema of the input data. If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data. Applies only to linear axes.\nDefault: \"normal\"\nType: enumerated , one of ( \"normal\" | \"tozero\" | \"nonnegative\" )"
        },
        {
          "label": "scaleanchor",
          "detail": "If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: \"x\"}, xaxis2: {scaleanchor: \"y\"}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: \"x\"}, xaxis: {scaleanchor: \"y\"}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: \"x\"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).\nDefault: \nType: enumerated , one of ( \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" | false )"
        },
        {
          "label": "scaleratio",
          "detail": "If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "shift",
          "detail": "Moves the axis a given number of pixels from where it would have been otherwise. Accepts both positive and negative values, which will shift the axis either right or left, respectively. If `autoshift` is set to true, then this defaults to a padding of -3 if `side` is set to \"left\". and defaults to +3 if `side` is set to \"right\". Defaults to 0 if `autoshift` is set to false. Only has an effect if `anchor` is set to \"free\".\nDefault: \nType: number"
        },
        {
          "label": "showdividers",
          "detail": "Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on \"multicategory\" axes.\nDefault: true\nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showgrid",
          "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: \nType: boolean"
        },
        {
          "label": "showline",
          "detail": "Determines whether or not a line bounding this axis is drawn.\nDefault: \nType: boolean"
        },
        {
          "label": "showspikes",
          "detail": "Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest\nDefault: \nType: boolean"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "side",
          "detail": "Determines whether a x (y) axis is positioned at the \"bottom\" (\"left\") or \"top\" (\"right\") of the plotting area.\nDefault: \nType: enumerated , one of ( \"top\" | \"bottom\" | \"left\" | \"right\" )"
        },
        {
          "label": "spikecolor",
          "detail": "Sets the spike color. If undefined, will use the series color\nDefault: \nType: color"
        },
        {
          "label": "spikedash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"dash\"\nType: string"
        },
        {
          "label": "spikemode",
          "detail": "Examples: \"toaxis\", \"across\", \"toaxis+across\", \"toaxis+across+marker\"\nDefault: \nType: flaglist string. Any combination of \"toaxis\", \"across\", \"marker\" joined with a \"+\""
        },
        {
          "label": "spikesnap",
          "detail": "Determines whether spikelines are stuck to the cursor or to the closest datapoints.\nDefault: \"hovered data\"\nType: enumerated , one of ( \"data\" | \"cursor\" | \"hovered data\" )"
        },
        {
          "label": "spikethickness",
          "detail": "Sets the width (in px) of the zero line.\nDefault: 3\nType: number"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the tick font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabelmode",
          "detail": "Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` \"date\" When set to \"period\", tick labels are drawn in the middle of the period between ticks.\nDefault: \"instant\"\nType: enumerated , one of ( \"instant\" | \"period\" )"
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". Otherwise on \"category\" and \"multicategory\" axes the default is \"allow\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to \"period\". Similarly left or right has no effect on y axes or when `ticklabelmode` is set to \"period\". Has no effect on \"multicategory\" axes or when `tickson` is set to \"boundaries\". When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided). If \"sync\", the number of ticks will sync with the overlayed axis set by `overlaying` property.\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" | \"sync\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "tickson",
          "detail": "Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` \"category\" or \"multicategory\". When set to \"boundaries\", ticks and grid lines are drawn half a category to the left/bottom of labels.\nDefault: \"labels\"\nType: enumerated , one of ( \"labels\" | \"boundaries\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "type",
          "detail": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\nDefault: \"-\"\nType: enumerated , one of ( \"-\" | \"linear\" | \"log\" | \"date\" | \"category\" | \"multicategory\" )"
        },
        {
          "label": "uirevision",
          "detail": "Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "visible",
          "detail": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false\nDefault: \nType: boolean"
        },
        {
          "label": "zeroline",
          "detail": "Determines whether or not a line is drawn at along the 0 value of this axis. If \"true\", the zero line is drawn on top of the grid lines.\nDefault: \nType: boolean"
        },
        {
          "label": "zerolinecolor",
          "detail": "Sets the line color of the zero line.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "zerolinewidth",
          "detail": "Sets the width (in px) of the zero line.\nDefault: 1\nType: number"
        }
      ],
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "rangebreaks": {
        "items": [
          {
            "label": "bounds",
            "detail": "Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.\nDefault: \nType: Array"
          },
          {
            "label": "dvalue",
            "detail": "Sets the size of each `values` item. The default is one day in milliseconds.\nDefault: 86400000\nType: number greater than or equal to 0"
          },
          {
            "label": "enabled",
            "detail": "Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for \"date\" axis type.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "pattern",
            "detail": "Determines a pattern on the time line that generates breaks. If \"day of week\" - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If \"hour\" - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] } or simply { bounds: ['sat', 'mon'] } breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] } breaks from 5pm to 8am (i.e. skips non-work hours).\nDefault: \nType: enumerated , one of ( \"day of week\" | \"hour\" | \"\" )"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "values",
            "detail": "Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.\nDefault: \nType: Array"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "standoff",
            "detail": "Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "text",
            "detail": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      },
      "minor": {
        "items": [
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "gridcolor",
            "detail": "Sets the color of the grid lines.\nDefault: \"#eee\"\nType: color"
          },
          {
            "label": "griddash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "gridwidth",
            "detail": "Sets the width (in px) of the grid lines.\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 5\nType: integer greater than or equal to 0"
          },
          {
            "label": "showgrid",
            "detail": "Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.\nDefault: \nType: boolean"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: \nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "transition": {
      "items": [
        {
          "label": "duration",
          "detail": "The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.\nDefault: 500\nType: number greater than or equal to 0"
        },
        {
          "label": "easing",
          "detail": "The easing function used for the transition\nDefault: \"cubic-in-out\"\nType: enumerated , one of ( \"linear\" | \"quad\" | \"cubic\" | \"sin\" | \"exp\" | \"circle\" | \"elastic\" | \"back\" | \"bounce\" | \"linear-in\" | \"quad-in\" | \"cubic-in\" | \"sin-in\" | \"exp-in\" | \"circle-in\" | \"elastic-in\" | \"back-in\" | \"bounce-in\" | \"linear-out\" | \"quad-out\" | \"cubic-out\" | \"sin-out\" | \"exp-out\" | \"circle-out\" | \"elastic-out\" | \"back-out\" | \"bounce-out\" | \"linear-in-out\" | \"quad-in-out\" | \"cubic-in-out\" | \"sin-in-out\" | \"exp-in-out\" | \"circle-in-out\" | \"elastic-in-out\" | \"back-in-out\" | \"bounce-in-out\" )"
        },
        {
          "label": "ordering",
          "detail": "Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.\nDefault: \"layout first\"\nType: enumerated , one of ( \"layout first\" | \"traces first\" )"
        }
      ]
    },
    "mapbox": {
      "items": [
        {
          "label": "accesstoken",
          "detail": "Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.\nDefault: \nType: string"
        },
        {
          "label": "bearing",
          "detail": "Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).\nDefault: 0\nType: number"
        },
        {
          "label": "bounds",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "center",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "domain",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "layers",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "pitch",
          "detail": "Sets the pitch angle of the map (in degrees, where \"0\" means perpendicular to the surface of the map) (mapbox.pitch).\nDefault: 0\nType: number"
        },
        {
          "label": "style",
          "detail": "Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`. These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option. Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec The built-in plotly.js styles objects are: carto-darkmatter, carto-positron, open-street-map, stamen-terrain, stamen-toner, stamen-watercolor, white-bg The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets Mapbox style URLs are of the form: mapbox://mapbox.mapbox-<name>-<version>\nDefault: basic\nType: number or categorical coordinate string"
        },
        {
          "label": "uirevision",
          "detail": "Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "zoom",
          "detail": "Sets the zoom level of the map (mapbox.zoom).\nDefault: 1\nType: number"
        }
      ],
      "domain": {
        "items": [
          {
            "label": "column",
            "detail": "If there is a layout grid, use the domain for this column in the grid for this mapbox subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "row",
            "detail": "If there is a layout grid, use the domain for this row in the grid for this mapbox subplot .\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "x",
            "detail": "Sets the horizontal domain of this mapbox subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          },
          {
            "label": "y",
            "detail": "Sets the vertical domain of this mapbox subplot (in plot fraction).\nDefault: [0, 1]\nType: Array"
          }
        ]
      },
      "center": {
        "items": [
          {
            "label": "lat",
            "detail": "Sets the latitude of the center of the map (in degrees North).\nDefault: 0\nType: number"
          },
          {
            "label": "lon",
            "detail": "Sets the longitude of the center of the map (in degrees East).\nDefault: 0\nType: number"
          }
        ]
      },
      "bounds": {
        "items": [
          {
            "label": "east",
            "detail": "Sets the maximum longitude of the map (in degrees East) if `west`, `south` and `north` are declared.\nDefault: \nType: number"
          },
          {
            "label": "north",
            "detail": "Sets the maximum latitude of the map (in degrees North) if `east`, `west` and `south` are declared.\nDefault: \nType: number"
          },
          {
            "label": "south",
            "detail": "Sets the minimum latitude of the map (in degrees North) if `east`, `west` and `north` are declared.\nDefault: \nType: number"
          },
          {
            "label": "west",
            "detail": "Sets the minimum longitude of the map (in degrees East) if `east`, `south` and `north` are declared.\nDefault: \nType: number"
          }
        ]
      },
      "layers": {
        "items": [
          {
            "label": "below",
            "detail": "Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer.\nDefault: \nType: string"
          },
          {
            "label": "circle",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "color",
            "detail": "Sets the primary layer color. If `type` is \"circle\", color corresponds to the circle color (mapbox.layer.paint.circle-color) If `type` is \"line\", color corresponds to the line color (mapbox.layer.paint.line-color) If `type` is \"fill\", color corresponds to the fill color (mapbox.layer.paint.fill-color) If `type` is \"symbol\", color corresponds to the icon color (mapbox.layer.paint.icon-color)\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "coordinates",
            "detail": "Sets the coordinates array contains [longitude, latitude] pairs for the image corners listed in clockwise order: top left, top right, bottom right, bottom left. Only has an effect for \"image\" `sourcetype`.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "fill",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "line",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "maxzoom",
            "detail": "Sets the maximum zoom level (mapbox.layer.maxzoom). At zoom levels equal to or greater than the maxzoom, the layer will be hidden.\nDefault: 24\nType: number between or equal to 0 and 24"
          },
          {
            "label": "minzoom",
            "detail": "Sets the minimum zoom level (mapbox.layer.minzoom). At zoom levels less than the minzoom, the layer will be hidden.\nDefault: 0\nType: number between or equal to 0 and 24"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "opacity",
            "detail": "Sets the opacity of the layer. If `type` is \"circle\", opacity corresponds to the circle opacity (mapbox.layer.paint.circle-opacity) If `type` is \"line\", opacity corresponds to the line opacity (mapbox.layer.paint.line-opacity) If `type` is \"fill\", opacity corresponds to the fill opacity (mapbox.layer.paint.fill-opacity) If `type` is \"symbol\", opacity corresponds to the icon/text opacity (mapbox.layer.paint.text-opacity)\nDefault: 1\nType: number between or equal to 0 and 1"
          },
          {
            "label": "source",
            "detail": "Sets the source data for this layer (mapbox.layer.source). When `sourcetype` is set to \"geojson\", `source` can be a URL to a GeoJSON or a GeoJSON object. When `sourcetype` is set to \"vector\" or \"raster\", `source` can be a URL or an array of tile URLs. When `sourcetype` is set to \"image\", `source` can be a URL to an image.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "sourceattribution",
            "detail": "Sets the attribution for this source.\nDefault: \nType: string"
          },
          {
            "label": "sourcelayer",
            "detail": "Specifies the layer to use from a vector tile source (mapbox.layer.source-layer). Required for \"vector\" source type that supports multiple layers.\nDefault: \"\"\nType: string"
          },
          {
            "label": "sourcetype",
            "detail": "Sets the source type for this layer, that is the type of the layer data.\nDefault: \"geojson\"\nType: enumerated , one of ( \"geojson\" | \"vector\" | \"raster\" | \"image\" )"
          },
          {
            "label": "symbol",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "type",
            "detail": "Sets the layer type, that is the how the layer data set in `source` will be rendered With `sourcetype` set to \"geojson\", the following values are allowed: \"circle\", \"line\", \"fill\" and \"symbol\". but note that \"line\" and \"fill\" are not compatible with Point GeoJSON geometries. With `sourcetype` set to \"vector\", the following values are allowed: \"circle\", \"line\", \"fill\" and \"symbol\". With `sourcetype` set to \"raster\" or `\"image\"`, only the \"raster\" value is allowed.\nDefault: \"circle\"\nType: enumerated , one of ( \"circle\" | \"line\" | \"fill\" | \"symbol\" | \"raster\" )"
          },
          {
            "label": "visible",
            "detail": "Determines whether this layer is displayed\nDefault: true\nType: boolean"
          }
        ],
        "line": {
          "items": [
            {
              "label": "dash",
              "detail": "Sets the length of dashes and gaps (mapbox.layer.paint.line-dasharray). Has an effect only when `type` is set to \"line\".\nDefault: \nType: data array, Vector"
            },
            {
              "label": "width",
              "detail": "Sets the line width (mapbox.layer.paint.line-width). Has an effect only when `type` is set to \"line\".\nDefault: 2\nType: number"
            }
          ]
        },
        "circle": {
          "items": [
            {
              "label": "radius",
              "detail": "Sets the circle radius (mapbox.layer.paint.circle-radius). Has an effect only when `type` is set to \"circle\".\nDefault: 15\nType: number"
            }
          ]
        },
        "symbol": {
          "items": [
            {
              "label": "icon",
              "detail": "Sets the symbol icon image (mapbox.layer.layout.icon-image). Full list: https://www.mapbox.com/maki-icons/\nDefault: \"marker\"\nType: string"
            },
            {
              "label": "iconsize",
              "detail": "Sets the symbol icon size (mapbox.layer.layout.icon-size). Has an effect only when `type` is set to \"symbol\".\nDefault: 10\nType: number"
            },
            {
              "label": "placement",
              "detail": "Sets the symbol and/or text placement (mapbox.layer.layout.symbol-placement). If `placement` is \"point\", the label is placed where the geometry is located If `placement` is \"line\", the label is placed along the line of the geometry If `placement` is \"line-center\", the label is placed on the center of the geometry\nDefault: \"point\"\nType: enumerated , one of ( \"point\" | \"line\" | \"line-center\" )"
            },
            {
              "label": "text",
              "detail": "Sets the symbol text (mapbox.layer.layout.text-field).\nDefault: \"\"\nType: string"
            },
            {
              "label": "textfont",
              "detail": "Sets the icon text font (color=mapbox.layer.paint.text-color, size=mapbox.layer.layout.text-size). Has an effect only when `type` is set to \"symbol\".\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "textposition",
              "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
            }
          ],
          "textfont": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \"Open Sans Regular, Arial Unicode MS Regular\"\nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        },
        "fill": {
          "items": [
            {
              "label": "outlinecolor",
              "detail": "Sets the fill outline color (mapbox.layer.paint.fill-outline-color). Has an effect only when `type` is set to \"fill\".\nDefault: \"#444\"\nType: color"
            }
          ]
        }
      }
    },
    "images": {
      "items": [
        {
          "label": "layer",
          "detail": "Specifies whether images are drawn below or above traces. When `xref` and `yref` are both set to `paper`, image is drawn below the entire plot area.\nDefault: \"above\"\nType: enumerated , one of ( \"below\" | \"above\" )"
        },
        {
          "label": "name",
          "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the image.\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "sizex",
          "detail": "Sets the image container size horizontally. The image will be sized based on the `position` value. When `xref` is set to `paper`, units are sized relative to the plot width. When `xref` ends with ` domain`, units are sized relative to the axis width.\nDefault: 0\nType: number"
        },
        {
          "label": "sizey",
          "detail": "Sets the image container size vertically. The image will be sized based on the `position` value. When `yref` is set to `paper`, units are sized relative to the plot height. When `yref` ends with ` domain`, units are sized relative to the axis height.\nDefault: 0\nType: number"
        },
        {
          "label": "sizing",
          "detail": "Specifies which dimension of the image to constrain.\nDefault: \"contain\"\nType: enumerated , one of ( \"fill\" | \"contain\" | \"stretch\" )"
        },
        {
          "label": "source",
          "detail": "Specifies the URL of the image to be used. The URL must be accessible from the domain where the plot code is run, and can be either relative or absolute.\nDefault: \nType: string"
        },
        {
          "label": "templateitemname",
          "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this image is visible.\nDefault: true\nType: boolean"
        },
        {
          "label": "x",
          "detail": "Sets the image's x position. When `xref` is set to `paper`, units are sized relative to the plot height. See `xref` for more info\nDefault: 0\nType: number or categorical coordinate string"
        },
        {
          "label": "xanchor",
          "detail": "Sets the anchor for the x position\nDefault: \"left\"\nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xref",
          "detail": "Sets the images's x coordinate axis. If set to a x axis id (e.g. \"x\" or \"x2\"), the `x` position refers to a x coordinate. If set to \"paper\", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the left (right). If set to a x axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., \"x2 domain\" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.\nDefault: \"paper\"\nType: enumerated , one of ( \"paper\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        },
        {
          "label": "y",
          "detail": "Sets the image's y position. When `yref` is set to `paper`, units are sized relative to the plot height. See `yref` for more info\nDefault: 0\nType: number or categorical coordinate string"
        },
        {
          "label": "yanchor",
          "detail": "Sets the anchor for the y position.\nDefault: \"top\"\nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "yref",
          "detail": "Sets the images's y coordinate axis. If set to a y axis id (e.g. \"y\" or \"y2\"), the `y` position refers to a y coordinate. If set to \"paper\", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the bottom (top). If set to a y axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., \"y2 domain\" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.\nDefault: \"paper\"\nType: enumerated , one of ( \"paper\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )"
        }
      ]
    },
    "items": [
      {
        "label": "title",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "margin",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autosize",
        "detail": "Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.\nDefault: \nType: boolean"
      },
      {
        "label": "width",
        "detail": "Sets the plot's width (in px).\nDefault: 700\nType: number greater than or equal to 10"
      },
      {
        "label": "height",
        "detail": "Sets the plot's height (in px).\nDefault: 450\nType: number greater than or equal to 10"
      },
      {
        "label": "font",
        "detail": "Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uniformtext",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "separators",
        "detail": "Sets the decimal and thousand separators. For example, \". \" puts a '.' before decimals and a space between thousands. In English locales, dflt is \".,\" but other locales may alter this default.\nDefault: \nType: string"
      },
      {
        "label": "paper_bgcolor",
        "detail": "Sets the background color of the paper where the graph is drawn.\nDefault: \"#fff\"\nType: color"
      },
      {
        "label": "plot_bgcolor",
        "detail": "Sets the background color of the plotting area in-between x and y axes.\nDefault: \"#fff\"\nType: color"
      },
      {
        "label": "autotypenumbers",
        "detail": "Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.\nDefault: \"convert types\"\nType: enumerated , one of ( \"convert types\" | \"strict\" )"
      },
      {
        "label": "colorscale",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "colorway",
        "detail": "Sets the default trace colors.\nDefault: [#1f77b4, #ff7f0e, #2ca02c, #d62728, #9467bd, #8c564b, #e377c2, #7f7f7f, #bcbd22, #17becf]\nType: colorlist"
      },
      {
        "label": "coloraxis",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "modebar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hovermode",
        "detail": "Determines the mode of hover interactions. If \"closest\", a single hoverlabel will appear for the \"closest\" point within the `hoverdistance`. If \"x\" (or \"y\"), multiple hoverlabels will appear for multiple points at the \"closest\" x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If \"x unified\" (or \"y unified\"), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.\nDefault: \"closest\"\nType: enumerated , one of ( \"x\" | \"y\" | \"closest\" | false | \"x unified\" | \"y unified\" )"
      },
      {
        "label": "clickmode",
        "detail": "Examples: \"event\", \"select\", \"event+select\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"event\", \"select\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "dragmode",
        "detail": "Determines the mode of drag interactions. \"select\" and \"lasso\" apply only to scatter traces with markers or text. \"orbit\" and \"turntable\" apply only to 3D scenes.\nDefault: \"zoom\"\nType: enumerated , one of ( \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"drawclosedpath\" | \"drawopenpath\" | \"drawline\" | \"drawrect\" | \"drawcircle\" | \"orbit\" | \"turntable\" | false )"
      },
      {
        "label": "selectdirection",
        "detail": "When `dragmode` is set to \"select\", this limits the selection of the drag to horizontal, vertical or diagonal. \"h\" only allows horizontal selection, \"v\" only vertical, \"d\" only diagonal and \"any\" sets no limit.\nDefault: \"any\"\nType: enumerated , one of ( \"h\" | \"v\" | \"d\" | \"any\" )"
      },
      {
        "label": "activeselection",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "newselection",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverdistance",
        "detail": "Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.\nDefault: 20\nType: integer greater than or equal to -1"
      },
      {
        "label": "spikedistance",
        "detail": "Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.\nDefault: -1\nType: integer greater than or equal to -1"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "transition",
        "detail": "Sets transition options used during Plotly.react updates.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "datarevision",
        "detail": "If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "uirevision",
        "detail": "Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision=\"time\"` and `yaxis.uirevision=\"cost\"`. Then if only the y data is changed, you can update `yaxis.uirevision=\"quantity\"` and the y axis range will reset but the x axis range will retain any user-driven zoom.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "editrevision",
        "detail": "Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selectionrevision",
        "detail": "Controls persistence of user-driven changes in selected points from all traces.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "template",
        "detail": "Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace. Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "computed",
        "detail": "Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in \"full-json\" mode.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "grid",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "calendar",
        "detail": "Sets the default calendar system to use for interpreting and displaying dates throughout the plot.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "minreducedheight",
        "detail": "Minimum height of the plot with margin.automargin applied (in px)\nDefault: 64\nType: number greater than or equal to 2"
      },
      {
        "label": "minreducedwidth",
        "detail": "Minimum width of the plot with margin.automargin applied (in px)\nDefault: 64\nType: number greater than or equal to 2"
      },
      {
        "label": "xaxis",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "yaxis",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "ternary",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "scene",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "geo",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "mapbox",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "polar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "smith",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "annotations",
        "detail": "An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
      },
      {
        "label": "shapes",
        "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
      },
      {
        "label": "newshape",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "activeshape",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "images",
        "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
      },
      {
        "label": "updatemenus",
        "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
      },
      {
        "label": "sliders",
        "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
      },
      {
        "label": "selections",
        "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
      },
      {
        "label": "hidesources",
        "detail": "Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).\nDefault: \nType: boolean"
      },
      {
        "label": "scattergap",
        "detail": "Sets the gap (in plot fraction) between scatter points of adjacent location coordinates. Defaults to `bargap`.\nDefault: \nType: number between or equal to 0 and 1"
      },
      {
        "label": "scattermode",
        "detail": "Determines how scatter points at the same location coordinate are displayed on the graph. With \"group\", the scatter points are plotted next to one another centered around the shared location. With \"overlay\", the scatter points are plotted over one another, you might need to reduce \"opacity\" to see multiple scatter points.\nDefault: \"overlay\"\nType: enumerated , one of ( \"group\" | \"overlay\" )"
      },
      {
        "label": "bargap",
        "detail": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.\nDefault: \nType: number between or equal to 0 and 1"
      },
      {
        "label": "bargroupgap",
        "detail": "Sets the gap (in plot fraction) between bars of the same location coordinate.\nDefault: 0\nType: number between or equal to 0 and 1"
      },
      {
        "label": "barmode",
        "detail": "Determines how bars at the same location coordinate are displayed on the graph. With \"stack\", the bars are stacked on top of one another With \"relative\", the bars are stacked on top of one another, with negative values below the axis, positive values above With \"group\", the bars are plotted next to one another centered around the shared location. With \"overlay\", the bars are plotted over one another, you might need to reduce \"opacity\" to see multiple bars.\nDefault: \"group\"\nType: enumerated , one of ( \"stack\" | \"group\" | \"overlay\" | \"relative\" )"
      },
      {
        "label": "barnorm",
        "detail": "Sets the normalization for bar traces on the graph. With \"fraction\", the value of each bar is divided by the sum of all values at that location coordinate. \"percent\" is the same but multiplied by 100 to show percentages.\nDefault: \"\"\nType: enumerated , one of ( \"\" | \"fraction\" | \"percent\" )"
      },
      {
        "label": "extendpiecolors",
        "detail": "If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.\nDefault: true\nType: boolean"
      },
      {
        "label": "hiddenlabels",
        "detail": "hiddenlabels is the funnelarea & pie chart analog of visible:'legendonly' but it can contain many labels, and can simultaneously hide slices from several pies/funnelarea charts\nDefault: \nType: data array, Vector"
      },
      {
        "label": "piecolorway",
        "detail": "Sets the default pie slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendpiecolors`.\nDefault: \nType: colorlist"
      },
      {
        "label": "boxgap",
        "detail": "Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have \"width\" set.\nDefault: 0.3\nType: number between or equal to 0 and 1"
      },
      {
        "label": "boxgroupgap",
        "detail": "Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have \"width\" set.\nDefault: 0.3\nType: number between or equal to 0 and 1"
      },
      {
        "label": "boxmode",
        "detail": "Determines how boxes at the same location coordinate are displayed on the graph. If \"group\", the boxes are plotted next to one another centered around the shared location. If \"overlay\", the boxes are plotted over one another, you might need to set \"opacity\" to see them multiple boxes. Has no effect on traces that have \"width\" set.\nDefault: \"overlay\"\nType: enumerated , one of ( \"group\" | \"overlay\" )"
      },
      {
        "label": "violingap",
        "detail": "Sets the gap (in plot fraction) between violins of adjacent location coordinates. Has no effect on traces that have \"width\" set.\nDefault: 0.3\nType: number between or equal to 0 and 1"
      },
      {
        "label": "violingroupgap",
        "detail": "Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have \"width\" set.\nDefault: 0.3\nType: number between or equal to 0 and 1"
      },
      {
        "label": "violinmode",
        "detail": "Determines how violins at the same location coordinate are displayed on the graph. If \"group\", the violins are plotted next to one another centered around the shared location. If \"overlay\", the violins are plotted over one another, you might need to set \"opacity\" to see them multiple violins. Has no effect on traces that have \"width\" set.\nDefault: \"overlay\"\nType: enumerated , one of ( \"group\" | \"overlay\" )"
      },
      {
        "label": "bargap",
        "detail": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.\nDefault: \nType: number between or equal to 0 and 1"
      },
      {
        "label": "bargroupgap",
        "detail": "Sets the gap (in plot fraction) between bars of the same location coordinate.\nDefault: 0\nType: number between or equal to 0 and 1"
      },
      {
        "label": "barmode",
        "detail": "Determines how bars at the same location coordinate are displayed on the graph. With \"stack\", the bars are stacked on top of one another With \"relative\", the bars are stacked on top of one another, with negative values below the axis, positive values above With \"group\", the bars are plotted next to one another centered around the shared location. With \"overlay\", the bars are plotted over one another, you might need to reduce \"opacity\" to see multiple bars.\nDefault: \"group\"\nType: enumerated , one of ( \"stack\" | \"group\" | \"overlay\" | \"relative\" )"
      },
      {
        "label": "barnorm",
        "detail": "Sets the normalization for bar traces on the graph. With \"fraction\", the value of each bar is divided by the sum of all values at that location coordinate. \"percent\" is the same but multiplied by 100 to show percentages.\nDefault: \"\"\nType: enumerated , one of ( \"\" | \"fraction\" | \"percent\" )"
      },
      {
        "label": "boxgap",
        "detail": "Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have \"width\" set.\nDefault: 0.3\nType: number between or equal to 0 and 1"
      },
      {
        "label": "boxgroupgap",
        "detail": "Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have \"width\" set.\nDefault: 0.3\nType: number between or equal to 0 and 1"
      },
      {
        "label": "boxmode",
        "detail": "Determines how boxes at the same location coordinate are displayed on the graph. If \"group\", the boxes are plotted next to one another centered around the shared location. If \"overlay\", the boxes are plotted over one another, you might need to set \"opacity\" to see them multiple boxes. Has no effect on traces that have \"width\" set.\nDefault: \"overlay\"\nType: enumerated , one of ( \"group\" | \"overlay\" )"
      },
      {
        "label": "waterfallgap",
        "detail": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.\nDefault: \nType: number between or equal to 0 and 1"
      },
      {
        "label": "waterfallgroupgap",
        "detail": "Sets the gap (in plot fraction) between bars of the same location coordinate.\nDefault: 0\nType: number between or equal to 0 and 1"
      },
      {
        "label": "waterfallmode",
        "detail": "Determines how bars at the same location coordinate are displayed on the graph. With \"group\", the bars are plotted next to one another centered around the shared location. With \"overlay\", the bars are plotted over one another, you might need to reduce \"opacity\" to see multiple bars.\nDefault: \"group\"\nType: enumerated , one of ( \"group\" | \"overlay\" )"
      },
      {
        "label": "funnelgap",
        "detail": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.\nDefault: \nType: number between or equal to 0 and 1"
      },
      {
        "label": "funnelgroupgap",
        "detail": "Sets the gap (in plot fraction) between bars of the same location coordinate.\nDefault: 0\nType: number between or equal to 0 and 1"
      },
      {
        "label": "funnelmode",
        "detail": "Determines how bars at the same location coordinate are displayed on the graph. With \"stack\", the bars are stacked on top of one another With \"group\", the bars are plotted next to one another centered around the shared location. With \"overlay\", the bars are plotted over one another, you might need to reduce \"opacity\" to see multiple bars.\nDefault: \"stack\"\nType: enumerated , one of ( \"stack\" | \"group\" | \"overlay\" )"
      },
      {
        "label": "extendfunnelareacolors",
        "detail": "If `true`, the funnelarea slice colors (whether given by `funnelareacolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.\nDefault: true\nType: boolean"
      },
      {
        "label": "funnelareacolorway",
        "detail": "Sets the default funnelarea slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendfunnelareacolors`.\nDefault: \nType: colorlist"
      },
      {
        "label": "hiddenlabels",
        "detail": "hiddenlabels is the funnelarea & pie chart analog of visible:'legendonly' but it can contain many labels, and can simultaneously hide slices from several pies/funnelarea charts\nDefault: \nType: data array, Vector"
      },
      {
        "label": "bargap",
        "detail": "Sets the gap between bars of adjacent location coordinates. Values are unitless, they represent fractions of the minimum difference in bar positions in the data.\nDefault: 0.1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "barmode",
        "detail": "Determines how bars at the same location coordinate are displayed on the graph. With \"stack\", the bars are stacked on top of one another With \"overlay\", the bars are plotted over one another, you might need to reduce \"opacity\" to see multiple bars.\nDefault: \"stack\"\nType: enumerated , one of ( \"stack\" | \"overlay\" )"
      },
      {
        "label": "extendsunburstcolors",
        "detail": "If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.\nDefault: true\nType: boolean"
      },
      {
        "label": "sunburstcolorway",
        "detail": "Sets the default sunburst slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendsunburstcolors`.\nDefault: \nType: colorlist"
      },
      {
        "label": "extendtreemapcolors",
        "detail": "If `true`, the treemap slice colors (whether given by `treemapcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.\nDefault: true\nType: boolean"
      },
      {
        "label": "treemapcolorway",
        "detail": "Sets the default treemap slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendtreemapcolors`.\nDefault: \nType: colorlist"
      },
      {
        "label": "extendiciclecolors",
        "detail": "If `true`, the icicle slice colors (whether given by `iciclecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.\nDefault: true\nType: boolean"
      },
      {
        "label": "iciclecolorway",
        "detail": "Sets the default icicle slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendiciclecolors`.\nDefault: \nType: colorlist"
      }
    ],
    "uniformtext": {
      "items": [
        {
          "label": "minsize",
          "detail": "Sets the minimum text size between traces of the same type.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "mode",
          "detail": "Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using \"hide\" option hides the text; and using \"show\" option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.\nDefault: \nType: enumerated , one of ( false | \"hide\" | \"show\" )"
        }
      ]
    },
    "modebar": {
      "items": [
        {
          "label": "activecolor",
          "detail": "Sets the color of the active or hovered on icons in the modebar.\nDefault: \nType: color"
        },
        {
          "label": "add",
          "detail": "Determines which predefined modebar buttons to add. Please note that these buttons will only be shown if they are compatible with all trace types used in a graph. Similar to `config.modeBarButtonsToAdd` option. This may include \"v1hovermode\", \"hoverclosest\", \"hovercompare\", \"togglehover\", \"togglespikelines\", \"drawline\", \"drawopenpath\", \"drawclosedpath\", \"drawcircle\", \"drawrect\", \"eraseshape\".\nDefault: \"\"\nType: string or array of strings"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the modebar.\nDefault: \nType: color"
        },
        {
          "label": "color",
          "detail": "Sets the color of the icons in the modebar.\nDefault: \nType: color"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the modebar.\nDefault: \"h\"\nType: enumerated , one of ( \"v\" | \"h\" )"
        },
        {
          "label": "remove",
          "detail": "Determines which predefined modebar buttons to remove. Similar to `config.modeBarButtonsToRemove` option. This may include \"autoScale2d\", \"autoscale\", \"editInChartStudio\", \"editinchartstudio\", \"hoverCompareCartesian\", \"hovercompare\", \"lasso\", \"lasso2d\", \"orbitRotation\", \"orbitrotation\", \"pan\", \"pan2d\", \"pan3d\", \"reset\", \"resetCameraDefault3d\", \"resetCameraLastSave3d\", \"resetGeo\", \"resetSankeyGroup\", \"resetScale2d\", \"resetViewMapbox\", \"resetViews\", \"resetcameradefault\", \"resetcameralastsave\", \"resetsankeygroup\", \"resetscale\", \"resetview\", \"resetviews\", \"select\", \"select2d\", \"sendDataToCloud\", \"senddatatocloud\", \"tableRotation\", \"tablerotation\", \"toImage\", \"toggleHover\", \"toggleSpikelines\", \"togglehover\", \"togglespikelines\", \"toimage\", \"zoom\", \"zoom2d\", \"zoom3d\", \"zoomIn2d\", \"zoomInGeo\", \"zoomInMapbox\", \"zoomOut2d\", \"zoomOutGeo\", \"zoomOutMapbox\", \"zoomin\", \"zoomout\".\nDefault: \"\"\nType: string or array of strings"
        },
        {
          "label": "uirevision",
          "detail": "Controls persistence of user-driven changes related to the modebar, including `hovermode`, `dragmode`, and `showspikes` at both the root level and inside subplots. Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
        }
      ]
    },
    "newshape": {
      "label": {
        "items": [
          {
            "label": "font",
            "detail": "Sets the new shape label text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "padding",
            "detail": "Sets padding (in px) between edge of label and edge of new shape.\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "text",
            "detail": "Sets the text to display with the new shape. It is also used for legend item if `name` is not provided.\nDefault: \"\"\nType: string"
          },
          {
            "label": "textangle",
            "detail": "Sets the angle at which the label text is drawn with respect to the horizontal. For lines, angle \"auto\" is the same angle as the line. For all other shapes, angle \"auto\" is horizontal.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "textposition",
            "detail": "Sets the position of the label text relative to the new shape. Supported values for rectangles, circles and paths are \"top left\", \"top center\", \"top right\", \"middle left\", \"middle center\", \"middle right\", \"bottom left\", \"bottom center\", and \"bottom right\". Supported values for lines are \"start\", \"middle\", and \"end\". Default: \"middle center\" for rectangles, circles, and paths; \"middle\" for lines.\nDefault: \nType: enumerated , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" | \"start\" | \"middle\" | \"end\" )"
          },
          {
            "label": "texttemplate",
            "detail": "Template string used for rendering the new shape's label. Note that this will override `text`. Variables are inserted using %{variable}, for example \"x0: %{x0}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{x0:$.2f}\". See https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{x0|%m %b %Y}\". See https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. A single multiplication or division operation may be applied to numeric variables, and combined with d3 number formatting, for example \"Length in cm: %{x0\"2.54}\", \"%{slope\"60:.1f} meters per second.\" For log axes, variable values are given in log units. For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms. Finally, the template string has access to variables `x0`, `x1`, `y0`, `y1`, `slope`, `dx`, `dy`, `width`, `height`, `length`, `xcenter` and `ycenter`.\nDefault: \"\"\nType: string"
          },
          {
            "label": "xanchor",
            "detail": "Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the \"left\", \"center\" or \"right\" of the label text. For example, if `textposition` is set to \"top right\" and `xanchor` to \"right\" then the right-most portion of the label text lines up with the right-most edge of the new shape.\nDefault: \"auto\"\nType: enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "yanchor",
            "detail": "Sets the label's vertical position anchor This anchor binds the specified `textposition` to the \"top\", \"middle\" or \"bottom\" of the label text. For example, if `textposition` is set to \"top right\" and `yanchor` to \"top\" then the top-most portion of the label text lines up with the top-most edge of the new shape.\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      },
      "items": [
        {
          "label": "drawdirection",
          "detail": "When `dragmode` is set to \"drawrect\", \"drawline\" or \"drawcircle\" this limits the drag to be horizontal, vertical or diagonal. Using \"diagonal\" there is no limit e.g. in drawing lines in any direction. \"ortho\" limits the draw to be either horizontal or vertical. \"horizontal\" allows horizontal extend. \"vertical\" allows vertical extend.\nDefault: \"diagonal\"\nType: enumerated , one of ( \"ortho\" | \"horizontal\" | \"vertical\" | \"diagonal\" )"
        },
        {
          "label": "fillcolor",
          "detail": "Sets the color filling new shapes' interior. Please note that if using a fillcolor with alpha greater than half, drag inside the active shape starts moving the shape underneath, otherwise a new shape could be started over.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "fillrule",
          "detail": "Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule\nDefault: \"evenodd\"\nType: enumerated , one of ( \"evenodd\" | \"nonzero\" )"
        },
        {
          "label": "label",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "layer",
          "detail": "Specifies whether new shapes are drawn below or above traces.\nDefault: \"above\"\nType: enumerated , one of ( \"below\" | \"above\" )"
        },
        {
          "label": "legend",
          "detail": "Sets the reference to a legend to show new shape in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
        },
        {
          "label": "legendgroup",
          "detail": "Sets the legend group for new shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
        },
        {
          "label": "legendgrouptitle",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "legendrank",
          "detail": "Sets the legend rank for new shape. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.\nDefault: 1000\nType: number"
        },
        {
          "label": "legendwidth",
          "detail": "Sets the width (in px or fraction) of the legend for new shape.\nDefault: \nType: number greater than or equal to 0"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "name",
          "detail": "Sets new shape name. The name appears as the legend item.\nDefault: \nType: string"
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of new shapes.\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "showlegend",
          "detail": "Determines whether or not new shape is shown in the legend.\nDefault: \nType: boolean"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not new shape is visible. If \"legendonly\", the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the line color. By default uses either dark grey or white to increase contrast with background color.\nDefault: \nType: color"
          },
          {
            "label": "dash",
            "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
          },
          {
            "label": "width",
            "detail": "Sets the line width (in px).\nDefault: 4\nType: number greater than or equal to 0"
          }
        ]
      },
      "legendgrouptitle": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "text",
            "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "updatemenus": {
      "items": [
        {
          "label": "active",
          "detail": "Determines which button (by index starting from 0) is considered active.\nDefault: 0\nType: integer greater than or equal to -1"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the update menu buttons.\nDefault: \nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the color of the border enclosing the update menu.\nDefault: \"#BEC8D9\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) of the border enclosing the update menu.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "buttons",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "direction",
          "detail": "Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left` and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively.\nDefault: \"down\"\nType: enumerated , one of ( \"left\" | \"right\" | \"up\" | \"down\" )"
        },
        {
          "label": "font",
          "detail": "Sets the font of the update menu button text.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "name",
          "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
        },
        {
          "label": "pad",
          "detail": "Sets the padding around the buttons or dropdown menu.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "showactive",
          "detail": "Highlights active dropdown item or active button if true.\nDefault: true\nType: boolean"
        },
        {
          "label": "templateitemname",
          "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
        },
        {
          "label": "type",
          "detail": "Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or vertically\nDefault: \"dropdown\"\nType: enumerated , one of ( \"dropdown\" | \"buttons\" )"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not the update menu is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "x",
          "detail": "Sets the x position (in normalized coordinates) of the update menu.\nDefault: -0.05\nType: number between or equal to -2 and 3"
        },
        {
          "label": "xanchor",
          "detail": "Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the range selector.\nDefault: \"right\"\nType: enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position (in normalized coordinates) of the update menu.\nDefault: 1\nType: number between or equal to -2 and 3"
        },
        {
          "label": "yanchor",
          "detail": "Sets the update menu's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the range selector.\nDefault: \"top\"\nType: enumerated , one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" )"
        }
      ],
      "pad": {
        "items": [
          {
            "label": "b",
            "detail": "The amount of padding (in px) along the bottom of the component.\nDefault: 0\nType: number"
          },
          {
            "label": "l",
            "detail": "The amount of padding (in px) on the left side of the component.\nDefault: 0\nType: number"
          },
          {
            "label": "r",
            "detail": "The amount of padding (in px) on the right side of the component.\nDefault: 0\nType: number"
          },
          {
            "label": "t",
            "detail": "The amount of padding (in px) along the top of the component.\nDefault: 0\nType: number"
          }
        ]
      },
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "buttons": {
        "items": [
          {
            "label": "args",
            "detail": "Sets the arguments values to be passed to the Plotly method set in `method` on click.\nDefault: \nType: Array"
          },
          {
            "label": "args2",
            "detail": "Sets a 2nd set of `args`, these arguments values are passed to the Plotly method set in `method` when clicking this button while in the active state. Use this to create toggle buttons.\nDefault: \nType: Array"
          },
          {
            "label": "execute",
            "detail": "When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_buttonclicked` method and executing the API command manually without losing the benefit of the updatemenu automatically binding to the state of the plot through the specification of `method` and `args`.\nDefault: true\nType: boolean"
          },
          {
            "label": "label",
            "detail": "Sets the text label to appear on the button.\nDefault: \"\"\nType: string"
          },
          {
            "label": "method",
            "detail": "Sets the Plotly method to be called on click. If the `skip` method is used, the API updatemenu will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to updatemenu events manually via JavaScript.\nDefault: \"restyle\"\nType: enumerated , one of ( \"restyle\" | \"relayout\" | \"animate\" | \"update\" | \"skip\" )"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "visible",
            "detail": "Determines whether or not this button is visible.\nDefault: \nType: boolean"
          }
        ]
      }
    },
    "title": {
      "items": [
        {
          "label": "automargin",
          "detail": "Determines whether the title can automatically push the figure margins. If `yref='paper'` then the margin will expand to ensure that the title doesn’t overlap with the edges of the container. If `yref='container'` then the margins will ensure that the title doesn’t overlap with the plot area, tick labels, and axis titles. If `automargin=true` and the margins need to be expanded, then y will be set to a default 1 and yanchor will be set to an appropriate default to ensure that minimal margin space is needed. Note that when `yref='paper'`, only 1 or 0 are allowed y values. Invalid values will be reset to the default 1.\nDefault: \nType: boolean"
        },
        {
          "label": "font",
          "detail": "Sets the title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "pad",
          "detail": "Sets the padding of the title. Each padding value only applies when the corresponding `xanchor`/`yanchor` value is set accordingly. E.g. for left padding to take effect, `xanchor` must be set to \"left\". The same rule applies if `xanchor`/`yanchor` is determined automatically. Padding is muted if the respective anchor value is \"middle\"/\"center\".\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the plot's title. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` in normalized coordinates from \"0\" (left) to \"1\" (right).\nDefault: 0.5\nType: number between or equal to 0 and 1"
        },
        {
          "label": "xanchor",
          "detail": "Sets the title's horizontal alignment with respect to its x position. \"left\" means that the title starts at x, \"right\" means that the title ends at x and \"center\" means that the title's center is at x. \"auto\" divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.\nDefault: \"auto\"\nType: enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"container\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` in normalized coordinates from \"0\" (bottom) to \"1\" (top). \"auto\" places the baseline of the title onto the vertical center of the top margin.\nDefault: \"auto\"\nType: number between or equal to 0 and 1"
        },
        {
          "label": "yanchor",
          "detail": "Sets the title's vertical alignment with respect to its y position. \"top\" means that the title's cap line is at y, \"bottom\" means that the title's baseline is at y and \"middle\" means that the title's midline is at y. \"auto\" divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.\nDefault: \"auto\"\nType: enumerated , one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"container\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "pad": {
        "items": [
          {
            "label": "b",
            "detail": "The amount of padding (in px) along the bottom of the component.\nDefault: 0\nType: number"
          },
          {
            "label": "l",
            "detail": "The amount of padding (in px) on the left side of the component.\nDefault: 0\nType: number"
          },
          {
            "label": "r",
            "detail": "The amount of padding (in px) on the right side of the component.\nDefault: 0\nType: number"
          },
          {
            "label": "t",
            "detail": "The amount of padding (in px) along the top of the component.\nDefault: 0\nType: number"
          }
        ]
      },
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "margin": {
      "items": [
        {
          "label": "autoexpand",
          "detail": "Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.\nDefault: true\nType: boolean"
        },
        {
          "label": "b",
          "detail": "Sets the bottom margin (in px).\nDefault: 80\nType: number greater than or equal to 0"
        },
        {
          "label": "l",
          "detail": "Sets the left margin (in px).\nDefault: 80\nType: number greater than or equal to 0"
        },
        {
          "label": "pad",
          "detail": "Sets the amount of padding (in px) between the plotting area and the axis lines\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "r",
          "detail": "Sets the right margin (in px).\nDefault: 80\nType: number greater than or equal to 0"
        },
        {
          "label": "t",
          "detail": "Sets the top margin (in px).\nDefault: 100\nType: number greater than or equal to 0"
        }
      ]
    },
    "legend": {
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the legend background color. Defaults to `layout.paper_bgcolor`.\nDefault: \nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the color of the border enclosing the legend.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) of the border enclosing the legend.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "entrywidth",
          "detail": "Sets the width (in px or fraction) of the legend. Use 0 to size the entry based on the text width, when `entrywidthmode` is set to \"pixels\".\nDefault: \nType: number greater than or equal to 0"
        },
        {
          "label": "entrywidthmode",
          "detail": "Determines what entrywidth means.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "font",
          "detail": "Sets the font used to text the legend items.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "groupclick",
          "detail": "Determines the behavior on legend group item click. \"toggleitem\" toggles the visibility of the individual item clicked on the graph. \"togglegroup\" toggles the visibility of all items in the same legendgroup as the item clicked on the graph.\nDefault: \"togglegroup\"\nType: enumerated , one of ( \"toggleitem\" | \"togglegroup\" )"
        },
        {
          "label": "grouptitlefont",
          "detail": "Sets the font for group titles in legend. Defaults to `legend.font` with its size increased about 10%.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "itemclick",
          "detail": "Determines the behavior on legend item click. \"toggle\" toggles the visibility of the item clicked on the graph. \"toggleothers\" makes the clicked item the sole visible item on the graph. \"false\" disables legend item click interactions.\nDefault: \"toggle\"\nType: enumerated , one of ( \"toggle\" | \"toggleothers\" | false )"
        },
        {
          "label": "itemdoubleclick",
          "detail": "Determines the behavior on legend item double-click. \"toggle\" toggles the visibility of the item clicked on the graph. \"toggleothers\" makes the clicked item the sole visible item on the graph. \"false\" disables legend item double-click interactions.\nDefault: \"toggleothers\"\nType: enumerated , one of ( \"toggle\" | \"toggleothers\" | false )"
        },
        {
          "label": "itemsizing",
          "detail": "Determines if the legend items symbols scale with their corresponding \"trace\" attributes or remain \"constant\" independent of the symbol size on the graph.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"constant\" )"
        },
        {
          "label": "itemwidth",
          "detail": "Sets the width (in px) of the legend item symbols (the part other than the title.text).\nDefault: 30\nType: number greater than or equal to 30"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the legend.\nDefault: \"v\"\nType: enumerated , one of ( \"v\" | \"h\" )"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tracegroupgap",
          "detail": "Sets the amount of vertical space (in px) between legend groups.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "traceorder",
          "detail": "Examples: \"reversed\", \"grouped\", \"reversed+grouped\", \"normal\"\nDefault: \nType: flaglist string. Any combination of \"reversed\", \"grouped\" joined with a \"+\" OR \"normal\"."
        },
        {
          "label": "uirevision",
          "detail": "Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "valign",
          "detail": "Sets the vertical alignment of the symbols with respect to their associated text.\nDefault: \"middle\"\nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this legend is visible.\nDefault: true\nType: boolean"
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` (in normalized coordinates) of the legend. When `xref` is \"paper\", defaults to \"1.02\" for vertical legends and defaults to \"0\" for horizontal legends. When `xref` is \"container\", defaults to \"1\" for vertical legends and defaults to \"0\" for horizontal legends. Must be between \"0\" and \"1\" if `xref` is \"container\". and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets the legend's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the legend. Value \"auto\" anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.\nDefault: \"left\"\nType: enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` (in normalized coordinates) of the legend. When `yref` is \"paper\", defaults to \"1\" for vertical legends, defaults to \"-0.1\" for horizontal legends on graphs w/o range sliders and defaults to \"1.1\" for horizontal legends on graph with one or multiple range sliders. When `yref` is \"container\", defaults to \"1\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets the legend's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the legend. Value \"auto\" anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.\nDefault: \nType: enumerated , one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "grouptitlefont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this legend's title font. Defaults to `legend.font` with its size increased about 20%.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of legend's title with respect to the legend items. Defaulted to \"top\" with `orientation` is \"h\". Defaulted to \"left\" with `orientation` is \"v\". The \"top left\" options could be used to expand top center and top right are for horizontal alignment legend area in both x and y sides.\nDefault: \nType: enumerated , one of ( \"top\" | \"left\" | \"top left\" | \"top center\" | \"top right\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the legend.\nDefault: \"\"\nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    }
  },
  "parcats": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"parcats\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "counts",
        "detail": "The number of observations represented by each state. Defaults to 1 so that each state represents one observation\nDefault: 1\nType: number or array of numbers greater than or equal to 0"
      },
      {
        "label": "dimensions",
        "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"count\", \"probability\", \"count+probability\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"count\", \"probability\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. This value here applies when hovering over dimensions. Note that `\"categorycount`, \"colorcount\" and \"bandcolorcount\" are only available when `hoveron` contains the \"color\" flagFinally, the template string has access to variables `count`, `probability`, `category`, `categorycount`, `colorcount` and `bandcolorcount`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "domain",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "arrangement",
        "detail": "Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.\nDefault: \"perpendicular\"\nType: enumerated , one of ( \"perpendicular\" | \"freeform\" | \"fixed\" )"
      },
      {
        "label": "bundlecolors",
        "detail": "Sort paths so that like colors are bundled together within each category.\nDefault: true\nType: boolean"
      },
      {
        "label": "sortpaths",
        "detail": "Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.\nDefault: \"forward\"\nType: enumerated , one of ( \"forward\" | \"backward\" )"
      },
      {
        "label": "hoveron",
        "detail": "Sets the hover interaction mode for the parcats diagram. If `category`, hover interaction take place per category. If `color`, hover interactions take place per color per category. If `dimension`, hover interactions take place across all categories per dimension.\nDefault: \"category\"\nType: enumerated , one of ( \"category\" | \"color\" | \"dimension\" )"
      },
      {
        "label": "labelfont",
        "detail": "Sets the font for the `dimension` labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "tickfont",
        "detail": "Sets the font for the `category` labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "hovertemplate",
          "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. This value here applies when hovering over lines.Finally, the template string has access to variables `count` and `probability`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "shape",
          "detail": "Sets the shape of the paths. If `linear`, paths are composed of straight lines. If `hspline`, paths are composed of horizontal curved splines\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"hspline\" )"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.\nDefault: \nType: boolean"
        }
      ],
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "tickfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "labelfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number greater than or equal to 1"
        }
      ]
    },
    "dimensions": {
      "items": [
        {
          "label": "categoryarray",
          "detail": "Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "categoryorder",
          "detail": "Specifies the ordering logic for the categories in the dimension. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`.\nDefault: \"trace\"\nType: enumerated , one of ( \"trace\" | \"category ascending\" | \"category descending\" | \"array\" )"
        },
        {
          "label": "displayindex",
          "detail": "The display index of dimension, from left to right, zero indexed, defaults to dimension index.\nDefault: \nType: integer"
        },
        {
          "label": "label",
          "detail": "The shown name of the dimension.\nDefault: \nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to \"array\". Should be an array the same length as `categoryarray` Used with `categoryorder`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "values",
          "detail": "Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).\nDefault: Default:\nType: data array, Vector"
        },
        {
          "label": "visible",
          "detail": "Shows the dimension when set to `true` (the default). Hides the dimension for `false`.\nDefault: true\nType: boolean"
        }
      ]
    },
    "domain": {
      "items": [
        {
          "label": "column",
          "detail": "If there is a layout grid, use the domain for this column in the grid for this parcats trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "row",
          "detail": "If there is a layout grid, use the domain for this row in the grid for this parcats trace .\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "x",
          "detail": "Sets the horizontal domain of this parcats trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        },
        {
          "label": "y",
          "detail": "Sets the vertical domain of this parcats trace (in plot fraction).\nDefault: [0, 1]\nType: Array"
        }
      ]
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "scattergl": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"scattergl\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "mode",
        "detail": "Examples: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\nDefault: \nType: flaglist string. Any combination of \"lines\", \"markers\", \"text\" joined with a \"+\" OR \"none\"."
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Sets the x coordinate step. See `x0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "y",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Sets the y coordinate step. See `y0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "text",
        "detail": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "textposition",
        "detail": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.\nDefault: \"middle center\"\nType: enumerated or array of enumerateds , one of ( \"top left\" | \"top center\" | \"top right\" | \"middle left\" | \"middle center\" | \"middle right\" | \"bottom left\" | \"bottom center\" | \"bottom right\" )"
      },
      {
        "label": "texttemplate",
        "detail": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "yperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the y axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "yperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "yperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "textfont",
        "detail": "Sets the text font.\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_x",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "error_y",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "connectgaps",
        "detail": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\nDefault: \nType: boolean"
      },
      {
        "label": "fill",
        "detail": "Sets the area to fill with a solid color. Defaults to \"none\" unless this trace is stacked, then it gets \"tonexty\" (\"tonextx\") if `orientation` is \"v\" (\"h\") Use with `fillcolor` if not \"none\". \"tozerox\" and \"tozeroy\" fill to x=0 and y=0 respectively. \"tonextx\" and \"tonexty\" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like \"tozerox\" and \"tozeroy\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.\nDefault: \"none\"\nType: enumerated , one of ( \"none\" | \"tozeroy\" | \"tozerox\" | \"tonexty\" | \"tonextx\" | \"toself\" | \"tonext\" )"
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the line color.\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the style of the lines.\nDefault: \"solid\"\nType: enumerated , one of ( \"dash\" | \"dashdot\" | \"dot\" | \"longdash\" | \"longdashdot\" | \"solid\" )"
        },
        {
          "label": "shape",
          "detail": "Determines the line shape. The values correspond to step-wise line shapes.\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"hv\" | \"vh\" | \"hvh\" | \"vhv\" )"
        },
        {
          "label": "width",
          "detail": "Sets the line width (in px).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of selected points.\nDefault: \nType: color"
          }
        ]
      }
    },
    "error_y": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "error_x": {
      "items": [
        {
          "label": "array",
          "detail": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "arrayminus",
          "detail": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "color",
          "detail": "Sets the stoke color of the error bars.\nDefault: \nType: color"
        },
        {
          "label": "copy_ystyle",
          "detail": "\nDefault: \nType: boolean"
        },
        {
          "label": "symmetric",
          "detail": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.\nDefault: \nType: boolean"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness (in px) of the error bars.\nDefault: 2\nType: number greater than or equal to 0"
        },
        {
          "label": "traceref",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "tracerefminus",
          "detail": "\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "type",
          "detail": "Determines the rule used to generate the error bars. If \"constant`, the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.\nDefault: \nType: enumerated , one of ( \"percent\" | \"constant\" | \"sqrt\" | \"data\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "valueminus",
          "detail": "Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "visible",
          "detail": "Determines whether or not this set of error bars is visible.\nDefault: \nType: boolean"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of the cross-bar at both ends of the error bars.\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "autocolorscale",
          "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
        },
        {
          "label": "cauto",
          "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.\nDefault: true\nType: boolean"
        },
        {
          "label": "cmax",
          "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "cmid",
          "detail": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.\nDefault: \nType: number"
        },
        {
          "label": "cmin",
          "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.\nDefault: \nType: number"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "coloraxis",
          "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
        },
        {
          "label": "colorbar",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "colorscale",
          "detail": "Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: \nType: number or array of numbers between or equal to 0 and 1"
        },
        {
          "label": "reversescale",
          "detail": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.\nDefault: \nType: boolean"
        },
        {
          "label": "showscale",
          "detail": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.\nDefault: \nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number or array of numbers greater than or equal to 0"
        },
        {
          "label": "sizemin",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "sizemode",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.\nDefault: \"diameter\"\nType: enumerated , one of ( \"diameter\" | \"area\" )"
        },
        {
          "label": "sizeref",
          "detail": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.\nDefault: 1\nType: number"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated or array of enumerateds , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "autocolorscale",
            "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
          },
          {
            "label": "cauto",
            "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.\nDefault: true\nType: boolean"
          },
          {
            "label": "cmax",
            "detail": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "cmid",
            "detail": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.\nDefault: \nType: number"
          },
          {
            "label": "cmin",
            "detail": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.\nDefault: \nType: number"
          },
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \nType: color or array of colors"
          },
          {
            "label": "coloraxis",
            "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
          },
          {
            "label": "colorscale",
            "detail": "Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
          },
          {
            "label": "reversescale",
            "detail": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.\nDefault: \nType: boolean"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: \nType: number or array of numbers greater than or equal to 0"
          }
        ]
      },
      "colorbar": {
        "tickformatstops": {
          "items": [
            {
              "label": "dtickrange",
              "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
            },
            {
              "label": "enabled",
              "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
            },
            {
              "label": "name",
              "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
            },
            {
              "label": "templateitemname",
              "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
            },
            {
              "label": "value",
              "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
            }
          ]
        },
        "items": [
          {
            "label": "bgcolor",
            "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
          },
          {
            "label": "bordercolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "borderwidth",
            "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
          },
          {
            "label": "dtick",
            "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "exponentformat",
            "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
          },
          {
            "label": "labelalias",
            "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "len",
            "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "lenmode",
            "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "minexponent",
            "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
          },
          {
            "label": "nticks",
            "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
          },
          {
            "label": "orientation",
            "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
          },
          {
            "label": "outlinecolor",
            "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outlinewidth",
            "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "separatethousands",
            "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
          },
          {
            "label": "showexponent",
            "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticklabels",
            "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
          },
          {
            "label": "showtickprefix",
            "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "showticksuffix",
            "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
          },
          {
            "label": "thickness",
            "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
          },
          {
            "label": "thicknessmode",
            "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
          },
          {
            "label": "tick0",
            "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
          },
          {
            "label": "tickangle",
            "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
          },
          {
            "label": "tickcolor",
            "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "tickfont",
            "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "tickformat",
            "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
          },
          {
            "label": "tickformatstops",
            "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
          },
          {
            "label": "ticklabeloverflow",
            "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
          },
          {
            "label": "ticklabelposition",
            "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
          },
          {
            "label": "ticklabelstep",
            "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
          },
          {
            "label": "ticklen",
            "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
          },
          {
            "label": "tickmode",
            "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
          },
          {
            "label": "tickprefix",
            "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticks",
            "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
          },
          {
            "label": "ticksuffix",
            "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
          },
          {
            "label": "ticktext",
            "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickvals",
            "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
          },
          {
            "label": "tickwidth",
            "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "title",
            "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "x",
            "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "xanchor",
            "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
          },
          {
            "label": "xpad",
            "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "xref",
            "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          },
          {
            "label": "y",
            "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
          },
          {
            "label": "yanchor",
            "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
          },
          {
            "label": "ypad",
            "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
          },
          {
            "label": "yref",
            "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
          }
        ],
        "tickfont": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        },
        "title": {
          "items": [
            {
              "label": "font",
              "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
            },
            {
              "label": "side",
              "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
            },
            {
              "label": "text",
              "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
            }
          ],
          "font": {
            "items": [
              {
                "label": "color",
                "detail": "\nDefault: \nType: color"
              },
              {
                "label": "family",
                "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
              },
              {
                "label": "size",
                "detail": "\nDefault: \nType: number greater than or equal to 1"
              }
            ]
          }
        }
      }
    },
    "textfont": {
      "items": [
        {
          "label": "color",
          "detail": "\nDefault: \nType: color or array of colors"
        },
        {
          "label": "family",
          "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
        },
        {
          "label": "size",
          "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
        }
      ]
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "textfont",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      },
      "textfont": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the text font color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          }
        ]
      }
    }
  },
  "image": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"image\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Set the image's x position. The left edge of the image (or the right edge if the x axis is reversed or dx is negative) will be found at xmin=x0-dx/2\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Set the pixel's horizontal size.\nDefault: 1\nType: number"
      },
      {
        "label": "y0",
        "detail": "Set the image's y position. The top edge of the image (or the bottom edge if the y axis is NOT reversed or if dy is negative) will be found at ymin=y0-dy/2. By default when an image trace is included, the y axis will be reversed so that the image is right-side-up, but you can disable this by setting yaxis.autorange=true or by providing an explicit y axis range.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Set the pixel's vertical size\nDefault: 1\nType: number"
      },
      {
        "label": "z",
        "detail": "A 2-dimensional array in which each element is an array of 3 or 4 numbers representing a color.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "source",
        "detail": "Specifies the data URI of the image to be visualized. The URI consists of \"data:image/[<media subtype>][;base64],<data>\"\nDefault: \nType: string"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each z value.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"color\", \"name\", \"text\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `z`, `color` and `colormodel`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "colormodel",
        "detail": "Color model used to map the numerical color components described in `z` into colors. If `source` is specified, this attribute will be set to `rgba256` otherwise it defaults to `rgb`.\nDefault: \nType: enumerated , one of ( \"rgb\" | \"rgba\" | \"rgba256\" | \"hsl\" | \"hsla\" )"
      },
      {
        "label": "zmax",
        "detail": "Array defining the higher bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [255, 255, 255]. For the `rgba` colormodel, it is [255, 255, 255, 1]. For the `rgba256` colormodel, it is [255, 255, 255, 255]. For the `hsl` colormodel, it is [360, 100, 100]. For the `hsla` colormodel, it is [360, 100, 100, 1].\nDefault: \nType: Array"
      },
      {
        "label": "zmin",
        "detail": "Array defining the lower bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [0, 0, 0]. For the `rgba` colormodel, it is [0, 0, 0, 0]. For the `rgba256` colormodel, it is [0, 0, 0, 0]. For the `hsl` colormodel, it is [0, 0, 0]. For the `hsla` colormodel, it is [0, 0, 0, 0].\nDefault: \nType: Array"
      },
      {
        "label": "zsmooth",
        "detail": "Picks a smoothing algorithm used to smooth `z` data. This only applies for image traces that use the `source` attribute.\nDefault: \nType: enumerated , one of ( \"fast\" | false )"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  },
  "box": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"box\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x",
        "detail": "Sets the x sample data or coordinates. See overview for more info.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "x0",
        "detail": "Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "dx",
        "detail": "Sets the x coordinate step for multi-box traces set using q1/median/q3.\nDefault: \nType: number"
      },
      {
        "label": "y",
        "detail": "Sets the y sample data or coordinates. See overview for more info.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "y0",
        "detail": "Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "dy",
        "detail": "Sets the y coordinate step for multi-box traces set using q1/median/q3.\nDefault: \nType: number"
      },
      {
        "label": "width",
        "detail": "Sets the width of the box in data coordinate If \"0\" (default value) the width is automatically selected based on the positions of other box traces in the same subplot.\nDefault: 0\nType: number greater than or equal to 0"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"x\", \"y\", \"x+y\", \"x+y+z\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "xhoverformat",
        "detail": "Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "yhoverformat",
        "detail": "Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.\nDefault: \"\"\nType: string"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "orientation",
        "detail": "Sets the orientation of the box(es). If \"v\" (\"h\"), the distribution is visualized along the vertical (horizontal).\nDefault: \nType: enumerated , one of ( \"v\" | \"h\" )"
      },
      {
        "label": "alignmentgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\nDefault: \"\"\nType: string"
      },
      {
        "label": "offsetgroup",
        "detail": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\nDefault: \"\"\nType: string"
      },
      {
        "label": "xperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the x axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "xperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "xperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "yperiod",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M<n>\" on the y axis. Special values in the form of \"M<n>\" could be used to declare the number of months. In this case `n` must be a positive integer.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "yperiodalignment",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.\nDefault: \"middle\"\nType: enumerated , one of ( \"start\" | \"middle\" | \"end\" )"
      },
      {
        "label": "yperiod0",
        "detail": "Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "boxmean",
        "detail": "If \"true\", the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If \"sd\" the standard deviation is also drawn. Defaults to \"true\" when `mean` is set. Defaults to \"sd\" when `sd` is set Otherwise defaults to \"false\".\nDefault: \nType: enumerated , one of ( true | \"sd\" | false )"
      },
      {
        "label": "boxpoints",
        "detail": "If \"outliers\", only the sample points lying outside the whiskers are shown If \"suspectedoutliers\", the outlier points are shown and points either less than 4\"Q1-3\"Q3 or greater than 4\"Q3-3\"Q1 are highlighted (see `outliercolor`) If \"all\", all sample points are shown If \"false\", only the box(es) are shown with no sample points Defaults to \"suspectedoutliers\" when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to \"all\" under the q1/median/q3 signature. Otherwise defaults to \"outliers\".\nDefault: \nType: enumerated , one of ( \"all\" | \"outliers\" | \"suspectedoutliers\" | false )"
      },
      {
        "label": "notched",
        "detail": "Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 \" IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to \"false\" unless `notchwidth` or `notchspan` is set.\nDefault: \nType: boolean"
      },
      {
        "label": "notchwidth",
        "detail": "Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).\nDefault: 0.25\nType: number between or equal to 0 and 0.5"
      },
      {
        "label": "showwhiskers",
        "detail": "Determines whether or not whiskers are visible. Defaults to true for `sizemode` \"quartiles\", false for \"sd\".\nDefault: \nType: boolean"
      },
      {
        "label": "whiskerwidth",
        "detail": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).\nDefault: 0.5\nType: number between or equal to 0 and 1"
      },
      {
        "label": "q1",
        "detail": "Sets the Quartile 1 values. There should be as many items as the number of boxes desired.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "median",
        "detail": "Sets the median values. There should be as many items as the number of boxes desired.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "q3",
        "detail": "Sets the Quartile 3 values. There should be as many items as the number of boxes desired.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "lowerfence",
        "detail": "Sets the lower fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `lowerfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point below 1.5 times the IQR.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "upperfence",
        "detail": "Sets the upper fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `upperfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point above 1.5 times the IQR.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "notchspan",
        "detail": "Sets the notch span from the boxes' `median` values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `notchspan` is not provided but a sample (in `y` or `x`) is set, we compute it as 1.57 \" IQR / sqrt(N), where N is the sample size.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "mean",
        "detail": "Sets the mean values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `mean` is not provided but a sample (in `y` or `x`) is set, we compute the mean for each box using the sample values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "sd",
        "detail": "Sets the standard deviation values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `sd` is not provided but a sample (in `y` or `x`) is set, we compute the standard deviation for each box using the sample values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "sdmultiple",
        "detail": "Scales the box size when sizemode=sd Allowing boxes to be drawn across any stddev range For example 1-stddev, 3-stddev, 5-stddev\nDefault: 1\nType: number greater than or equal to 0"
      },
      {
        "label": "quartilemethod",
        "detail": "Sets the method used to compute the sample's Q1 and Q3 quartiles. The \"linear\" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The \"exclusive\" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The \"inclusive\" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.\nDefault: \"linear\"\nType: enumerated , one of ( \"linear\" | \"exclusive\" | \"inclusive\" )"
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoveron",
        "detail": "Examples: \"boxes\", \"points\", \"boxes+points\"\nDefault: \nType: flaglist string. Any combination of \"boxes\", \"points\" joined with a \"+\""
      },
      {
        "label": "pointpos",
        "detail": "Sets the position of the sample points in relation to the box(es). If \"0\", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes\nDefault: \nType: number between or equal to -2 and 2"
      },
      {
        "label": "jitter",
        "detail": "Sets the amount of jitter in the sample points drawn. If \"0\", the sample points align along the distribution axis. If \"1\", the sample points are drawn in a random jitter of width equal to the width of the box(es).\nDefault: \nType: number between or equal to 0 and 1"
      },
      {
        "label": "sizemode",
        "detail": "Sets the upper and lower bound for the boxes quartiles means box is drawn between Q1 and Q3 SD means the box is drawn between Mean +- Standard Deviation Argument sdmultiple (default 1) to scale the box size So it could be drawn 1-stddev, 3-stddev etc\nDefault: \"quartiles\"\nType: enumerated , one of ( \"quartiles\" | \"sd\" )"
      },
      {
        "label": "xcalendar",
        "detail": "Sets the calendar system to use with `x` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "ycalendar",
        "detail": "Sets the calendar system to use with `y` date data.\nDefault: \"gregorian\"\nType: enumerated , one of ( \"chinese\" | \"coptic\" | \"discworld\" | \"ethiopian\" | \"gregorian\" | \"hebrew\" | \"islamic\" | \"jalali\" | \"julian\" | \"mayan\" | \"nanakshahi\" | \"nepali\" | \"persian\" | \"taiwan\" | \"thai\" | \"ummalqura\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the color of line bounding the box(es).\nDefault: \nType: color"
        },
        {
          "label": "width",
          "detail": "Sets the width (in px) of line bounding the box(es).\nDefault: 2\nType: number greater than or equal to 0"
        }
      ]
    },
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of selected points.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of selected points.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "marker": {
      "items": [
        {
          "label": "angle",
          "detail": "Sets the marker angle in respect to `angleref`.\nDefault: 0\nType: angle"
        },
        {
          "label": "color",
          "detail": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.\nDefault: \nType: color"
        },
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the marker opacity.\nDefault: 1\nType: number between or equal to 0 and 1"
        },
        {
          "label": "outliercolor",
          "detail": "Sets the color of the outlier sample points.\nDefault: \"rgba(0, 0, 0, 0)\"\nType: color"
        },
        {
          "label": "size",
          "detail": "Sets the marker size (in px).\nDefault: 6\nType: number greater than or equal to 0"
        },
        {
          "label": "symbol",
          "detail": "Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.\nDefault: \"circle\"\nType: enumerated , one of ( \"0\" | \"0\" | \"circle\" | \"100\" | \"100\" | \"circle-open\" | \"200\" | \"200\" | \"circle-dot\" | \"300\" | \"300\" | \"circle-open-dot\" | \"1\" | \"1\" | \"square\" | \"101\" | \"101\" | \"square-open\" | \"201\" | \"201\" | \"square-dot\" | \"301\" | \"301\" | \"square-open-dot\" | \"2\" | \"2\" | \"diamond\" | \"102\" | \"102\" | \"diamond-open\" | \"202\" | \"202\" | \"diamond-dot\" | \"302\" | \"302\" | \"diamond-open-dot\" | \"3\" | \"3\" | \"cross\" | \"103\" | \"103\" | \"cross-open\" | \"203\" | \"203\" | \"cross-dot\" | \"303\" | \"303\" | \"cross-open-dot\" | \"4\" | \"4\" | \"x\" | \"104\" | \"104\" | \"x-open\" | \"204\" | \"204\" | \"x-dot\" | \"304\" | \"304\" | \"x-open-dot\" | \"5\" | \"5\" | \"triangle-up\" | \"105\" | \"105\" | \"triangle-up-open\" | \"205\" | \"205\" | \"triangle-up-dot\" | \"305\" | \"305\" | \"triangle-up-open-dot\" | \"6\" | \"6\" | \"triangle-down\" | \"106\" | \"106\" | \"triangle-down-open\" | \"206\" | \"206\" | \"triangle-down-dot\" | \"306\" | \"306\" | \"triangle-down-open-dot\" | \"7\" | \"7\" | \"triangle-left\" | \"107\" | \"107\" | \"triangle-left-open\" | \"207\" | \"207\" | \"triangle-left-dot\" | \"307\" | \"307\" | \"triangle-left-open-dot\" | \"8\" | \"8\" | \"triangle-right\" | \"108\" | \"108\" | \"triangle-right-open\" | \"208\" | \"208\" | \"triangle-right-dot\" | \"308\" | \"308\" | \"triangle-right-open-dot\" | \"9\" | \"9\" | \"triangle-ne\" | \"109\" | \"109\" | \"triangle-ne-open\" | \"209\" | \"209\" | \"triangle-ne-dot\" | \"309\" | \"309\" | \"triangle-ne-open-dot\" | \"10\" | \"10\" | \"triangle-se\" | \"110\" | \"110\" | \"triangle-se-open\" | \"210\" | \"210\" | \"triangle-se-dot\" | \"310\" | \"310\" | \"triangle-se-open-dot\" | \"11\" | \"11\" | \"triangle-sw\" | \"111\" | \"111\" | \"triangle-sw-open\" | \"211\" | \"211\" | \"triangle-sw-dot\" | \"311\" | \"311\" | \"triangle-sw-open-dot\" | \"12\" | \"12\" | \"triangle-nw\" | \"112\" | \"112\" | \"triangle-nw-open\" | \"212\" | \"212\" | \"triangle-nw-dot\" | \"312\" | \"312\" | \"triangle-nw-open-dot\" | \"13\" | \"13\" | \"pentagon\" | \"113\" | \"113\" | \"pentagon-open\" | \"213\" | \"213\" | \"pentagon-dot\" | \"313\" | \"313\" | \"pentagon-open-dot\" | \"14\" | \"14\" | \"hexagon\" | \"114\" | \"114\" | \"hexagon-open\" | \"214\" | \"214\" | \"hexagon-dot\" | \"314\" | \"314\" | \"hexagon-open-dot\" | \"15\" | \"15\" | \"hexagon2\" | \"115\" | \"115\" | \"hexagon2-open\" | \"215\" | \"215\" | \"hexagon2-dot\" | \"315\" | \"315\" | \"hexagon2-open-dot\" | \"16\" | \"16\" | \"octagon\" | \"116\" | \"116\" | \"octagon-open\" | \"216\" | \"216\" | \"octagon-dot\" | \"316\" | \"316\" | \"octagon-open-dot\" | \"17\" | \"17\" | \"star\" | \"117\" | \"117\" | \"star-open\" | \"217\" | \"217\" | \"star-dot\" | \"317\" | \"317\" | \"star-open-dot\" | \"18\" | \"18\" | \"hexagram\" | \"118\" | \"118\" | \"hexagram-open\" | \"218\" | \"218\" | \"hexagram-dot\" | \"318\" | \"318\" | \"hexagram-open-dot\" | \"19\" | \"19\" | \"star-triangle-up\" | \"119\" | \"119\" | \"star-triangle-up-open\" | \"219\" | \"219\" | \"star-triangle-up-dot\" | \"319\" | \"319\" | \"star-triangle-up-open-dot\" | \"20\" | \"20\" | \"star-triangle-down\" | \"120\" | \"120\" | \"star-triangle-down-open\" | \"220\" | \"220\" | \"star-triangle-down-dot\" | \"320\" | \"320\" | \"star-triangle-down-open-dot\" | \"21\" | \"21\" | \"star-square\" | \"121\" | \"121\" | \"star-square-open\" | \"221\" | \"221\" | \"star-square-dot\" | \"321\" | \"321\" | \"star-square-open-dot\" | \"22\" | \"22\" | \"star-diamond\" | \"122\" | \"122\" | \"star-diamond-open\" | \"222\" | \"222\" | \"star-diamond-dot\" | \"322\" | \"322\" | \"star-diamond-open-dot\" | \"23\" | \"23\" | \"diamond-tall\" | \"123\" | \"123\" | \"diamond-tall-open\" | \"223\" | \"223\" | \"diamond-tall-dot\" | \"323\" | \"323\" | \"diamond-tall-open-dot\" | \"24\" | \"24\" | \"diamond-wide\" | \"124\" | \"124\" | \"diamond-wide-open\" | \"224\" | \"224\" | \"diamond-wide-dot\" | \"324\" | \"324\" | \"diamond-wide-open-dot\" | \"25\" | \"25\" | \"hourglass\" | \"125\" | \"125\" | \"hourglass-open\" | \"26\" | \"26\" | \"bowtie\" | \"126\" | \"126\" | \"bowtie-open\" | \"27\" | \"27\" | \"circle-cross\" | \"127\" | \"127\" | \"circle-cross-open\" | \"28\" | \"28\" | \"circle-x\" | \"128\" | \"128\" | \"circle-x-open\" | \"29\" | \"29\" | \"square-cross\" | \"129\" | \"129\" | \"square-cross-open\" | \"30\" | \"30\" | \"square-x\" | \"130\" | \"130\" | \"square-x-open\" | \"31\" | \"31\" | \"diamond-cross\" | \"131\" | \"131\" | \"diamond-cross-open\" | \"32\" | \"32\" | \"diamond-x\" | \"132\" | \"132\" | \"diamond-x-open\" | \"33\" | \"33\" | \"cross-thin\" | \"133\" | \"133\" | \"cross-thin-open\" | \"34\" | \"34\" | \"x-thin\" | \"134\" | \"134\" | \"x-thin-open\" | \"35\" | \"35\" | \"asterisk\" | \"135\" | \"135\" | \"asterisk-open\" | \"36\" | \"36\" | \"hash\" | \"136\" | \"136\" | \"hash-open\" | \"236\" | \"236\" | \"hash-dot\" | \"336\" | \"336\" | \"hash-open-dot\" | \"37\" | \"37\" | \"y-up\" | \"137\" | \"137\" | \"y-up-open\" | \"38\" | \"38\" | \"y-down\" | \"138\" | \"138\" | \"y-down-open\" | \"39\" | \"39\" | \"y-left\" | \"139\" | \"139\" | \"y-left-open\" | \"40\" | \"40\" | \"y-right\" | \"140\" | \"140\" | \"y-right-open\" | \"41\" | \"41\" | \"line-ew\" | \"141\" | \"141\" | \"line-ew-open\" | \"42\" | \"42\" | \"line-ns\" | \"142\" | \"142\" | \"line-ns-open\" | \"43\" | \"43\" | \"line-ne\" | \"143\" | \"143\" | \"line-ne-open\" | \"44\" | \"44\" | \"line-nw\" | \"144\" | \"144\" | \"line-nw-open\" | \"45\" | \"45\" | \"arrow-up\" | \"145\" | \"145\" | \"arrow-up-open\" | \"46\" | \"46\" | \"arrow-down\" | \"146\" | \"146\" | \"arrow-down-open\" | \"47\" | \"47\" | \"arrow-left\" | \"147\" | \"147\" | \"arrow-left-open\" | \"48\" | \"48\" | \"arrow-right\" | \"148\" | \"148\" | \"arrow-right-open\" | \"49\" | \"49\" | \"arrow-bar-up\" | \"149\" | \"149\" | \"arrow-bar-up-open\" | \"50\" | \"50\" | \"arrow-bar-down\" | \"150\" | \"150\" | \"arrow-bar-down-open\" | \"51\" | \"51\" | \"arrow-bar-left\" | \"151\" | \"151\" | \"arrow-bar-left-open\" | \"52\" | \"52\" | \"arrow-bar-right\" | \"152\" | \"152\" | \"arrow-bar-right-open\" | \"53\" | \"53\" | \"arrow\" | \"153\" | \"153\" | \"arrow-open\" | \"54\" | \"54\" | \"arrow-wide\" | \"154\" | \"154\" | \"arrow-wide-open\" )"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \"#444\"\nType: color"
          },
          {
            "label": "outliercolor",
            "detail": "Sets the border line color of the outlier sample points. Defaults to marker.color\nDefault: \nType: color"
          },
          {
            "label": "outlierwidth",
            "detail": "Sets the border line width (in px) of the outlier sample points.\nDefault: 1\nType: number greater than or equal to 0"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: 0\nType: number greater than or equal to 0"
          }
        ]
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker color of unselected points, applied only when a selection exists.\nDefault: \nType: color"
          },
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          },
          {
            "label": "size",
            "detail": "Sets the marker size of unselected points, applied only when a selection exists.\nDefault: \nType: number greater than or equal to 0"
          }
        ]
      }
    }
  },
  "choropleth": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"choropleth\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: \nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the color values.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "geojson",
        "detail": "Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \"FeatureCollection\" or \"Feature\" with geometries of type \"Polygon\" or \"MultiPolygon\".\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "featureidkey",
        "detail": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example \"properties.name\".\nDefault: \"id\"\nType: string"
      },
      {
        "label": "locations",
        "detail": "Sets the coordinates via location IDs or names. See `locationmode` for more info.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each location.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "hoverinfo",
        "detail": "Examples: \"location\", \"z\", \"location+z\", \"location+z+text\", \"all\"\nDefault: \nType: flaglist string. Any combination of \"location\", \"z\", \"text\", \"name\" joined with a \"+\" OR \"all\" or \"none\" or \"skip\"."
      },
      {
        "label": "hovertemplate",
        "detail": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.\nDefault: \"\"\nType: string or array of strings"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "geo",
        "detail": "Sets a reference between this trace's geospatial coordinates and a geographic map. If \"geo\" (the default value), the geospatial coordinates refer to `layout.geo`. If \"geo2\", the geospatial coordinates refer to `layout.geo2`, and so on.\nDefault: geo\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "marker",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: true\nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "zmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zmid",
        "detail": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "zmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "selectedpoints",
        "detail": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "selected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "unselected",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "hoverlabel",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "locationmode",
        "detail": "Determines the set of locations used to match entries in `locations` to regions on the map. Values \"ISO-3\", \"USA-states\", \"country names\" correspond to features on the base map and value \"geojson-id\" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.\nDefault: \"ISO-3\"\nType: enumerated , one of ( \"ISO-3\" | \"USA-states\" | \"country names\" | \"geojson-id\" )"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "selected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of selected points.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      }
    },
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "marker": {
      "items": [
        {
          "label": "line",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "opacity",
          "detail": "Sets the opacity of the locations.\nDefault: 1\nType: number or array of numbers between or equal to 0 and 1"
        }
      ],
      "line": {
        "items": [
          {
            "label": "color",
            "detail": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.\nDefault: \"#444\"\nType: color or array of colors"
          },
          {
            "label": "width",
            "detail": "Sets the width (in px) of the lines bounding the marker points.\nDefault: 1\nType: number or array of numbers greater than or equal to 0"
          }
        ]
      }
    },
    "hoverlabel": {
      "items": [
        {
          "label": "align",
          "detail": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\nDefault: \"auto\"\nType: enumerated or array of enumerateds , one of ( \"left\" | \"right\" | \"auto\" )"
        },
        {
          "label": "bgcolor",
          "detail": "Sets the background color of the hover labels for this trace\nDefault: \nType: color or array of colors"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the border color of the hover labels for this trace.\nDefault: \nType: color or array of colors"
        },
        {
          "label": "font",
          "detail": "Sets the font used in hover labels.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "namelength",
          "detail": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.\nDefault: 15\nType: integer or array of integers greater than or equal to -1"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color or array of colors"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string or array of strings"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number or array of numbers greater than or equal to 1"
          }
        ]
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "unselected": {
      "items": [
        {
          "label": "marker",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        }
      ],
      "marker": {
        "items": [
          {
            "label": "opacity",
            "detail": "Sets the marker opacity of unselected points, applied only when a selection exists.\nDefault: \nType: number between or equal to 0 and 1"
          }
        ]
      }
    }
  },
  "contourcarpet": {
    "items": [
      {
        "label": "type",
        "detail": "\nDefault: \nType: \"contourcarpet\""
      },
      {
        "label": "name",
        "detail": "Sets the trace name. The trace name appears as the legend item and on hover.\nDefault: \nType: string"
      },
      {
        "label": "visible",
        "detail": "Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\nDefault: true\nType: enumerated , one of ( true | false | \"legendonly\" )"
      },
      {
        "label": "showlegend",
        "detail": "Determines whether or not an item corresponding to this trace is shown in the legend.\nDefault: true\nType: boolean"
      },
      {
        "label": "legend",
        "detail": "Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.\nDefault: legend\nType: subplotid"
      },
      {
        "label": "legendrank",
        "detail": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.\nDefault: 1000\nType: number"
      },
      {
        "label": "legendgroup",
        "detail": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.\nDefault: \"\"\nType: string"
      },
      {
        "label": "legendgrouptitle",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "legendwidth",
        "detail": "Sets the width (in px or fraction) of the legend for this trace.\nDefault: \nType: number greater than or equal to 0"
      },
      {
        "label": "opacity",
        "detail": "Sets the opacity of the trace.\nDefault: 1\nType: number between or equal to 0 and 1"
      },
      {
        "label": "ids",
        "detail": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "z",
        "detail": "Sets the z data.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "a",
        "detail": "Sets the x coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "atype",
        "detail": "If \"array\", the heatmap's x coordinates are given by \"x\" (the default behavior when `x` is provided). If \"scaled\", the heatmap's x coordinates are given by \"x0\" and \"dx\" (the default behavior when `x` is not provided).\nDefault: \nType: enumerated , one of ( \"array\" | \"scaled\" )"
      },
      {
        "label": "a0",
        "detail": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "da",
        "detail": "Sets the x coordinate step. See `x0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "b",
        "detail": "Sets the y coordinates.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "btype",
        "detail": "If \"array\", the heatmap's y coordinates are given by \"y\" (the default behavior when `y` is provided) If \"scaled\", the heatmap's y coordinates are given by \"y0\" and \"dy\" (the default behavior when `y` is not provided)\nDefault: \nType: enumerated , one of ( \"array\" | \"scaled\" )"
      },
      {
        "label": "b0",
        "detail": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.\nDefault: 0\nType: number or categorical coordinate string"
      },
      {
        "label": "db",
        "detail": "Sets the y coordinate step. See `y0` for more info.\nDefault: 1\nType: number"
      },
      {
        "label": "text",
        "detail": "Sets the text elements associated with each z value.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "hovertext",
        "detail": "Same as `text`.\nDefault: \nType: data array, Vector"
      },
      {
        "label": "meta",
        "detail": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.\nDefault: \nType: number or categorical coordinate string"
      },
      {
        "label": "customdata",
        "detail": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements\nDefault: \nType: data array, Vector"
      },
      {
        "label": "xaxis",
        "detail": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.\nDefault: x\nType: subplotid"
      },
      {
        "label": "yaxis",
        "detail": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.\nDefault: y\nType: subplotid"
      },
      {
        "label": "coloraxis",
        "detail": "Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.\nDefault: \nType: subplotid"
      },
      {
        "label": "line",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "colorbar",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "autocolorscale",
        "detail": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.\nDefault: \nType: boolean"
      },
      {
        "label": "colorscale",
        "detail": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.\nDefault: \nType: colorscale"
      },
      {
        "label": "showscale",
        "detail": "Determines whether or not a colorbar is displayed for this trace.\nDefault: true\nType: boolean"
      },
      {
        "label": "reversescale",
        "detail": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.\nDefault: \nType: boolean"
      },
      {
        "label": "zauto",
        "detail": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.\nDefault: true\nType: boolean"
      },
      {
        "label": "zmax",
        "detail": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "zmid",
        "detail": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.\nDefault: \nType: number"
      },
      {
        "label": "zmin",
        "detail": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.\nDefault: \nType: number"
      },
      {
        "label": "autocontour",
        "detail": "Determines whether or not the contour level attributes are picked by an algorithm. If \"true\", the number of contour levels can be set in `ncontours`. If \"false\", set the contour level attributes in `contours`.\nDefault: true\nType: boolean"
      },
      {
        "label": "carpet",
        "detail": "The `carpet` of the carpet axes on which this contour trace lies\nDefault: \nType: string"
      },
      {
        "label": "contours",
        "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
      },
      {
        "label": "fillcolor",
        "detail": "Sets the fill color if `contours.type` is \"constraint\". Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\nDefault: \nType: color"
      },
      {
        "label": "ncontours",
        "detail": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is \"true\" or if `contours.size` is missing.\nDefault: 15\nType: integer greater than or equal to 1"
      },
      {
        "label": "transpose",
        "detail": "Transposes the z data.\nDefault: \nType: boolean"
      },
      {
        "label": "uirevision",
        "detail": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.\nDefault: \nType: number or categorical coordinate string"
      }
    ],
    "line": {
      "items": [
        {
          "label": "color",
          "detail": "Sets the color of the contour level. Has no effect if `contours.coloring` is set to \"lines\".\nDefault: \nType: color"
        },
        {
          "label": "dash",
          "detail": "Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").\nDefault: \"solid\"\nType: string"
        },
        {
          "label": "smoothing",
          "detail": "Sets the amount of smoothing for the contour lines, where \"0\" corresponds to no smoothing.\nDefault: 1\nType: number between or equal to 0 and 1.3"
        },
        {
          "label": "width",
          "detail": "Sets the contour line width in (in px) Defaults to \"0.5\" when `contours.type` is \"levels\". Defaults to \"2\" when `contour.type` is \"constraint\".\nDefault: \nType: number greater than or equal to 0"
        }
      ]
    },
    "colorbar": {
      "tickformatstops": {
        "items": [
          {
            "label": "dtickrange",
            "detail": "range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"\nDefault: \nType: Array"
          },
          {
            "label": "enabled",
            "detail": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.\nDefault: true\nType: boolean"
          },
          {
            "label": "name",
            "detail": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.\nDefault: \nType: string"
          },
          {
            "label": "templateitemname",
            "detail": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.\nDefault: \nType: string"
          },
          {
            "label": "value",
            "detail": "string - dtickformat for described zoom level, the same as \"tickformat\"\nDefault: \"\"\nType: string"
          }
        ]
      },
      "items": [
        {
          "label": "bgcolor",
          "detail": "Sets the color of padded area.\nDefault: \"rgba(0,0,0,0)\"\nType: color"
        },
        {
          "label": "bordercolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "borderwidth",
          "detail": "Sets the width (in px) or the border enclosing this color bar.\nDefault: 0\nType: number greater than or equal to 0"
        },
        {
          "label": "dtick",
          "detail": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L<f>\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M<n>\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "exponentformat",
          "detail": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.\nDefault: \"B\"\nType: enumerated , one of ( \"none\" | \"e\" | \"E\" | \"power\" | \"SI\" | \"B\" )"
        },
        {
          "label": "labelalias",
          "detail": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "len",
          "detail": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "lenmode",
          "detail": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.\nDefault: \"fraction\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "minexponent",
          "detail": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".\nDefault: 3\nType: number greater than or equal to 0"
        },
        {
          "label": "nticks",
          "detail": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".\nDefault: 0\nType: integer greater than or equal to 0"
        },
        {
          "label": "orientation",
          "detail": "Sets the orientation of the colorbar.\nDefault: \"v\"\nType: enumerated , one of ( \"h\" | \"v\" )"
        },
        {
          "label": "outlinecolor",
          "detail": "Sets the axis line color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "outlinewidth",
          "detail": "Sets the width (in px) of the axis line.\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "separatethousands",
          "detail": "If \"true\", even 4-digit integers are separated\nDefault: \nType: boolean"
        },
        {
          "label": "showexponent",
          "detail": "If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticklabels",
          "detail": "Determines whether or not the tick labels are drawn.\nDefault: true\nType: boolean"
        },
        {
          "label": "showtickprefix",
          "detail": "If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "showticksuffix",
          "detail": "Same as `showtickprefix` but for tick suffixes.\nDefault: \"all\"\nType: enumerated , one of ( \"all\" | \"first\" | \"last\" | \"none\" )"
        },
        {
          "label": "thickness",
          "detail": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.\nDefault: 30\nType: number greater than or equal to 0"
        },
        {
          "label": "thicknessmode",
          "detail": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.\nDefault: \"pixels\"\nType: enumerated , one of ( \"fraction\" | \"pixels\" )"
        },
        {
          "label": "tick0",
          "detail": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L<f>\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.\nDefault: \nType: number or categorical coordinate string"
        },
        {
          "label": "tickangle",
          "detail": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.\nDefault: \"auto\"\nType: angle"
        },
        {
          "label": "tickcolor",
          "detail": "Sets the tick color.\nDefault: \"#444\"\nType: color"
        },
        {
          "label": "tickfont",
          "detail": "Sets the color bar's tick label font\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "tickformat",
          "detail": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"\nDefault: \"\"\nType: string"
        },
        {
          "label": "tickformatstops",
          "detail": "\nDefault: \nType: Array of Dict where each Dict has one or more of the keys listed below."
        },
        {
          "label": "ticklabeloverflow",
          "detail": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".\nDefault: \nType: enumerated , one of ( \"allow\" | \"hide past div\" | \"hide past domain\" )"
        },
        {
          "label": "ticklabelposition",
          "detail": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".\nDefault: \"outside\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"outside top\" | \"inside top\" | \"outside left\" | \"inside left\" | \"outside right\" | \"inside right\" | \"outside bottom\" | \"inside bottom\" )"
        },
        {
          "label": "ticklabelstep",
          "detail": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".\nDefault: 1\nType: integer greater than or equal to 1"
        },
        {
          "label": "ticklen",
          "detail": "Sets the tick length (in px).\nDefault: 5\nType: number greater than or equal to 0"
        },
        {
          "label": "tickmode",
          "detail": "Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).\nDefault: \nType: enumerated , one of ( \"auto\" | \"linear\" | \"array\" )"
        },
        {
          "label": "tickprefix",
          "detail": "Sets a tick label prefix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticks",
          "detail": "Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.\nDefault: \"\"\nType: enumerated , one of ( \"outside\" | \"inside\" | \"\" )"
        },
        {
          "label": "ticksuffix",
          "detail": "Sets a tick label suffix.\nDefault: \"\"\nType: string"
        },
        {
          "label": "ticktext",
          "detail": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickvals",
          "detail": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.\nDefault: \nType: data array, Vector"
        },
        {
          "label": "tickwidth",
          "detail": "Sets the tick width (in px).\nDefault: 1\nType: number greater than or equal to 0"
        },
        {
          "label": "title",
          "detail": "\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "x",
          "detail": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "xanchor",
          "detail": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"left\" | \"center\" | \"right\" )"
        },
        {
          "label": "xpad",
          "detail": "Sets the amount of padding (in px) along the x direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "xref",
          "detail": "Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        },
        {
          "label": "y",
          "detail": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".\nDefault: \nType: number"
        },
        {
          "label": "yanchor",
          "detail": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".\nDefault: \nType: enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )"
        },
        {
          "label": "ypad",
          "detail": "Sets the amount of padding (in px) along the y direction.\nDefault: 10\nType: number greater than or equal to 0"
        },
        {
          "label": "yref",
          "detail": "Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.\nDefault: \"paper\"\nType: enumerated , one of ( \"container\" | \"paper\" )"
        }
      ],
      "tickfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      },
      "title": {
        "items": [
          {
            "label": "font",
            "detail": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.\nDefault: \nType: Dict containing one or more of the keys listed below."
          },
          {
            "label": "side",
            "detail": "Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and defaults to \"right\" when `orientation` if \"h\". Note that the title's location used to be set by the now deprecated `titleside` attribute.\nDefault: \nType: enumerated , one of ( \"right\" | \"top\" | \"bottom\" )"
          },
          {
            "label": "text",
            "detail": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.\nDefault: \nType: string"
          }
        ],
        "font": {
          "items": [
            {
              "label": "color",
              "detail": "\nDefault: \nType: color"
            },
            {
              "label": "family",
              "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
            },
            {
              "label": "size",
              "detail": "\nDefault: \nType: number greater than or equal to 1"
            }
          ]
        }
      }
    },
    "legendgrouptitle": {
      "items": [
        {
          "label": "font",
          "detail": "Sets this legend group's title font.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "text",
          "detail": "Sets the title of the legend group.\nDefault: \"\"\nType: string"
        }
      ],
      "font": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    },
    "contours": {
      "items": [
        {
          "label": "coloring",
          "detail": "Determines the coloring method showing the contour values. If \"fill\", coloring is done evenly between each contour level If \"lines\", coloring is done on the contour lines. If \"none\", no coloring is applied on this trace.\nDefault: \"fill\"\nType: enumerated , one of ( \"fill\" | \"lines\" | \"none\" )"
        },
        {
          "label": "end",
          "detail": "Sets the end contour level value. Must be more than `contours.start`\nDefault: \nType: number"
        },
        {
          "label": "labelfont",
          "detail": "Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.\nDefault: \nType: Dict containing one or more of the keys listed below."
        },
        {
          "label": "labelformat",
          "detail": "Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.\nDefault: \"\"\nType: string"
        },
        {
          "label": "operation",
          "detail": "Sets the constraint operation. \"=\" keeps regions equal to `value` \"<\" and \"<=\" keep regions less than `value` \">\" and \">=\" keep regions greater than `value` \"[]\", \"()\", \"[)\", and \"(]\" keep regions inside `value[0]` to `value[1]` \"][\", \")(\", \"](\", \")[\" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.\nDefault: \"=\"\nType: enumerated , one of ( \"=\" | \"<\" | \">=\" | \">\" | \"<=\" | \"[]\" | \"()\" | \"[)\" | \"(]\" | \"][\" | \")(\" | \"](\" | \")[\" )"
        },
        {
          "label": "showlabels",
          "detail": "Determines whether to label the contour lines with their values.\nDefault: \nType: boolean"
        },
        {
          "label": "showlines",
          "detail": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to \"fill\".\nDefault: true\nType: boolean"
        },
        {
          "label": "size",
          "detail": "Sets the step between each contour level. Must be positive.\nDefault: \nType: number greater than or equal to 0"
        },
        {
          "label": "start",
          "detail": "Sets the starting contour level value. Must be less than `contours.end`\nDefault: \nType: number"
        },
        {
          "label": "type",
          "detail": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.\nDefault: \"levels\"\nType: enumerated , one of ( \"levels\" | \"constraint\" )"
        },
        {
          "label": "value",
          "detail": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) \"value\" is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) \"value\" is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.\nDefault: 0\nType: number or categorical coordinate string"
        }
      ],
      "labelfont": {
        "items": [
          {
            "label": "color",
            "detail": "\nDefault: \nType: color"
          },
          {
            "label": "family",
            "detail": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\".\nDefault: \nType: string"
          },
          {
            "label": "size",
            "detail": "\nDefault: \nType: number greater than or equal to 1"
          }
        ]
      }
    }
  }
}
