from Bio.SearchIO._index import SearchIndexer
from _typeshed import Incomplete
from xml.sax.saxutils import XMLGenerator

__all__ = ['BlastXmlParser', 'BlastXmlIndexer', 'BlastXmlWriter']

class BlastXmlParser:
    xml_iter: Incomplete
    def __init__(self, handle, use_raw_query_ids: bool = False, use_raw_hit_ids: bool = False) -> None: ...
    def __iter__(self): ...

class BlastXmlIndexer(SearchIndexer):
    qstart_mark: bytes
    qend_mark: bytes
    block_size: int
    def __init__(self, filename, **kwargs) -> None: ...
    def __iter__(self): ...
    def get_raw(self, offset): ...

class _BlastXmlGenerator(XMLGenerator):
    def __init__(self, out, encoding: str = 'utf-8', indent: str = ' ', increment: int = 2) -> None: ...
    def startDocument(self) -> None: ...
    def startElement(self, name, attrs: Incomplete | None = None, children: bool = False) -> None: ...
    def endElement(self, name) -> None: ...
    def startParent(self, name, attrs: Incomplete | None = None) -> None: ...
    def endParent(self) -> None: ...
    def startParents(self, *names) -> None: ...
    def endParents(self, num) -> None: ...
    def simpleElement(self, name, content: Incomplete | None = None) -> None: ...
    def characters(self, content) -> None: ...

class BlastXmlWriter:
    xml: Incomplete
    def __init__(self, handle, use_raw_query_ids: bool = True, use_raw_hit_ids: bool = True) -> None: ...
    def write_file(self, qresults): ...
