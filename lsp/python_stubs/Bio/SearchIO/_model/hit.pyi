from ._base import _BaseSearchObject
from .hsp import HSP as HSP
from Bio.SearchIO._utils import allitems as allitems, getattr_str as getattr_str, optionalcascade as optionalcascade
from _typeshed import Incomplete

class Hit(_BaseSearchObject):
    attributes: Incomplete
    dbxrefs: Incomplete
    def __init__(self, hsps=(), id: Incomplete | None = None, query_id: Incomplete | None = None) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, hsp) -> bool: ...
    def __getitem__(self, idx): ...
    def __setitem__(self, idx, hsps) -> None: ...
    def __delitem__(self, idx) -> None: ...
    description: Incomplete
    query_description: Incomplete
    id: Incomplete
    query_id: Incomplete
    hsps: Incomplete
    @property
    def id_all(self): ...
    @property
    def description_all(self): ...
    @property
    def fragments(self): ...
    def append(self, hsp) -> None: ...
    def filter(self, func: Incomplete | None = None): ...
    def index(self, hsp): ...
    def map(self, func: Incomplete | None = None): ...
    def pop(self, index: int = -1): ...
    def sort(self, key: Incomplete | None = None, reverse: bool = False, in_place: bool = True): ...
