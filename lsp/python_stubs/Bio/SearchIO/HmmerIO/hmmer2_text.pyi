from ._base import _BaseHmmerTextIndexer
from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['Hmmer2TextParser', 'Hmmer2TextIndexer']

class _HitPlaceholder:
    def createHit(self, hsp_list): ...

class Hmmer2TextParser:
    handle: Incomplete
    buf: Incomplete
    def __init__(self, handle) -> None: ...
    def __iter__(self): ...
    line: Incomplete
    def read_next(self, rstrip: bool = True): ...
    def push_back(self, line) -> None: ...
    def parse_key_value(self): ...
    def parse_preamble(self): ...
    qresult: Incomplete
    def parse_qresult(self) -> Generator[Incomplete]: ...
    def parse_hits(self): ...
    def parse_hsps(self, hit_placeholders) -> None: ...
    def parse_hsp_alignments(self) -> None: ...

class Hmmer2TextIndexer(_BaseHmmerTextIndexer):
    qresult_start: bytes
    qresult_end: bytes
    def __iter__(self): ...
