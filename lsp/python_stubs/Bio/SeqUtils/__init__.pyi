from Bio.Data import IUPACData as IUPACData
from Bio.Data.CodonTable import standard_dna_table as standard_dna_table
from Bio.Seq import Seq as Seq, complement as complement, complement_rna as complement_rna, translate as translate
from _typeshed import Incomplete

def gc_fraction(seq, ambiguous: str = 'remove'): ...
def GC123(seq): ...
def GC_skew(seq, window: int = 100): ...
def xGC_skew(seq, window: int = 1000, zoom: int = 100, r: int = 300, px: int = 100, py: int = 100) -> None: ...
def nt_search(seq, subseq): ...
def seq3(seq, custom_map: Incomplete | None = None, undef_code: str = 'Xaa'): ...
def seq1(seq, custom_map: Incomplete | None = None, undef_code: str = 'X'): ...
def molecular_weight(seq, seq_type: str = 'DNA', double_stranded: bool = False, circular: bool = False, monoisotopic: bool = False): ...
def six_frame_translations(seq, genetic_code: int = 1): ...

class CodonAdaptationIndex(dict):
    def __init__(self, sequences, table=...) -> None: ...
    def calculate(self, sequence): ...
    def optimize(self, sequence, seq_type: str = 'DNA', strict: bool = True): ...
