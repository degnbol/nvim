import numpy as np
from _typeshed import Incomplete

def m2rotaxis(m): ...
def vector_to_axis(line, point): ...
def rotaxis2m(theta, vector): ...
rotaxis = rotaxis2m

def refmat(p, q): ...
def rotmat(p, q): ...
def calc_angle(v1, v2, v3): ...
def calc_dihedral(v1, v2, v3, v4): ...

class Vector:
    def __init__(self, x, y: Incomplete | None = None, z: Incomplete | None = None) -> None: ...
    def __neg__(self): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __truediv__(self, x): ...
    def __pow__(self, other): ...
    def __getitem__(self, i): ...
    def __setitem__(self, i, value) -> None: ...
    def __contains__(self, i) -> bool: ...
    def norm(self): ...
    def normsq(self): ...
    def normalize(self) -> None: ...
    def normalized(self): ...
    def angle(self, other): ...
    def get_array(self): ...
    def left_multiply(self, matrix): ...
    def right_multiply(self, matrix): ...
    def copy(self): ...

def homog_rot_mtx(angle_rads: float, axis: str) -> np.ndarray: ...
def set_Z_homog_rot_mtx(angle_rads: float, mtx: np.ndarray): ...
def set_Y_homog_rot_mtx(angle_rads: float, mtx: np.ndarray): ...
def set_X_homog_rot_mtx(angle_rads: float, mtx: np.ndarray): ...
def homog_trans_mtx(x: float, y: float, z: float) -> np.ndarray: ...
def set_homog_trans_mtx(x: float, y: float, z: float, mtx: np.ndarray): ...
def homog_scale_mtx(scale: float) -> np.ndarray: ...
def get_spherical_coordinates(xyz: np.ndarray) -> tuple[float, float, float]: ...

gtm: Incomplete
gmrz: Incomplete
gmry: Incomplete
gmrz2: Incomplete

def coord_space(a0: np.ndarray, a1: np.ndarray, a2: np.ndarray, rev: bool = False) -> tuple[np.ndarray, np.ndarray | None]: ...
def multi_rot_Z(angle_rads: np.ndarray) -> np.ndarray: ...
def multi_rot_Y(angle_rads: np.ndarray) -> np.ndarray: ...
def multi_coord_space(a3: np.ndarray, dLen: int, rev: bool = False) -> np.ndarray: ...
