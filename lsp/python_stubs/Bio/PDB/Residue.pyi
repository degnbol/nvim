from Bio.PDB.Atom import Atom as Atom
from Bio.PDB.Chain import Chain as Chain
from Bio.PDB.Entity import DisorderedEntityWrapper as DisorderedEntityWrapper, Entity as Entity
from Bio.PDB.PDBExceptions import PDBConstructionException as PDBConstructionException
from _typeshed import Incomplete
from collections.abc import Generator

class Residue(Entity['Chain', 'Atom']):
    level: str
    disordered: int
    resname: Incomplete
    segid: Incomplete
    internal_coord: Incomplete
    def __init__(self, id, resname, segid) -> None: ...
    def strictly_equals(self, other: _ResidueT, compare_coordinates: bool = False) -> bool: ...
    def add(self, atom) -> None: ...
    def flag_disordered(self) -> None: ...
    def is_disordered(self): ...
    def get_resname(self): ...
    def get_unpacked_list(self): ...
    def get_segid(self): ...
    def get_atoms(self) -> Generator[Incomplete, Incomplete]: ...

class DisorderedResidue(DisorderedEntityWrapper):
    def __init__(self, id) -> None: ...
    def add(self, atom) -> None: ...
    def sort(self) -> None: ...
    def disordered_add(self, residue) -> None: ...
    selected_child: Incomplete
    def disordered_remove(self, resname) -> None: ...
