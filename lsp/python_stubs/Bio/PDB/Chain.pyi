from Bio.PDB.Entity import Entity as Entity
from Bio.PDB.Model import Model as Model
from Bio.PDB.Residue import Residue as Residue
from Bio.PDB.internal_coords import IC_Chain as IC_Chain
from _typeshed import Incomplete
from collections.abc import Generator

class Chain(Entity['Model', 'Residue']):
    level: str
    internal_coord: Incomplete
    def __init__(self, id) -> None: ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __getitem__(self, id): ...
    def __contains__(self, id) -> bool: ...
    def __delitem__(self, id) -> None: ...
    def get_unpacked_list(self): ...
    def has_id(self, id): ...
    def get_residues(self) -> Generator[Incomplete, Incomplete]: ...
    def get_atoms(self) -> Generator[Incomplete, Incomplete]: ...
    def atom_to_internal_coordinates(self, verbose: bool = False) -> None: ...
    def internal_to_atom_coordinates(self, verbose: bool = False, start: int | None = None, fin: int | None = None): ...
