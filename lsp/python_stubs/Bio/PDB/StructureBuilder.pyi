import numpy as np
from Bio.PDB.Atom import Atom as Atom, DisorderedAtom as DisorderedAtom
from Bio.PDB.Chain import Chain as Chain
from Bio.PDB.Model import Model as Model
from Bio.PDB.PDBExceptions import PDBConstructionException as PDBConstructionException, PDBConstructionWarning as PDBConstructionWarning
from Bio.PDB.Residue import DisorderedResidue as DisorderedResidue, Residue as Residue
from Bio.PDB.Structure import Structure as Structure
from _typeshed import Incomplete

class StructureBuilder:
    atom: Incomplete
    chain: Incomplete
    header: Incomplete
    line_counter: int
    model: Incomplete
    residue: Incomplete
    segid: Incomplete
    structure: Incomplete
    def __init__(self) -> None: ...
    def set_header(self, header) -> None: ...
    def set_line_counter(self, line_counter: int): ...
    def init_structure(self, structure_id: str): ...
    def init_model(self, model_id: int, serial_num: int | None = None): ...
    def init_chain(self, chain_id: str): ...
    def init_seg(self, segid: str): ...
    def init_residue(self, resname: str, field: str, resseq: int, icode: str): ...
    def init_atom(self, name: str, coord: np.ndarray, b_factor: float | None, occupancy: float | None, altloc: str, fullname: str, serial_number: Incomplete | None = None, element: str | None = None, pqr_charge: float | None = None, radius: float | None = None, is_pqr: bool = False): ...
    def set_anisou(self, anisou_array) -> None: ...
    def set_siguij(self, siguij_array) -> None: ...
    def set_sigatm(self, sigatm_array) -> None: ...
    def get_structure(self): ...
    def set_symmetry(self, spacegroup, cell) -> None: ...
