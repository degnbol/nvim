from Bio import BiopythonWarning as BiopythonWarning
from Bio.PDB.Atom import Atom as Atom
from Bio.PDB.PDBExceptions import PDBConstructionException as PDBConstructionException
from _typeshed import Incomplete
from collections.abc import Generator
from typing import Any, Generic

class Entity(Generic[_Parent, _Child]):
    parent: _Parent | None
    child_list: list[_Child]
    child_dict: dict[Any, _Child]
    level: str
    full_id: Incomplete
    xtra: Incomplete
    def __init__(self, id) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, id): ...
    def __delitem__(self, id) -> None: ...
    def __contains__(self, id) -> bool: ...
    def __iter__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __hash__(self): ...
    @property
    def id(self): ...
    @id.setter
    def id(self, value) -> None: ...
    def strictly_equals(self, other: _Self, compare_coordinates: bool = False) -> bool: ...
    def get_level(self): ...
    def set_parent(self, entity: _Parent): ...
    def detach_parent(self) -> None: ...
    def detach_child(self, id) -> None: ...
    def add(self, entity: _Child): ...
    def insert(self, pos: int, entity: _Child): ...
    def get_iterator(self) -> Generator[Incomplete, Incomplete]: ...
    def get_list(self): ...
    def has_id(self, id): ...
    def get_parent(self): ...
    def get_id(self): ...
    def get_full_id(self): ...
    def transform(self, rot, tran) -> None: ...
    def center_of_mass(self, geometric: bool = False): ...
    def copy(self): ...

class DisorderedEntityWrapper:
    id: Incomplete
    child_dict: Incomplete
    selected_child: Incomplete
    parent: Incomplete
    def __init__(self, id) -> None: ...
    def __getattr__(self, method): ...
    def __getitem__(self, id): ...
    def __setitem__(self, id, child) -> None: ...
    def __contains__(self, id) -> bool: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __sub__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def copy(self): ...
    def get_id(self): ...
    def strictly_equals(self, other: DisorderedEntityWrapper, compare_coordinates: bool = False) -> bool: ...
    def disordered_has_id(self, id): ...
    def detach_parent(self) -> None: ...
    def get_parent(self): ...
    def set_parent(self, parent) -> None: ...
    def disordered_select(self, id) -> None: ...
    def disordered_add(self, child) -> None: ...
    def disordered_remove(self, child) -> None: ...
    def is_disordered(self): ...
    def disordered_get_id_list(self): ...
    def disordered_get(self, id: Incomplete | None = None): ...
    def disordered_get_list(self): ...
