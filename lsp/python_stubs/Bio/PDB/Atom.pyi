import numpy as np
from Bio.Data import IUPACData as IUPACData
from Bio.PDB.Entity import DisorderedEntityWrapper as DisorderedEntityWrapper
from Bio.PDB.PDBExceptions import PDBConstructionWarning as PDBConstructionWarning
from Bio.PDB.Residue import Residue as Residue
from Bio.PDB.vectors import Vector as Vector
from _typeshed import Incomplete

class Atom:
    level: str
    parent: Residue | None
    name: Incomplete
    fullname: Incomplete
    coord: Incomplete
    bfactor: Incomplete
    occupancy: Incomplete
    altloc: Incomplete
    full_id: Incomplete
    id: Incomplete
    disordered_flag: int
    anisou_array: Incomplete
    siguij_array: Incomplete
    sigatm_array: Incomplete
    serial_number: Incomplete
    xtra: dict
    element: Incomplete
    mass: Incomplete
    pqr_charge: Incomplete
    radius: Incomplete
    def __init__(self, name: str, coord: np.ndarray, bfactor: float | None, occupancy: float | None, altloc: str, fullname: str, serial_number, element: str | None = None, pqr_charge: float | None = None, radius: float | None = None) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __hash__(self): ...
    def __sub__(self, other): ...
    def strictly_equals(self, other: _AtomT, compare_coordinates: bool = False) -> bool: ...
    def set_serial_number(self, n) -> None: ...
    def set_bfactor(self, bfactor: float | None): ...
    def set_coord(self, coord: np.ndarray): ...
    def set_altloc(self, altloc: str): ...
    def set_occupancy(self, occupancy: float | None): ...
    def set_sigatm(self, sigatm_array: np.ndarray | None): ...
    def set_siguij(self, siguij_array: np.ndarray | None): ...
    def set_anisou(self, anisou_array: np.ndarray | None): ...
    def set_charge(self, pqr_charge: float | None): ...
    def set_radius(self, radius: float | None): ...
    def flag_disorder(self) -> None: ...
    def is_disordered(self) -> int: ...
    def set_parent(self, parent) -> None: ...
    def detach_parent(self) -> None: ...
    def get_sigatm(self) -> np.ndarray | None: ...
    def get_siguij(self) -> np.ndarray | None: ...
    def get_anisou(self) -> np.ndarray | None: ...
    def get_parent(self) -> Residue | None: ...
    def get_serial_number(self): ...
    def get_name(self) -> str: ...
    def get_id(self) -> str: ...
    def get_full_id(self): ...
    def get_coord(self) -> np.ndarray: ...
    def get_bfactor(self) -> float | None: ...
    def get_occupancy(self) -> float | None: ...
    def get_fullname(self) -> str: ...
    def get_altloc(self) -> str: ...
    def get_level(self) -> str: ...
    def get_charge(self) -> float | None: ...
    def get_radius(self) -> float | None: ...
    def transform(self, rot: np.ndarray, tran: np.ndarray): ...
    def get_vector(self) -> Vector: ...
    def copy(self): ...

class DisorderedAtom(DisorderedEntityWrapper):
    last_occupancy: Incomplete
    def __init__(self, id: str) -> None: ...
    def __iter__(self): ...
    def center_of_mass(self): ...
    def disordered_get_list(self) -> list[Atom]: ...
    def disordered_add(self, atom) -> None: ...
    selected_child: Incomplete
    def disordered_remove(self, altloc: str): ...
    def transform(self, rot: np.ndarray, tran: np.ndarray): ...
