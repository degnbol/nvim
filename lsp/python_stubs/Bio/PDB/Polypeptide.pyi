from Bio.Data.PDBData import nucleic_letters_3to1 as nucleic_letters_3to1, nucleic_letters_3to1_extended as nucleic_letters_3to1_extended, protein_letters_3to1 as protein_letters_3to1, protein_letters_3to1_extended as protein_letters_3to1_extended
from Bio.PDB.PDBExceptions import PDBException as PDBException
from Bio.PDB.vectors import calc_angle as calc_angle, calc_dihedral as calc_dihedral
from Bio.Seq import Seq as Seq
from _typeshed import Incomplete

aa3: Incomplete
aa1: Incomplete
standard_aa_names = aa3
d1_to_index: Incomplete
dindex_to_1: Incomplete
d3_to_index: Incomplete
dindex_to_3: Incomplete
n1 = aa1[i]
n3 = aa3[i]

def index_to_one(index): ...
def one_to_index(s): ...
def index_to_three(i): ...
def three_to_index(s): ...
def is_aa(residue, standard: bool = False): ...
def is_nucleic(residue, standard: bool = False): ...

class Polypeptide(list):
    def get_ca_list(self): ...
    def get_phi_psi_list(self): ...
    def get_tau_list(self): ...
    def get_theta_list(self): ...
    def get_sequence(self): ...

class _PPBuilder:
    radius: Incomplete
    def __init__(self, radius) -> None: ...
    def build_peptides(self, entity, aa_only: int = 1): ...

class CaPPBuilder(_PPBuilder):
    def __init__(self, radius: float = 4.3) -> None: ...

class PPBuilder(_PPBuilder):
    def __init__(self, radius: float = 1.8) -> None: ...
