from _typeshed import Incomplete

class ChainException(Exception): ...
class NodeException(Exception): ...

class Chain:
    chain: dict[int, Node]
    id: int
    def __init__(self) -> None: ...
    def all_ids(self) -> list[int]: ...
    def add(self, node: Node, prev: int | None = None) -> int: ...
    def collapse(self, id): ...
    def kill(self, id) -> None: ...
    def unlink(self, id): ...
    def link(self, parent, child) -> None: ...
    def is_parent_of(self, parent, grandchild): ...
    def trace(self, start, finish): ...

class Node:
    id: Incomplete
    data: Incomplete
    prev: Incomplete
    succ: Incomplete
    def __init__(self, data: Incomplete | None = None) -> None: ...
    def set_id(self, id) -> None: ...
    def get_id(self): ...
    def get_succ(self): ...
    def get_prev(self): ...
    def add_succ(self, id) -> None: ...
    def remove_succ(self, id) -> None: ...
    def set_succ(self, new_succ) -> None: ...
    def set_prev(self, id) -> None: ...
    def get_data(self): ...
    def set_data(self, data) -> None: ...
