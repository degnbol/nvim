from . import Nodes as Nodes
from _typeshed import Incomplete

PRECISION_BRANCHLENGTH: int
PRECISION_SUPPORT: int
NODECOMMENT_START: str
NODECOMMENT_END: str

class TreeError(Exception): ...

class NodeData:
    taxon: Incomplete
    branchlength: Incomplete
    support: Incomplete
    comment: Incomplete
    def __init__(self, taxon: Incomplete | None = None, branchlength: float = 0.0, support: Incomplete | None = None, comment: Incomplete | None = None) -> None: ...

class Tree(Nodes.Chain):
    dataclass: Incomplete
    max_support: Incomplete
    weight: Incomplete
    rooted: Incomplete
    name: Incomplete
    root: Incomplete
    def __init__(self, tree: Incomplete | None = None, weight: float = 1.0, rooted: bool = False, name: str = '', data=..., values_are_support: bool = False, max_support: float = 1.0) -> None: ...
    def node(self, node_id): ...
    def split(self, parent_id: Incomplete | None = None, n: int = 2, branchlength: float = 1.0): ...
    def search_taxon(self, taxon): ...
    def prune(self, taxon): ...
    def get_taxa(self, node_id: Incomplete | None = None): ...
    def get_terminals(self): ...
    def is_terminal(self, node): ...
    def is_internal(self, node): ...
    def is_preterminal(self, node): ...
    def count_terminals(self, node: Incomplete | None = None): ...
    def collapse_genera(self, space_equals_underscore: bool = True) -> None: ...
    def sum_branchlength(self, root: Incomplete | None = None, node: Incomplete | None = None): ...
    def set_subtree(self, node): ...
    def is_identical(self, tree2): ...
    def is_compatible(self, tree2, threshold, strict: bool = True): ...
    def common_ancestor(self, node1, node2): ...
    def distance(self, node1, node2): ...
    def is_monophyletic(self, taxon_list): ...
    def is_bifurcating(self, node: Incomplete | None = None): ...
    def branchlength2support(self) -> None: ...
    def convert_absolute_support(self, nrep) -> None: ...
    def has_support(self, node: Incomplete | None = None): ...
    def randomize(self, ntax: Incomplete | None = None, taxon_list: Incomplete | None = None, branchlength: float = 1.0, branchlength_sd: Incomplete | None = None, bifurcate: bool = True) -> None: ...
    def display(self) -> None: ...
    support_as_branchlengths: Incomplete
    branchlengths_only: Incomplete
    ignore_comments: Incomplete
    plain: Incomplete
    def to_string(self, support_as_branchlengths: bool = False, branchlengths_only: bool = False, plain: bool = True, plain_newick: bool = False, ladderize: Incomplete | None = None, ignore_comments: bool = True): ...
    unrooted: Incomplete
    def unroot(self): ...
    def root_with_outgroup(self, outgroup: Incomplete | None = None): ...
    def merge_with_support(self, bstrees: Incomplete | None = None, constree: Incomplete | None = None, threshold: float = 0.5, outgroup: Incomplete | None = None) -> None: ...

def consensus(trees, threshold: float = 0.5, outgroup: Incomplete | None = None): ...
