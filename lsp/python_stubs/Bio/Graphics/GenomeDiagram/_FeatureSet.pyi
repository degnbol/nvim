from ._Feature import Feature as Feature
from _typeshed import Incomplete

class FeatureSet:
    parent: Incomplete
    id: Incomplete
    next_id: int
    features: Incomplete
    name: Incomplete
    def __init__(self, set_id: Incomplete | None = None, name: Incomplete | None = None, parent: Incomplete | None = None) -> None: ...
    def add_feature(self, feature, **kwargs): ...
    def del_feature(self, feature_id) -> None: ...
    def set_all_features(self, attr, value) -> None: ...
    def get_features(self, attribute: Incomplete | None = None, value: Incomplete | None = None, comparator: Incomplete | None = None): ...
    def get_ids(self): ...
    def range(self): ...
    def to_string(self, verbose: int = 0): ...
    def __len__(self) -> int: ...
    def __getitem__(self, key): ...
