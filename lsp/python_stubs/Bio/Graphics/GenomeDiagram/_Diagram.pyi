from ._CircularDrawer import CircularDrawer as CircularDrawer
from ._LinearDrawer import LinearDrawer as LinearDrawer
from ._Track import Track as Track
from _typeshed import Incomplete

class Diagram:
    tracks: Incomplete
    name: Incomplete
    format: Incomplete
    pagesize: Incomplete
    orientation: Incomplete
    x: Incomplete
    y: Incomplete
    xl: Incomplete
    xr: Incomplete
    yt: Incomplete
    yb: Incomplete
    start: Incomplete
    end: Incomplete
    tracklines: Incomplete
    fragments: Incomplete
    fragment_size: Incomplete
    track_size: Incomplete
    circular: Incomplete
    circle_core: Incomplete
    cross_track_links: Incomplete
    drawing: Incomplete
    def __init__(self, name: Incomplete | None = None, format: str = 'circular', pagesize: str = 'A3', orientation: str = 'landscape', x: float = 0.05, y: float = 0.05, xl: Incomplete | None = None, xr: Incomplete | None = None, yt: Incomplete | None = None, yb: Incomplete | None = None, start: Incomplete | None = None, end: Incomplete | None = None, tracklines: bool = False, fragments: int = 10, fragment_size: Incomplete | None = None, track_size: float = 0.75, circular: bool = True, circle_core: float = 0.0) -> None: ...
    def set_all_tracks(self, attr, value) -> None: ...
    def draw(self, format: Incomplete | None = None, pagesize: Incomplete | None = None, orientation: Incomplete | None = None, x: Incomplete | None = None, y: Incomplete | None = None, xl: Incomplete | None = None, xr: Incomplete | None = None, yt: Incomplete | None = None, yb: Incomplete | None = None, start: Incomplete | None = None, end: Incomplete | None = None, tracklines: Incomplete | None = None, fragments: Incomplete | None = None, fragment_size: Incomplete | None = None, track_size: Incomplete | None = None, circular: Incomplete | None = None, circle_core: Incomplete | None = None, cross_track_links: Incomplete | None = None) -> None: ...
    def write(self, filename: str = 'test1.ps', output: str = 'PS', dpi: int = 72): ...
    def write_to_string(self, output: str = 'PS', dpi: int = 72): ...
    def add_track(self, track, track_level) -> None: ...
    def new_track(self, track_level, **args): ...
    def del_track(self, track_level) -> None: ...
    def get_tracks(self): ...
    def move_track(self, from_level, to_level) -> None: ...
    def renumber_tracks(self, low: int = 1, step: int = 1) -> None: ...
    def get_levels(self): ...
    def get_drawn_levels(self): ...
    def range(self): ...
    def __getitem__(self, key): ...
