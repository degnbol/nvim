from _typeshed import Incomplete

def page_sizes(size): ...
def draw_box(point1, point2, color=..., border: Incomplete | None = None, colour: Incomplete | None = None, **kwargs): ...
def draw_cut_corner_box(point1, point2, corner: float = 0.5, color=..., border: Incomplete | None = None, **kwargs): ...
def draw_polygon(list_of_points, color=..., border: Incomplete | None = None, colour: Incomplete | None = None, **kwargs): ...
def draw_arrow(point1, point2, color=..., border: Incomplete | None = None, shaft_height_ratio: float = 0.4, head_length_ratio: float = 0.5, orientation: str = 'right', colour: Incomplete | None = None, **kwargs): ...
def deduplicate(points): ...
def angle2trig(theta): ...
def intermediate_points(start, end, graph_data): ...

class AbstractDrawer:
    tracklines: Incomplete
    cross_track_links: Incomplete
    def __init__(self, parent, pagesize: str = 'A3', orientation: str = 'landscape', x: float = 0.05, y: float = 0.05, xl: Incomplete | None = None, xr: Incomplete | None = None, yt: Incomplete | None = None, yb: Incomplete | None = None, start: Incomplete | None = None, end: Incomplete | None = None, tracklines: int = 0, cross_track_links: Incomplete | None = None) -> None: ...
    pagesize: Incomplete
    def set_page_size(self, pagesize, orientation) -> None: ...
    pagewidth: Incomplete
    pageheight: Incomplete
    def set_margins(self, x, y, xl, xr, yt, yb) -> None: ...
    length: Incomplete
    def set_bounds(self, start, end) -> None: ...
    def is_in_bounds(self, value): ...
    def __len__(self) -> int: ...
