import abc
import collections.abc
import contextlib
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from collections.abc import Generator

@contextlib.contextmanager
def as_handle(handleish, mode: str = 'r', **kwargs) -> Generator[Incomplete]: ...

class _IndexedSeqFileProxy(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __iter__(self): ...
    @abstractmethod
    def get(self, offset): ...
    def get_raw(self, offset) -> None: ...

class _IndexedSeqFileDict(collections.abc.Mapping):
    def __init__(self, random_access_proxy, key_function, repr, obj_repr) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __getitem__(self, key): ...
    def get_raw(self, key): ...
    def close(self) -> None: ...

class _SQLiteManySeqFilesDict(_IndexedSeqFileDict):
    def __init__(self, index_filename, filenames, proxy_factory, fmt, key_function, repr, max_open: int = 10) -> None: ...
    def __contains__(self, key) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __getitem__(self, key): ...
    def get_raw(self, key): ...
    def close(self) -> None: ...
