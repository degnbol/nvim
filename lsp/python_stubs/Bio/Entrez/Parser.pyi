from Bio import Entrez as Entrez, StreamModeError as StreamModeError
from _typeshed import Incomplete
from collections.abc import Generator

class NoneElement:
    tag: Incomplete
    key: Incomplete
    attributes: Incomplete
    def __init__(self, tag, attributes, key) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class IntegerElement(int):
    def __new__(cls, value, *args, **kwargs): ...
    tag: Incomplete
    attributes: Incomplete
    key: Incomplete
    def __init__(self, value, tag, attributes, key) -> None: ...

class StringElement(str):
    def __new__(cls, value, *args, **kwargs): ...
    tag: Incomplete
    attributes: Incomplete
    key: Incomplete
    def __init__(self, value, tag, attributes, key) -> None: ...

class ListElement(list):
    tag: Incomplete
    key: Incomplete
    attributes: Incomplete
    allowed_tags: Incomplete
    def __init__(self, tag, attributes, allowed_tags, key: Incomplete | None = None) -> None: ...
    def store(self, value) -> None: ...

class DictionaryElement(dict):
    tag: Incomplete
    key: Incomplete
    attributes: Incomplete
    allowed_tags: Incomplete
    repeated_tags: Incomplete
    def __init__(self, tag, attrs, allowed_tags, repeated_tags: Incomplete | None = None, key: Incomplete | None = None) -> None: ...
    def store(self, value) -> None: ...

class OrderedListElement(list):
    tag: Incomplete
    key: Incomplete
    attributes: Incomplete
    allowed_tags: Incomplete
    first_tag: Incomplete
    def __init__(self, tag, attributes, allowed_tags, first_tag, key: Incomplete | None = None) -> None: ...
    def store(self, value) -> None: ...

class ErrorElement(str):
    def __new__(cls, value, *args, **kwargs): ...
    tag: Incomplete
    key: Incomplete
    def __init__(self, value, tag) -> None: ...

class NotXMLError(ValueError):
    msg: Incomplete
    def __init__(self, message) -> None: ...

class CorruptedXMLError(ValueError):
    msg: Incomplete
    def __init__(self, message) -> None: ...

class ValidationError(ValueError):
    name: Incomplete
    def __init__(self, name) -> None: ...

class DataHandlerMeta(type):
    def __init__(cls, *args, **kwargs) -> None: ...
    @property
    def directory(cls): ...
    @directory.setter
    def directory(cls, value) -> None: ...

class DataHandler(metaclass=DataHandlerMeta):
    global_dtd_dir: Incomplete
    global_xsd_dir: Incomplete
    local_dtd_dir: Incomplete
    local_xsd_dir: Incomplete
    dtd_urls: Incomplete
    element: Incomplete
    level: int
    data: Incomplete
    attributes: Incomplete
    allowed_tags: Incomplete
    constructors: Incomplete
    strings: Incomplete
    items: Incomplete
    errors: Incomplete
    validating: Incomplete
    ignore_errors: Incomplete
    parser: Incomplete
    schema_namespace: Incomplete
    namespace_level: Incomplete
    namespace_prefix: Incomplete
    characterDataHandler: Incomplete
    def __init__(self, validate, escape, ignore_errors) -> None: ...
    def read(self, source): ...
    def parse(self, source) -> Generator[Incomplete, Incomplete]: ...
    def xmlDeclHandler(self, version, encoding, standalone) -> None: ...
    def handleMissingDocumentDefinition(self, tag, attrs) -> None: ...
    def startNamespaceDeclHandler(self, prefix, uri) -> None: ...
    def endNamespaceDeclHandler(self, prefix) -> None: ...
    def schemaHandler(self, name, attrs) -> None: ...
    record: Incomplete
    def startElementHandler(self, tag, attrs) -> None: ...
    def startRawElementHandler(self, name, attrs) -> None: ...
    def startSkipElementHandler(self, name, attrs) -> None: ...
    def endStringElementHandler(self, tag) -> None: ...
    def endRawElementHandler(self, name) -> None: ...
    def endSkipElementHandler(self, name) -> None: ...
    def endErrorElementHandler(self, tag) -> None: ...
    def endElementHandler(self, name) -> None: ...
    def endIntegerElementHandler(self, tag) -> None: ...
    def characterDataHandlerRaw(self, content) -> None: ...
    def characterDataHandlerEscape(self, content) -> None: ...
    def skipCharacterDataHandler(self, content) -> None: ...
    def parse_xsd(self, root) -> None: ...
    def elementDecl(self, name, model) -> None: ...
    def open_dtd_file(self, filename): ...
    def open_xsd_file(self, filename): ...
    def save_dtd_file(self, filename, text) -> None: ...
    def save_xsd_file(self, filename, text) -> None: ...
    def externalEntityRefHandler(self, context, base, systemId, publicId): ...
