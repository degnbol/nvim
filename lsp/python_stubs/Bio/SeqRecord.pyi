from Bio import BiopythonDeprecationWarning as BiopythonDeprecationWarning, StreamModeError as StreamModeError
from Bio.Seq import MutableSeq as MutableSeq, Seq as Seq, UndefinedSequenceError as UndefinedSequenceError
from Bio.SeqFeature import SeqFeature as SeqFeature
from _typeshed import Incomplete
from collections.abc import Iterator, Sequence
from typing import Any, NoReturn, overload

class _RestrictedDict(dict[str, Sequence[Any]]):
    def __init__(self, length: int) -> None: ...
    def __setitem__(self, key: str, value: Sequence[Any]) -> None: ...
    def update(self, new_dict) -> None: ...

class SeqRecord:
    annotations: _AnnotationsDict
    dbxrefs: list[str]
    id: Incomplete
    name: Incomplete
    description: Incomplete
    features: Incomplete
    def __init__(self, seq: Seq | MutableSeq | None, id: str | None = '<unknown id>', name: str = '<unknown name>', description: str = '<unknown description>', dbxrefs: list[str] | None = None, features: list['SeqFeature'] | None = None, annotations: _AnnotationsDict | None = None, letter_annotations: dict[str, Sequence[Any]] | None = None) -> None: ...
    @property
    def letter_annotations(self) -> dict[str, Sequence[Any]]: ...
    @letter_annotations.setter
    def letter_annotations(self, value: dict[str, Sequence[Any]]) -> None: ...
    @property
    def seq(self) -> Seq | MutableSeq | None: ...
    @seq.setter
    def seq(self, value: Seq | MutableSeq) -> None: ...
    @overload
    def __getitem__(self, index: int) -> str: ...
    @overload
    def __getitem__(self, index: slice) -> SeqRecord: ...
    def __iter__(self) -> Iterator[str]: ...
    def __contains__(self, char: str) -> bool: ...
    def __bytes__(self) -> bytes: ...
    def format(self, format: str) -> str: ...
    def __format__(self, format_spec: str) -> str: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: Any) -> NoReturn: ...
    def __le__(self, other: Any) -> NoReturn: ...
    def __eq__(self, other: object) -> NoReturn: ...
    def __ne__(self, other: object) -> NoReturn: ...
    def __gt__(self, other: Any) -> NoReturn: ...
    def __ge__(self, other: Any) -> NoReturn: ...
    def __bool__(self) -> bool: ...
    def __add__(self, other: SeqRecord | Seq | MutableSeq | str) -> SeqRecord: ...
    def __radd__(self, other: Seq | MutableSeq | str) -> SeqRecord: ...
    def count(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def upper(self) -> SeqRecord: ...
    def lower(self) -> SeqRecord: ...
    def isupper(self): ...
    def islower(self): ...
    def reverse_complement(self, id: bool = False, name: bool = False, description: bool = False, features: bool = True, annotations: bool = False, letter_annotations: bool = True, dbxrefs: bool = False) -> SeqRecord: ...
    def translate(self, table: str = 'Standard', stop_symbol: str = '*', to_stop: bool = False, cds: bool = False, gap: str | None = None, id: bool = False, name: bool = False, description: bool = False, features: bool = False, annotations: bool = False, letter_annotations: bool = False, dbxrefs: bool = False) -> SeqRecord: ...
