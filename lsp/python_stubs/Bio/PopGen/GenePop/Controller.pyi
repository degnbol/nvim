from Bio.Application import AbstractCommandline as AbstractCommandline
from _typeshed import Incomplete

class _FileIterator:
    func: Incomplete
    stream: Incomplete
    fname: Incomplete
    done: bool
    def __init__(self, func, fname, handle: Incomplete | None = None) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    def __del__(self) -> None: ...

class _GenePopCommandline(AbstractCommandline):
    parameters: Incomplete
    def __init__(self, genepop_dir: Incomplete | None = None, cmd: str = 'Genepop', **kwargs) -> None: ...
    def set_menu(self, option_list) -> None: ...
    def set_input(self, fname) -> None: ...

class GenePopController:
    controller: Incomplete
    def __init__(self, genepop_dir: Incomplete | None = None) -> None: ...
    def test_pop_hz_deficiency(self, fname, enum_test: bool = True, dememorization: int = 10000, batches: int = 20, iterations: int = 5000): ...
    def test_pop_hz_excess(self, fname, enum_test: bool = True, dememorization: int = 10000, batches: int = 20, iterations: int = 5000): ...
    def test_pop_hz_prob(self, fname, ext, enum_test: bool = False, dememorization: int = 10000, batches: int = 20, iterations: int = 5000): ...
    def test_global_hz_deficiency(self, fname, enum_test: bool = True, dememorization: int = 10000, batches: int = 20, iterations: int = 5000): ...
    def test_global_hz_excess(self, fname, enum_test: bool = True, dememorization: int = 10000, batches: int = 20, iterations: int = 5000): ...
    done: bool
    def test_ld(self, fname, dememorization: int = 10000, batches: int = 20, iterations: int = 5000): ...
    def create_contingency_tables(self, fname) -> None: ...
    def test_genic_diff_all(self, fname, dememorization: int = 10000, batches: int = 20, iterations: int = 5000) -> None: ...
    def test_genic_diff_pair(self, fname, dememorization: int = 10000, batches: int = 20, iterations: int = 5000) -> None: ...
    def test_genotypic_diff_all(self, fname, dememorization: int = 10000, batches: int = 20, iterations: int = 5000) -> None: ...
    def test_genotypic_diff_pair(self, fname, dememorization: int = 10000, batches: int = 20, iterations: int = 5000) -> None: ...
    def estimate_nm(self, fname): ...
    first_locus: Incomplete
    old_line: Incomplete
    curr_pop: Incomplete
    def calc_allele_genotype_freqs(self, fname): ...
    def calc_diversities_fis_with_identity(self, fname): ...
    def calc_diversities_fis_with_size(self, fname) -> None: ...
    last_line: Incomplete
    def calc_fst_all(self, fname): ...
    def calc_fst_pair(self, fname): ...
    def calc_rho_all(self, fname) -> None: ...
    def calc_rho_pair(self, fname) -> None: ...
    def calc_ibd_diplo(self, fname, stat: str = 'a', scale: str = 'Log', min_dist: float = 1e-05): ...
    def calc_ibd_haplo(self, fname, stat: str = 'a', scale: str = 'Log', min_dist: float = 1e-05): ...
