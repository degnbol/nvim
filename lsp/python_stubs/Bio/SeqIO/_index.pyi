import abc
from Bio import SeqIO as SeqIO
from Bio.File import _IndexedSeqFileProxy
from _typeshed import Incomplete

class SeqFileRandomAccess(_IndexedSeqFileProxy, metaclass=abc.ABCMeta):
    def __init__(self, filename, format) -> None: ...
    def get(self, offset): ...

class SffRandomAccess(SeqFileRandomAccess):
    read_flow_fmt: Incomplete
    read_flow_size: Incomplete
    def __init__(self, filename, format) -> None: ...
    def __iter__(self): ...
    trim: bool
    def get(self, offset): ...
    stream: Incomplete
    def get_raw(self, offset): ...

class SffTrimedRandomAccess(SffRandomAccess):
    trim: bool
    def get(self, offset): ...

class SequentialSeqFileRandomAccess(SeqFileRandomAccess):
    def __init__(self, filename, format) -> None: ...
    def __iter__(self): ...
    def get_raw(self, offset): ...

class GenBankRandomAccess(SequentialSeqFileRandomAccess):
    def __iter__(self): ...

class EmblRandomAccess(SequentialSeqFileRandomAccess):
    def __iter__(self): ...

class SwissRandomAccess(SequentialSeqFileRandomAccess):
    def __iter__(self): ...

class UniprotRandomAccess(SequentialSeqFileRandomAccess):
    def __iter__(self): ...
    def get_raw(self, offset): ...
    def get(self, offset): ...

class IntelliGeneticsRandomAccess(SeqFileRandomAccess):
    def __init__(self, filename, format) -> None: ...
    def __iter__(self): ...
    def get_raw(self, offset): ...

class TabRandomAccess(SeqFileRandomAccess):
    def __iter__(self): ...
    def get_raw(self, offset): ...

class FastqRandomAccess(SeqFileRandomAccess):
    def __iter__(self): ...
    def get_raw(self, offset): ...
