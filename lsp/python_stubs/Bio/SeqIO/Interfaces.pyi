import abc
from Bio import StreamModeError as StreamModeError
from Bio.Seq import MutableSeq as MutableSeq, Seq as Seq
from Bio.SeqRecord import SeqRecord as SeqRecord
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from typing import AnyStr, Generic

class SequenceIterator(ABC, Generic[AnyStr], metaclass=abc.ABCMeta):
    @property
    @abstractmethod
    def modes(self): ...
    source: Incomplete
    stream: Incomplete
    mode: Incomplete
    def __init__(self, source: _IOSource, alphabet: None = None, fmt: str | None = None) -> None: ...
    @abstractmethod
    def __next__(self): ...
    def __iter__(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_traceback: types.TracebackType | None): ...

class SequenceWriter(ABC, Generic[AnyStr], metaclass=abc.ABCMeta):
    @property
    @abstractmethod
    def modes(self): ...
    target: Incomplete
    handle: Incomplete
    def __init__(self, target: _IOSource) -> None: ...
    def clean(self, text: str) -> str: ...
    def write_record(self, record) -> None: ...
    def write_records(self, records): ...
    def write_file(self, records): ...
