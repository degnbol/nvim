from .Interfaces import SequenceIterator as SequenceIterator
from Bio import MissingPythonDependencyError as MissingPythonDependencyError
from Bio.Seq import Seq as Seq, SequenceDataAbstractBaseClass as SequenceDataAbstractBaseClass
from Bio.SeqRecord import SeqRecord as SeqRecord
from _typeshed import Incomplete

class _TwoBitSequenceData(SequenceDataAbstractBaseClass):
    stream: Incomplete
    offset: Incomplete
    length: Incomplete
    def __init__(self, stream, offset, length) -> None: ...
    def __getitem__(self, key): ...
    def __len__(self) -> int: ...
    def upper(self): ...
    def lower(self): ...

class TwoBitIterator(SequenceIterator):
    modes: str
    byteorder: Incomplete
    sequences: Incomplete
    def __init__(self, source) -> None: ...
    def __next__(self): ...
    def __getitem__(self, name): ...
    def keys(self): ...
    def __len__(self) -> int: ...
