from .Interfaces import SequenceIterator as SequenceIterator, SequenceWriter as SequenceWriter, _TextIOSource
from Bio import BiopythonDeprecationWarning as BiopythonDeprecationWarning
from Bio.Seq import Seq as Seq
from Bio.SeqRecord import SeqRecord as SeqRecord
from _typeshed import Incomplete
from collections.abc import Generator

def SimpleFastaParser(handle) -> Generator[Incomplete]: ...
def FastaTwoLineParser(handle) -> Generator[Incomplete]: ...

class FastaIterator(SequenceIterator):
    modes: str
    def __init__(self, source: _TextIOSource, alphabet: None = None) -> None: ...
    def __next__(self): ...

class FastaTwoLineIterator(SequenceIterator):
    modes: str
    def __init__(self, source) -> None: ...
    def __next__(self): ...

class FastaBlastIterator(SequenceIterator):
    modes: str
    def __init__(self, source: _TextIOSource, alphabet: None = None) -> None: ...
    def __next__(self): ...

class FastaPearsonIterator(SequenceIterator):
    modes: str
    def __init__(self, source: _TextIOSource, alphabet: None = None) -> None: ...
    def __next__(self): ...

class FastaWriter(SequenceWriter):
    modes: str
    wrap: Incomplete
    record2title: Incomplete
    def __init__(self, target, wrap: int = 60, record2title: Incomplete | None = None) -> None: ...
    def write_record(self, record) -> None: ...

class FastaTwoLineWriter(FastaWriter):
    def __init__(self, handle, record2title: Incomplete | None = None) -> None: ...

def as_fasta(record): ...
def as_fasta_2line(record): ...
