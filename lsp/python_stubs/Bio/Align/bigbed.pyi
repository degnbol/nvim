import io
from Bio.Align import Alignment as Alignment, interfaces as interfaces
from Bio.Seq import Seq as Seq
from Bio.SeqRecord import SeqRecord as SeqRecord
from _typeshed import Incomplete
from collections.abc import Generator
from typing import NamedTuple

class Field(NamedTuple):
    as_type: Incomplete
    name: Incomplete
    comment: Incomplete

class AutoSQLTable(list):
    default: AutoSQLTable
    name: Incomplete
    comment: Incomplete
    def __init__(self, name, comment, fields) -> None: ...
    @classmethod
    def from_bytes(cls, data): ...
    @classmethod
    def from_string(cls, data): ...
    def __bytes__(self) -> bytes: ...
    def __getitem__(self, i): ...

class AlignmentWriter(interfaces.AlignmentWriter):
    fmt: str
    mode: str
    bedN: Incomplete
    declaration: Incomplete
    targets: Incomplete
    compress: Incomplete
    extraIndexNames: Incomplete
    itemsPerSlot: Incomplete
    blockSize: Incomplete
    def __init__(self, target, bedN: int = 12, declaration: Incomplete | None = None, targets: Incomplete | None = None, compress: bool = True, itemsPerSlot: int = 512, blockSize: int = 256, extraIndex=()) -> None: ...
    def write_file(self, stream, alignments) -> None: ...
    def write_alignments(self, alignments, output, reductions, extra_indices): ...

class AlignmentIterator(interfaces.AlignmentIterator):
    fmt: str
    mode: str
    def __len__(self) -> int: ...
    def search(self, chromosome: Incomplete | None = None, start: Incomplete | None = None, end: Incomplete | None = None) -> Generator[Incomplete]: ...

class _ZippedStream(io.BytesIO):
    def getvalue(self): ...

class _BufferedStream:
    buffer: Incomplete
    output: Incomplete
    size: Incomplete
    def __init__(self, output, size) -> None: ...
    def write(self, item) -> None: ...
    def flush(self) -> None: ...

class _ZippedBufferedStream(_BufferedStream):
    def write(self, item) -> None: ...
    def flush(self) -> None: ...

class _Header:
    formatter: Incomplete
    size: Incomplete
    signature: int
    bbiCurrentVersion: int
    @classmethod
    def fromfile(cls, stream): ...
    def __bytes__(self) -> bytes: ...

class _ExtraIndex:
    formatter: Incomplete
    maxFieldSize: int
    fileOffset: Incomplete
    indexField: Incomplete
    get_value: Incomplete
    def __init__(self, name, declaration) -> None: ...
    def updateMaxFieldSize(self, alignment) -> None: ...
    def addKeysFromRow(self, alignment, recordIx) -> None: ...
    def addOffsetSize(self, offset, size, startIx, endIx) -> None: ...
    def __bytes__(self) -> bytes: ...

class _ExtraIndices(list):
    formatter: Incomplete
    def __init__(self, names, declaration) -> None: ...
    @property
    def size(self): ...
    def initialize(self, bedCount) -> None: ...
    def tofile(self, stream) -> None: ...

class _ZoomLevel:
    formatter: Incomplete
    def __init__(self, byteorder: str = '=') -> None: ...
    def __bytes__(self) -> bytes: ...
    reductionLevel: Incomplete
    dataOffset: Incomplete
    indexOffset: Incomplete
    def read(self, stream) -> None: ...

class _ZoomLevels(list):
    bbiResIncrement: int
    bbiMaxZoomLevels: int
    size: Incomplete
    def __init__(self, byteorder: str = '=') -> None: ...
    def __bytes__(self) -> bytes: ...
    def read(self, stream) -> None: ...
    @classmethod
    def calculate_reductions(cls, aveSize): ...
    def reduce(self, summaries, initialReduction, buffer, blockSize, itemsPerSlot) -> None: ...

class _Summary:
    formatter: Incomplete
    size: Incomplete
    validCount: int
    minVal: Incomplete
    maxVal: Incomplete
    sumData: float
    sumSquares: float
    def __init__(self) -> None: ...
    def update(self, size, val) -> None: ...
    def __bytes__(self) -> bytes: ...

class _Region:
    chromId: Incomplete
    start: Incomplete
    end: Incomplete
    def __init__(self, chromId, start, end) -> None: ...

class _RegionSummary(_Summary):
    formatter: Incomplete
    size: Incomplete
    chromId: Incomplete
    start: Incomplete
    end: Incomplete
    validCount: int
    minVal: Incomplete
    maxVal: Incomplete
    sumData: Incomplete
    sumSquares: Incomplete
    offset: Incomplete
    def __init__(self, chromId, start, end, value) -> None: ...
    def __iadd__(self, other): ...
    def update(self, overlap, val) -> None: ...
    def __bytes__(self) -> bytes: ...

class _RTreeNode:
    parent: Incomplete
    children: Incomplete
    def __init__(self) -> None: ...
    def calcLevelSizes(self, levelSizes, level) -> None: ...

class _RangeTree:
    root: Incomplete
    n: int
    freeList: Incomplete
    chromId: Incomplete
    chromSize: Incomplete
    def __init__(self, chromId, chromSize) -> None: ...
    @classmethod
    def generate(cls, chromUsageList, alignments) -> Generator[Incomplete]: ...
    def generate_summaries(self, scale, totalSum) -> Generator[Incomplete]: ...
    def find(self, start, end): ...
    def restructure(self, x, y, z): ...
    stack: Incomplete
    def add(self, item) -> None: ...
    def addToCoverageDepth(self, alignment) -> None: ...

class _Range:
    start: Incomplete
    end: Incomplete
    val: Incomplete
    def __init__(self, start, end, val) -> None: ...
    def __iter__(self): ...

class _RedBlackTreeNode:
    def traverse(self) -> Generator[Incomplete, Incomplete]: ...
    def traverse_range(self, start, end) -> Generator[Incomplete, Incomplete]: ...

class _RTreeFormatter:
    signature: int
    formatter_header: Incomplete
    formatter_node: Incomplete
    formatter_nonleaf: Incomplete
    formatter_leaf: Incomplete
    def __init__(self, byteorder: str = '=') -> None: ...
    def read(self, stream): ...
    def rTreeFromChromRangeArray(self, blockSize, items, endFileOffset): ...
    def rWriteLeaves(self, itemsPerSlot, lNodeSize, tree, curLevel, leafLevel, output) -> None: ...
    def rWriteIndexLevel(self, parent, blockSize, childNodeSize, curLevel, destLevel, offset, output): ...
    def write(self, items, blockSize, itemsPerSlot, endFileOffset, output) -> None: ...

class _BPlusTreeFormatter:
    signature: int
    formatter_header: Incomplete
    formatter_node: Incomplete
    fmt_nonleaf: Incomplete
    byteorder: Incomplete
    def __init__(self, byteorder: str = '=') -> None: ...
    def read(self, stream): ...
    def write(self, items, blockSize, output) -> None: ...
