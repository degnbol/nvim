import numpy as np
from Bio.File import as_handle as as_handle
from _typeshed import Incomplete
from collections.abc import Generator

class Array(np.ndarray):
    def __new__(cls, alphabet: Incomplete | None = None, dims: Incomplete | None = None, data: Incomplete | None = None, dtype=...): ...
    def __array_finalize__(self, obj) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __contains__(self, key) -> bool: ...
    def __array_prepare__(self, out_arr, context: Incomplete | None = None): ...
    def __array_wrap__(self, out_arr, context: Incomplete | None = None): ...
    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs): ...
    def __reduce__(self): ...
    def transpose(self, axes: Incomplete | None = None): ...
    @property
    def alphabet(self): ...
    def get(self, key, value: Incomplete | None = None): ...
    def items(self) -> Generator[Incomplete]: ...
    def keys(self): ...
    def values(self): ...
    def update(self, E: Incomplete | None = None, **F) -> None: ...
    def select(self, alphabet): ...
    def __format__(self, fmt) -> str: ...
    def format(self, fmt: str = ''): ...

def read(handle, dtype=...): ...
def load(name: Incomplete | None = None): ...
