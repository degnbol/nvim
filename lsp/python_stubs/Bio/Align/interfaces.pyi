import abc
from Bio import StreamModeError as StreamModeError
from Bio.Align import Alignments as Alignments, AlignmentsAbstractBaseClass as AlignmentsAbstractBaseClass
from _typeshed import Incomplete
from abc import ABC

class AlignmentIterator(AlignmentsAbstractBaseClass, metaclass=abc.ABCMeta):
    mode: str
    fmt: str | None
    source: Incomplete
    def __init__(self, source) -> None: ...
    def __next__(self): ...
    def __len__(self) -> int: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_traceback: types.TracebackType | None) -> None: ...
    def __getitem__(self, index): ...
    def rewind(self) -> None: ...

class AlignmentWriter(ABC):
    mode: str
    fmt: str | None
    def __init__(self, target) -> None: ...
    def write_header(self, stream, alignments) -> None: ...
    def write_footer(self, stream) -> None: ...
    def format_alignment(self, alignment) -> None: ...
    def write_single_alignment(self, stream, alignments): ...
    def write_multiple_alignments(self, stream, alignments): ...
    write_alignments = write_multiple_alignments
    def write_file(self, stream, alignments): ...
    def write(self, alignments): ...
