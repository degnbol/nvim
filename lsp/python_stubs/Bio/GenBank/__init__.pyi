from .Scanner import GenBankScanner as GenBankScanner
from .utils import FeatureValueCleaner as FeatureValueCleaner
from Bio import BiopythonParserWarning as BiopythonParserWarning
from Bio.Seq import Seq as Seq
from Bio.SeqFeature import Location as Location, LocationParserError as LocationParserError, Reference as Reference, SeqFeature as SeqFeature, SimpleLocation as SimpleLocation
from _typeshed import Incomplete

GENBANK_INDENT: int
GENBANK_SPACER: Incomplete
FEATURE_KEY_INDENT: int
FEATURE_QUALIFIER_INDENT: int
FEATURE_KEY_SPACER: Incomplete
FEATURE_QUALIFIER_SPACER: Incomplete

class Iterator:
    handle: Incomplete
    def __init__(self, handle, parser: Incomplete | None = None) -> None: ...
    def __next__(self): ...
    def __iter__(self): ...

class ParserFailureError(ValueError): ...

class FeatureParser:
    use_fuzziness: Incomplete
    def __init__(self, debug_level: int = 0, use_fuzziness: int = 1, feature_cleaner: Incomplete | None = None) -> None: ...
    def parse(self, handle): ...

class RecordParser:
    def __init__(self, debug_level: int = 0) -> None: ...
    def parse(self, handle): ...

class _BaseGenBankConsumer:
    remove_space_keys: Incomplete
    def __init__(self) -> None: ...

class _FeatureConsumer(_BaseGenBankConsumer):
    data: Incomplete
    def __init__(self, use_fuzziness, feature_cleaner: Incomplete | None = None) -> None: ...
    def locus(self, locus_name) -> None: ...
    def size(self, content) -> None: ...
    def residue_type(self, type) -> None: ...
    def topology(self, topology) -> None: ...
    def molecule_type(self, mol_type) -> None: ...
    def data_file_division(self, division) -> None: ...
    def date(self, submit_date) -> None: ...
    def definition(self, definition) -> None: ...
    def accession(self, acc_num) -> None: ...
    def tls(self, content) -> None: ...
    def tsa(self, content) -> None: ...
    def wgs(self, content) -> None: ...
    def add_wgs_scafld(self, content) -> None: ...
    def nid(self, content) -> None: ...
    def pid(self, content) -> None: ...
    def version(self, version_id) -> None: ...
    def project(self, content) -> None: ...
    def dblink(self, content) -> None: ...
    def version_suffix(self, version) -> None: ...
    def db_source(self, content) -> None: ...
    def gi(self, content) -> None: ...
    def keywords(self, content) -> None: ...
    def segment(self, content) -> None: ...
    def source(self, content) -> None: ...
    def organism(self, content) -> None: ...
    def taxonomy(self, content) -> None: ...
    def reference_num(self, content) -> None: ...
    def reference_bases(self, content) -> None: ...
    def authors(self, content) -> None: ...
    def consrtm(self, content) -> None: ...
    def title(self, content) -> None: ...
    def journal(self, content) -> None: ...
    def medline_id(self, content) -> None: ...
    def pubmed_id(self, content) -> None: ...
    def remark(self, content) -> None: ...
    def comment(self, content) -> None: ...
    def structured_comment(self, content) -> None: ...
    def features_line(self, content) -> None: ...
    def start_feature_table(self) -> None: ...
    def feature_key(self, content) -> None: ...
    def location(self, content) -> None: ...
    def feature_qualifier(self, key, value) -> None: ...
    def feature_qualifier_name(self, content_list) -> None: ...
    def feature_qualifier_description(self, content) -> None: ...
    def contig_location(self, content) -> None: ...
    def origin_name(self, content) -> None: ...
    def base_count(self, content) -> None: ...
    def base_number(self, content) -> None: ...
    def sequence(self, content) -> None: ...
    def record_end(self, content) -> None: ...

class _RecordConsumer(_BaseGenBankConsumer):
    data: Incomplete
    def __init__(self) -> None: ...
    def tls(self, content) -> None: ...
    def tsa(self, content) -> None: ...
    def wgs(self, content) -> None: ...
    def add_wgs_scafld(self, content) -> None: ...
    def locus(self, content) -> None: ...
    def size(self, content) -> None: ...
    def residue_type(self, content) -> None: ...
    def data_file_division(self, content) -> None: ...
    def date(self, content) -> None: ...
    def definition(self, content) -> None: ...
    def accession(self, content) -> None: ...
    def molecule_type(self, mol_type) -> None: ...
    def topology(self, topology) -> None: ...
    def nid(self, content) -> None: ...
    def pid(self, content) -> None: ...
    def version(self, content) -> None: ...
    def db_source(self, content) -> None: ...
    def gi(self, content) -> None: ...
    def keywords(self, content) -> None: ...
    def project(self, content) -> None: ...
    def dblink(self, content) -> None: ...
    def segment(self, content) -> None: ...
    def source(self, content) -> None: ...
    def organism(self, content) -> None: ...
    def taxonomy(self, content) -> None: ...
    def reference_num(self, content) -> None: ...
    def reference_bases(self, content) -> None: ...
    def authors(self, content) -> None: ...
    def consrtm(self, content) -> None: ...
    def title(self, content) -> None: ...
    def journal(self, content) -> None: ...
    def medline_id(self, content) -> None: ...
    def pubmed_id(self, content) -> None: ...
    def remark(self, content) -> None: ...
    def comment(self, content) -> None: ...
    def structured_comment(self, content) -> None: ...
    def primary_ref_line(self, content) -> None: ...
    def primary(self, content) -> None: ...
    def features_line(self, content) -> None: ...
    def start_feature_table(self) -> None: ...
    def feature_key(self, content) -> None: ...
    def location(self, content) -> None: ...
    def feature_qualifier(self, key, value) -> None: ...
    def feature_qualifier_name(self, content_list) -> None: ...
    def feature_qualifier_description(self, content) -> None: ...
    def base_count(self, content) -> None: ...
    def origin_name(self, content) -> None: ...
    def contig_location(self, content) -> None: ...
    def sequence(self, content) -> None: ...
    def record_end(self, content) -> None: ...

def parse(handle): ...
def read(handle): ...
