from .DynamicProgramming import ScaledDPAlgorithms as ScaledDPAlgorithms
from Bio import BiopythonDeprecationWarning as BiopythonDeprecationWarning
from _typeshed import Incomplete

class TrainingSequence:
    emissions: Incomplete
    states: Incomplete
    def __init__(self, emissions, state_path) -> None: ...

class AbstractTrainer:
    def __init__(self, markov_model) -> None: ...
    def log_likelihood(self, probabilities): ...
    def estimate_params(self, transition_counts, emission_counts): ...
    def ml_estimator(self, counts): ...

class BaumWelchTrainer(AbstractTrainer):
    def __init__(self, markov_model) -> None: ...
    def train(self, training_seqs, stopping_criteria, dp_method=...): ...
    def update_transitions(self, transition_counts, training_seq, forward_vars, backward_vars, training_seq_prob): ...
    def update_emissions(self, emission_counts, training_seq, forward_vars, backward_vars, training_seq_prob): ...

class KnownStateTrainer(AbstractTrainer):
    def __init__(self, markov_model) -> None: ...
    def train(self, training_seqs): ...
