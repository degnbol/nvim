from Bio.Align import MultipleSeqAlignment as MultipleSeqAlignment
from Bio.Phylo import BaseTree as BaseTree
from _typeshed import Incomplete
from collections.abc import Generator

class _BitString(str):
    def __new__(cls, strdata): ...
    def __and__(self, other): ...
    def __or__(self, other): ...
    def __xor__(self, other): ...
    def __rand__(self, other): ...
    def __ror__(self, other): ...
    def __rxor__(self, other): ...
    def index_one(self): ...
    def index_zero(self): ...
    def contains(self, other): ...
    def independent(self, other): ...
    def iscompatible(self, other): ...
    @classmethod
    def from_bool(cls, bools): ...

def strict_consensus(trees): ...
def majority_consensus(trees, cutoff: int = 0): ...
def adam_consensus(trees): ...
def get_support(target_tree, trees, len_trees: Incomplete | None = None): ...
def bootstrap(msa, times) -> Generator[Incomplete]: ...
def bootstrap_trees(alignment, times, tree_constructor) -> Generator[Incomplete]: ...
def bootstrap_consensus(alignment, times, tree_constructor, consensus): ...
