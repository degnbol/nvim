from Bio.Align import Alignment as Alignment, MultipleSeqAlignment as MultipleSeqAlignment, substitution_matrices as substitution_matrices
from Bio.Phylo import BaseTree as BaseTree
from _typeshed import Incomplete

class _Matrix:
    names: Incomplete
    matrix: Incomplete
    def __init__(self, names, matrix: Incomplete | None = None) -> None: ...
    def __getitem__(self, item): ...
    def __setitem__(self, item, value) -> None: ...
    def __delitem__(self, item) -> None: ...
    def insert(self, name, value, index: Incomplete | None = None) -> None: ...
    def __len__(self) -> int: ...

class DistanceMatrix(_Matrix):
    def __init__(self, names, matrix: Incomplete | None = None) -> None: ...
    def __setitem__(self, item, value) -> None: ...
    def format_phylip(self, handle) -> None: ...

class DistanceCalculator:
    protein_alphabet: Incomplete
    dna_models: Incomplete
    protein_models: Incomplete
    names: Incomplete
    matrix: Incomplete
    name: str
    models: Incomplete
    skip_letters: Incomplete
    scoring_matrix: Incomplete
    def __init__(self, model: str = 'identity', skip_letters: Incomplete | None = None) -> None: ...
    def get_distance(self, msa): ...

class TreeConstructor:
    def build_tree(self, msa) -> None: ...

class DistanceTreeConstructor(TreeConstructor):
    methods: Incomplete
    distance_calculator: Incomplete
    method: Incomplete
    def __init__(self, distance_calculator: Incomplete | None = None, method: str = 'nj') -> None: ...
    def build_tree(self, msa): ...
    def upgma(self, distance_matrix): ...
    def nj(self, distance_matrix): ...

class Scorer:
    def get_score(self, tree, alignment) -> None: ...

class TreeSearcher:
    def search(self, starting_tree, alignment) -> None: ...

class NNITreeSearcher(TreeSearcher):
    scorer: Incomplete
    def __init__(self, scorer) -> None: ...
    def search(self, starting_tree, alignment): ...

class ParsimonyScorer(Scorer):
    matrix: Incomplete
    def __init__(self, matrix: Incomplete | None = None) -> None: ...
    def get_score(self, tree, alignment): ...

class ParsimonyTreeConstructor(TreeConstructor):
    searcher: Incomplete
    starting_tree: Incomplete
    def __init__(self, searcher, starting_tree: Incomplete | None = None) -> None: ...
    def build_tree(self, alignment): ...
