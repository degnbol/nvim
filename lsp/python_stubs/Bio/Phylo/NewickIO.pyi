from Bio.Phylo import Newick as Newick
from _typeshed import Incomplete
from collections.abc import Generator

class NewickError(Exception): ...

tokens: Incomplete
tokenizer: Incomplete
token_dict: Incomplete

def parse(handle, **kwargs): ...
def write(trees, handle, plain: bool = False, **kwargs): ...

class Parser:
    handle: Incomplete
    def __init__(self, handle) -> None: ...
    @classmethod
    def from_string(cls, treetext): ...
    values_are_confidence: Incomplete
    comments_are_confidence: Incomplete
    rooted: Incomplete
    def parse(self, values_are_confidence: bool = False, comments_are_confidence: bool = False, rooted: bool = False) -> Generator[Incomplete]: ...
    def new_clade(self, parent: Incomplete | None = None): ...
    def process_clade(self, clade): ...

class Writer:
    trees: Incomplete
    def __init__(self, trees) -> None: ...
    def write(self, handle, **kwargs): ...
    def to_strings(self, confidence_as_branch_length: bool = False, branch_length_only: bool = False, plain: bool = False, plain_newick: bool = True, ladderize: Incomplete | None = None, max_confidence: float = 1.0, format_confidence: str = '%1.2f', format_branch_length: str = '%1.5f') -> Generator[Incomplete, None, Incomplete]: ...
