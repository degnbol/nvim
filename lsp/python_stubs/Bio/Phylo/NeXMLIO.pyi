from ._cdao_owl import cdao_elements as cdao_elements, cdao_namespaces as cdao_namespaces, resolve_uri as resolve_uri
from Bio.Phylo import NeXML as NeXML
from _typeshed import Incomplete
from collections.abc import Generator
from xml.etree import ElementTree

NAMESPACES: Incomplete
DEFAULT_NAMESPACE: Incomplete
VERSION: str
SCHEMA: str
register_namespace = ElementTree.register_namespace

def qUri(s): ...
def cdao_to_obo(s): ...
def matches(s): ...

class NeXMLError(Exception): ...

def parse(handle, **kwargs): ...
def write(trees, handle, plain: bool = False, **kwargs): ...

class Parser:
    handle: Incomplete
    def __init__(self, handle) -> None: ...
    @classmethod
    def from_string(cls, treetext): ...
    def add_annotation(self, node_dict, meta_node) -> None: ...
    def parse(self, values_are_confidence: bool = False, rooted: bool = False) -> Generator[Incomplete]: ...

class Writer:
    trees: Incomplete
    node_counter: int
    edge_counter: int
    tree_counter: int
    def __init__(self, trees) -> None: ...
    def new_label(self, obj_type): ...
    cdao_to_obo: Incomplete
    def write(self, handle, cdao_to_obo: bool = True, **kwargs): ...
