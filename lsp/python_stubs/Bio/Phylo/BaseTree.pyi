from _typeshed import Incomplete

class TreeElement: ...

class TreeMixin:
    def find_any(self, *args, **kwargs): ...
    def find_elements(self, target: Incomplete | None = None, terminal: Incomplete | None = None, order: str = 'preorder', **kwargs): ...
    def find_clades(self, target: Incomplete | None = None, terminal: Incomplete | None = None, order: str = 'preorder', **kwargs): ...
    def get_path(self, target: Incomplete | None = None, **kwargs): ...
    def get_nonterminals(self, order: str = 'preorder'): ...
    def get_terminals(self, order: str = 'preorder'): ...
    def trace(self, start, finish): ...
    def common_ancestor(self, targets, *more_targets): ...
    def count_terminals(self): ...
    def depths(self, unit_branch_lengths: bool = False): ...
    def distance(self, target1, target2: Incomplete | None = None): ...
    def is_bifurcating(self): ...
    def is_monophyletic(self, terminals, *more_terminals): ...
    def is_parent_of(self, target: Incomplete | None = None, **kwargs): ...
    def is_preterminal(self): ...
    def total_branch_length(self): ...
    def collapse(self, target: Incomplete | None = None, **kwargs): ...
    def collapse_all(self, target: Incomplete | None = None, **kwargs) -> None: ...
    def ladderize(self, reverse: bool = False): ...
    def prune(self, target: Incomplete | None = None, **kwargs): ...
    def split(self, n: int = 2, branch_length: float = 1.0) -> None: ...

class Tree(TreeElement, TreeMixin):
    root: Incomplete
    rooted: Incomplete
    id: Incomplete
    name: Incomplete
    def __init__(self, root: Incomplete | None = None, rooted: bool = True, id: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    @classmethod
    def from_clade(cls, clade, **kwargs): ...
    @classmethod
    def randomized(cls, taxa, branch_length: float = 1.0, branch_stdev: Incomplete | None = None): ...
    @property
    def clade(self): ...
    def as_phyloxml(self, **kwargs): ...
    def root_with_outgroup(self, outgroup_targets, *more_targets, outgroup_branch_length: Incomplete | None = None) -> None: ...
    def root_at_midpoint(self): ...
    def is_terminal(self): ...
    def __format__(self, format_spec) -> str: ...
    def format(self, fmt: Incomplete | None = None): ...

class Clade(TreeElement, TreeMixin):
    branch_length: Incomplete
    name: Incomplete
    clades: Incomplete
    confidence: Incomplete
    color: Incomplete
    width: Incomplete
    def __init__(self, branch_length: Incomplete | None = None, name: Incomplete | None = None, clades: Incomplete | None = None, confidence: Incomplete | None = None, color: Incomplete | None = None, width: Incomplete | None = None) -> None: ...
    @property
    def root(self): ...
    def is_terminal(self): ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...

class BranchColor:
    color_names: Incomplete
    red: Incomplete
    green: Incomplete
    blue: Incomplete
    def __init__(self, red, green, blue) -> None: ...
    @classmethod
    def from_hex(cls, hexstr): ...
    @classmethod
    def from_name(cls, colorname): ...
    def to_hex(self): ...
    def to_rgb(self): ...
