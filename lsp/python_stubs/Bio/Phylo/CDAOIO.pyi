from ._cdao_owl import cdao_namespaces as cdao_namespaces, resolve_uri as resolve_uri
from Bio import MissingPythonDependencyError as MissingPythonDependencyError
from Bio.Phylo import CDAO as CDAO
from _typeshed import Incomplete
from collections.abc import Generator

rdfver: Incomplete
RDF_NAMESPACES: Incomplete
ZEROES: int

def qUri(x): ...
def format_label(x): ...
def parse(handle, **kwargs): ...
def write(trees, handle, plain: bool = False, **kwargs): ...

class Parser:
    handle: Incomplete
    graph: Incomplete
    node_info: Incomplete
    children: Incomplete
    rooted: bool
    def __init__(self, handle: Incomplete | None = None) -> None: ...
    @classmethod
    def from_string(cls, treetext): ...
    def parse(self, **kwargs): ...
    def parse_handle_to_graph(self, rooted: bool = False, parse_format: str = 'turtle', context: Incomplete | None = None, **kwargs): ...
    def parse_graph(self, graph: Incomplete | None = None, context: Incomplete | None = None) -> Generator[Incomplete]: ...
    def new_clade(self, node): ...
    obj_info: Incomplete
    nodes: Incomplete
    tree_roots: Incomplete
    def get_node_info(self, graph, context: Incomplete | None = None) -> None: ...
    def parse_children(self, node): ...

class Writer:
    prefixes = RDF_NAMESPACES
    trees: Incomplete
    node_counter: int
    edge_counter: int
    tu_counter: int
    tree_counter: int
    def __init__(self, trees) -> None: ...
    rooted: Incomplete
    record_complete_ancestry: Incomplete
    tree_uri: str
    def write(self, handle, tree_uri: str = '', record_complete_ancestry: bool = False, rooted: bool = False, **kwargs) -> None: ...
    def add_stmt_to_handle(self, handle, stmt) -> None: ...
    def process_clade(self, clade, parent: Incomplete | None = None, root: bool = False) -> Generator[Incomplete, Incomplete, Incomplete]: ...
