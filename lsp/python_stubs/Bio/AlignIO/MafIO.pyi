from .Interfaces import SequentialAlignmentWriter as SequentialAlignmentWriter
from Bio.Align import MultipleSeqAlignment as MultipleSeqAlignment
from Bio.Seq import Seq as Seq
from Bio.SeqRecord import SeqRecord as SeqRecord
from _typeshed import Incomplete
from collections.abc import Generator

MAFINDEX_VERSION: int

class MafWriter(SequentialAlignmentWriter):
    def write_header(self) -> None: ...
    def write_alignment(self, alignment): ...

def MafIterator(handle, seq_count: Incomplete | None = None) -> Generator[Incomplete]: ...

class MafIndex:
    def __init__(self, sqlite_file, maf_file, target_seqname) -> None: ...
    def close(self) -> None: ...
    def search(self, starts, ends) -> Generator[Incomplete]: ...
    def get_spliced(self, starts, ends, strand: int = 1): ...
    def __len__(self) -> int: ...
