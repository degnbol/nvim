import abc
from Bio import BiopythonWarning as BiopythonWarning
from Bio.Data import CodonTable as CodonTable, IUPACData as IUPACData
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from collections.abc import Generator
from typing import overload

ambiguous_dna_complement: Incomplete
ambiguous_rna_complement: Incomplete

class SequenceDataAbstractBaseClass(ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    @abstractmethod
    def __len__(self): ...
    @abstractmethod
    def __getitem__(self, key): ...
    def __bytes__(self) -> bytes: ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, other): ...
    def __contains__(self, item) -> bool: ...
    def decode(self, encoding: str = 'utf-8'): ...
    def count(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def find(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def rfind(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def index(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def rindex(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def startswith(self, prefix, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def endswith(self, suffix, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def split(self, sep: Incomplete | None = None, maxsplit: int = -1): ...
    def rsplit(self, sep: Incomplete | None = None, maxsplit: int = -1): ...
    def strip(self, chars: Incomplete | None = None): ...
    def lstrip(self, chars: Incomplete | None = None): ...
    def rstrip(self, chars: Incomplete | None = None): ...
    def removeprefix(self, prefix): ...
    def removesuffix(self, suffix): ...
    def upper(self): ...
    def lower(self): ...
    def isupper(self): ...
    def islower(self): ...
    def replace(self, old, new): ...
    def translate(self, table, delete: bytes = b''): ...
    @property
    def defined(self): ...
    @property
    def defined_ranges(self): ...

class _SeqAbstractBaseClass(ABC, metaclass=abc.ABCMeta):
    __array_ufunc__: Incomplete
    @abstractmethod
    def __init__(self): ...
    def __bytes__(self) -> bytes: ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    @overload
    def __getitem__(self, index: int) -> str: ...
    @overload
    def __getitem__(self, index: slice) -> Seq: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __imul__(self, other): ...
    def count(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def count_overlap(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def __contains__(self, item) -> bool: ...
    def find(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def rfind(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def index(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def rindex(self, sub, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def search(self, subs) -> Generator[Incomplete]: ...
    def startswith(self, prefix, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def endswith(self, suffix, start: Incomplete | None = None, end: Incomplete | None = None): ...
    def split(self, sep: Incomplete | None = None, maxsplit: int = -1): ...
    def rsplit(self, sep: Incomplete | None = None, maxsplit: int = -1): ...
    def strip(self, chars: Incomplete | None = None, inplace: bool = False): ...
    def lstrip(self, chars: Incomplete | None = None, inplace: bool = False): ...
    def rstrip(self, chars: Incomplete | None = None, inplace: bool = False): ...
    def removeprefix(self, prefix, inplace: bool = False): ...
    def removesuffix(self, suffix, inplace: bool = False): ...
    def upper(self, inplace: bool = False): ...
    def lower(self, inplace: bool = False): ...
    def isupper(self): ...
    def islower(self): ...
    def translate(self, table: str = 'Standard', stop_symbol: str = '*', to_stop: bool = False, cds: bool = False, gap: str = '-'): ...
    def complement(self, inplace: bool = False): ...
    def complement_rna(self, inplace: bool = False): ...
    def reverse_complement(self, inplace: bool = False): ...
    def reverse_complement_rna(self, inplace: bool = False): ...
    def transcribe(self, inplace: bool = False): ...
    def back_transcribe(self, inplace: bool = False): ...
    def join(self, other): ...
    def replace(self, old, new, inplace: bool = False): ...
    @property
    def defined(self): ...
    @property
    def defined_ranges(self): ...

class Seq(_SeqAbstractBaseClass):
    def __init__(self, data: str | bytes | bytearray | _SeqAbstractBaseClass | SequenceDataAbstractBaseClass | dict | None, length: int | None = None) -> None: ...
    def __hash__(self): ...

class MutableSeq(_SeqAbstractBaseClass):
    def __init__(self, data) -> None: ...
    def __setitem__(self, index, value) -> None: ...
    def __delitem__(self, index) -> None: ...
    def append(self, c) -> None: ...
    def insert(self, i, c) -> None: ...
    def pop(self, i: int = -1): ...
    def remove(self, item) -> None: ...
    def reverse(self) -> None: ...
    def extend(self, other) -> None: ...

class UndefinedSequenceError(ValueError): ...

class _UndefinedSequenceData(SequenceDataAbstractBaseClass):
    def __init__(self, length) -> None: ...
    def __getitem__(self, key: slice) -> bytes | _UndefinedSequenceData: ...
    def __len__(self) -> int: ...
    def __bytes__(self) -> bytes: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def upper(self): ...
    def lower(self): ...
    def isupper(self) -> None: ...
    def islower(self) -> None: ...
    def replace(self, old, new): ...
    @property
    def defined(self): ...
    @property
    def defined_ranges(self): ...

class _PartiallyDefinedSequenceData(SequenceDataAbstractBaseClass):
    def __init__(self, length, data) -> None: ...
    def __getitem__(self, key: slice | int) -> bytes | SequenceDataAbstractBaseClass: ...
    def __len__(self) -> int: ...
    def __bytes__(self) -> bytes: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, other): ...
    def upper(self): ...
    def lower(self): ...
    def isupper(self) -> None: ...
    def islower(self) -> None: ...
    def translate(self, table, delete: bytes = b''): ...
    def replace(self, old, new): ...
    @property
    def defined(self): ...
    @property
    def defined_ranges(self): ...

def transcribe(dna): ...
def back_transcribe(rna): ...
def translate(sequence, table: str = 'Standard', stop_symbol: str = '*', to_stop: bool = False, cds: bool = False, gap: Incomplete | None = None): ...
def reverse_complement(sequence, inplace: bool = False): ...
def reverse_complement_rna(sequence, inplace: bool = False): ...
def complement(sequence, inplace: bool = False): ...
def complement_rna(sequence, inplace: bool = False): ...
