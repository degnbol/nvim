from Bio.Seq import Seq as Seq
from _typeshed import Incomplete
from collections.abc import Generator

class GenericPositionMatrix(dict):
    length: Incomplete
    alphabet: Incomplete
    def __init__(self, alphabet, values) -> None: ...
    def __getitem__(self, key): ...
    @property
    def consensus(self): ...
    @property
    def anticonsensus(self): ...
    @property
    def degenerate_consensus(self): ...
    def calculate_consensus(self, substitution_matrix: Incomplete | None = None, plurality: Incomplete | None = None, identity: int = 0, setcase: Incomplete | None = None): ...
    @property
    def gc_content(self): ...
    def reverse_complement(self): ...

class FrequencyPositionMatrix(GenericPositionMatrix):
    def normalize(self, pseudocounts: Incomplete | None = None): ...

class PositionWeightMatrix(GenericPositionMatrix):
    def __init__(self, alphabet, counts) -> None: ...
    def log_odds(self, background: Incomplete | None = None): ...

class PositionSpecificScoringMatrix(GenericPositionMatrix):
    def calculate(self, sequence): ...
    def search(self, sequence, threshold: float = 0.0, both: bool = True, chunksize=...) -> Generator[Incomplete, Incomplete]: ...
    @property
    def max(self): ...
    @property
    def min(self): ...
    @property
    def gc_content(self) -> None: ...
    def mean(self, background: Incomplete | None = None): ...
    def std(self, background: Incomplete | None = None): ...
    def dist_pearson(self, other): ...
    def dist_pearson_at(self, other, offset): ...
    def distribution(self, background: Incomplete | None = None, precision=...): ...
