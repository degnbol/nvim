from Bio import Align as Align, motifs as motifs
from Bio.Seq import Seq as Seq
from _typeshed import Incomplete

class Motif(motifs.Motif):
    name: Incomplete
    matrix_id: Incomplete
    collection: Incomplete
    tf_class: Incomplete
    tf_family: Incomplete
    species: Incomplete
    tax_group: Incomplete
    acc: Incomplete
    data_type: Incomplete
    medline: Incomplete
    pazar_id: Incomplete
    comment: Incomplete
    def __init__(self, matrix_id, name, alphabet: str = 'ACGT', alignment: Incomplete | None = None, counts: Incomplete | None = None, collection: Incomplete | None = None, tf_class: Incomplete | None = None, tf_family: Incomplete | None = None, species: Incomplete | None = None, tax_group: Incomplete | None = None, acc: Incomplete | None = None, data_type: Incomplete | None = None, medline: Incomplete | None = None, pazar_id: Incomplete | None = None, comment: Incomplete | None = None) -> None: ...
    @property
    def base_id(self): ...
    @property
    def version(self): ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class Record(list):
    version: Incomplete
    def __init__(self) -> None: ...
    def to_dict(self): ...

def read(handle, format): ...
def write(motifs, format): ...
def calculate_pseudocounts(motif): ...
def split_jaspar_id(id): ...
