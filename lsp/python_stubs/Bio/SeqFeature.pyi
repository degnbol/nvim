import abc
from Bio import BiopythonDeprecationWarning as BiopythonDeprecationWarning, BiopythonParserWarning as BiopythonParserWarning
from Bio.Seq import MutableSeq as MutableSeq, Seq as Seq, reverse_complement as reverse_complement
from _typeshed import Incomplete
from abc import ABC

class LocationParserError(ValueError): ...

class SeqFeature:
    location: Incomplete
    type: Incomplete
    id: Incomplete
    qualifiers: Incomplete
    def __init__(self, location: Incomplete | None = None, type: str = '', id: str = '<unknown id>', qualifiers: Incomplete | None = None, sub_features: Incomplete | None = None) -> None: ...
    strand: Incomplete
    ref: Incomplete
    ref_db: Incomplete
    def __eq__(self, other): ...
    def extract(self, parent_sequence, references: Incomplete | None = None): ...
    def translate(self, parent_sequence, table: str = 'Standard', start_offset: Incomplete | None = None, stop_symbol: str = '*', to_stop: bool = False, cds: Incomplete | None = None, gap: Incomplete | None = None): ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __contains__(self, value) -> bool: ...

class Reference:
    location: Incomplete
    authors: str
    consrtm: str
    title: str
    journal: str
    medline_id: str
    pubmed_id: str
    comment: str
    def __init__(self) -> None: ...
    def __eq__(self, other): ...

class Location(ABC, metaclass=abc.ABCMeta):
    def fromstring(text, length: Incomplete | None = None, circular: bool = False, stranded: bool = True): ...

class SimpleLocation(Location):
    strand: Incomplete
    ref: Incomplete
    ref_db: Incomplete
    def __init__(self, start, end, strand: Incomplete | None = None, ref: Incomplete | None = None, ref_db: Incomplete | None = None) -> None: ...
    @staticmethod
    def fromstring(text, length: Incomplete | None = None, circular: bool = False): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __nonzero__(self): ...
    def __len__(self) -> int: ...
    def __contains__(self, value) -> bool: ...
    def __iter__(self): ...
    def __eq__(self, other): ...
    @property
    def parts(self): ...
    @property
    def start(self): ...
    @property
    def end(self): ...
    def extract(self, parent_sequence, references: Incomplete | None = None): ...
FeatureLocation = SimpleLocation

class CompoundLocation(Location):
    operator: Incomplete
    parts: Incomplete
    def __init__(self, parts, operator: str = 'join') -> None: ...
    strand: Incomplete
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __contains__(self, value) -> bool: ...
    def __nonzero__(self): ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other): ...
    @property
    def start(self): ...
    @property
    def end(self): ...
    @property
    def ref(self) -> None: ...
    @property
    def ref_db(self) -> None: ...
    def extract(self, parent_sequence, references: Incomplete | None = None): ...

class Position(ABC, metaclass=abc.ABCMeta):
    @staticmethod
    def fromstring(text, offset: int = 0): ...

class ExactPosition(int, Position):
    def __new__(cls, position, extension: int = 0): ...
    def __add__(self, offset): ...

class UncertainPosition(ExactPosition): ...

class UnknownPosition(Position):
    def __hash__(self): ...
    def __add__(self, offset): ...

class WithinPosition(int, Position):
    def __new__(cls, position, left, right): ...
    def __getnewargs__(self): ...
    def __add__(self, offset): ...

class BetweenPosition(int, Position):
    def __new__(cls, position, left, right): ...
    def __getnewargs__(self): ...
    def __add__(self, offset): ...

class BeforePosition(int, Position):
    def __new__(cls, position, extension: int = 0): ...
    def __add__(self, offset): ...

class AfterPosition(int, Position):
    def __new__(cls, position, extension: int = 0): ...
    def __add__(self, offset): ...

class OneOfPosition(int, Position):
    def __new__(cls, position, choices): ...
    def __getnewargs__(self): ...
    def __add__(self, offset): ...
