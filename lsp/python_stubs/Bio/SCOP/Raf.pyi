from Bio.Data.PDBData import protein_letters_3to1_extended as protein_letters_3to1_extended
from Bio.SCOP.Residues import Residues as Residues
from _typeshed import Incomplete
from collections.abc import Generator

def normalize_letters(one_letter_code): ...

class SeqMapIndex(dict):
    filename: Incomplete
    def __init__(self, filename) -> None: ...
    def __getitem__(self, key): ...
    def getSeqMap(self, residues): ...

class SeqMap:
    pdbid: str
    pdb_datestamp: str
    version: str
    flags: str
    res: Incomplete
    def __init__(self, line: Incomplete | None = None) -> None: ...
    def index(self, resid, chainid: str = '_'): ...
    def __getitem__(self, index): ...
    def append(self, res) -> None: ...
    def extend(self, other) -> None: ...
    def __iadd__(self, other): ...
    def __add__(self, other): ...
    def getAtoms(self, pdb_handle, out_handle) -> None: ...

class Res:
    chainid: str
    resid: str
    atom: str
    seqres: str
    def __init__(self) -> None: ...

def parse(handle) -> Generator[Incomplete]: ...
