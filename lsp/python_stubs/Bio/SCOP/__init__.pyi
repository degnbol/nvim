from . import Cla as Cla, Des as Des, Hie as Hie, Residues as Residues
from Bio import BiopythonDeprecationWarning as BiopythonDeprecationWarning, SeqIO as SeqIO
from Bio.Seq import Seq as Seq
from _typeshed import Incomplete

nodeCodeDict: Incomplete
nodeCodeOrder: Incomplete
astralBibIds: Incomplete
astralEvs: Incomplete
astralEv_to_file: Incomplete
astralEv_to_sql: Incomplete

def cmp_sccs(sccs1, sccs2): ...
def parse_domain(term): ...

class Scop:
    db_handle: Incomplete
    root: Incomplete
    def __init__(self, cla_handle: Incomplete | None = None, des_handle: Incomplete | None = None, hie_handle: Incomplete | None = None, dir_path: Incomplete | None = None, db_handle: Incomplete | None = None, version: Incomplete | None = None) -> None: ...
    def getRoot(self): ...
    def getDomainBySid(self, sid): ...
    def getNodeBySunid(self, sunid): ...
    def getDomains(self): ...
    def write_hie(self, handle): ...
    def write_des(self, handle): ...
    def write_cla(self, handle): ...
    def getDomainFromSQL(self, sunid: Incomplete | None = None, sid: Incomplete | None = None) -> None: ...
    def getAscendentFromSQL(self, node, type): ...
    def getDescendentsFromSQL(self, node, type): ...
    def write_hie_sql(self, handle) -> None: ...
    def write_cla_sql(self, handle) -> None: ...
    def write_des_sql(self, handle) -> None: ...

class Node:
    sunid: str
    parent: Incomplete
    children: Incomplete
    sccs: str
    type: str
    description: str
    scop: Incomplete
    def __init__(self, scop: Incomplete | None = None) -> None: ...
    def toHieRecord(self): ...
    def toDesRecord(self): ...
    def getChildren(self): ...
    def getParent(self): ...
    def getDescendents(self, node_type): ...
    def getAscendent(self, node_type): ...

class Domain(Node):
    sid: str
    residues: Incomplete
    def __init__(self, scop: Incomplete | None = None) -> None: ...
    def toDesRecord(self): ...
    def toClaRecord(self): ...

class Astral:
    scop: Incomplete
    db_handle: Incomplete
    version: Incomplete
    path: Incomplete
    fasta_dict: Incomplete
    astral_file: Incomplete
    EvDatasets: Incomplete
    EvDatahash: Incomplete
    IdDatasets: Incomplete
    IdDatahash: Incomplete
    def __init__(self, dir_path: Incomplete | None = None, version: Incomplete | None = None, scop: Incomplete | None = None, astral_file: Incomplete | None = None, db_handle: Incomplete | None = None) -> None: ...
    def domainsClusteredByEv(self, id): ...
    def domainsClusteredById(self, id): ...
    def getAstralDomainsFromFile(self, filename: Incomplete | None = None, file_handle: Incomplete | None = None): ...
    def getAstralDomainsFromSQL(self, column): ...
    def getSeqBySid(self, domain): ...
    def getSeq(self, domain): ...
    def hashedDomainsById(self, id): ...
    def hashedDomainsByEv(self, id): ...
    def isDomainInId(self, dom, id): ...
    def isDomainInEv(self, dom, id): ...
    def writeToSQL(self, db_handle) -> None: ...

def search(pdb: Incomplete | None = None, key: Incomplete | None = None, sid: Incomplete | None = None, disp: Incomplete | None = None, dir: Incomplete | None = None, loc: Incomplete | None = None, cgi: str = 'http://scop.mrc-lmb.cam.ac.uk/legacy/search.cgi', **keywds): ...
