import _cython_3_0_5
from typing import ClassVar

LeeRichards: str
ShrakeRupley: str
__reduce_cython__: _cython_3_0_5.cython_function_or_method
__setstate_cython__: _cython_3_0_5.cython_function_or_method
__test__: dict
apolar: str
calc: _cython_3_0_5.cython_function_or_method
calcBioPDB: _cython_3_0_5.cython_function_or_method
calcCoord: _cython_3_0_5.cython_function_or_method
classifyResults: _cython_3_0_5.cython_function_or_method
debug: int
getVerbosity: _cython_3_0_5.cython_function_or_method
normal: int
nowarnings: int
polar: str
selectArea: _cython_3_0_5.cython_function_or_method
setVerbosity: _cython_3_0_5.cython_function_or_method
silent: int
structureArray: _cython_3_0_5.cython_function_or_method
structureFromBioPDB: _cython_3_0_5.cython_function_or_method

class Classifier:
    purePython: ClassVar[bool] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def classify(self, *args, **kwargs): ...
    @staticmethod
    def getStandardClassifier(*args, **kwargs): ...
    def radius(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Parameters:
    defaultParameters: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def algorithm(self, *args, **kwargs): ...
    def nPoints(self, *args, **kwargs): ...
    def nSlices(self, *args, **kwargs): ...
    def nThreads(self, *args, **kwargs): ...
    def probeRadius(self, *args, **kwargs): ...
    def setAlgorithm(self, *args, **kwargs): ...
    def setNPoints(self, *args, **kwargs): ...
    def setNSlices(self, *args, **kwargs): ...
    def setNThreads(self, *args, **kwargs): ...
    def setProbeRadius(self, *args, **kwargs): ...
    def __reduce__(self): ...

class ResidueArea:
    apolar: ClassVar[int] = ...
    hasRelativeAreas: ClassVar[bool] = ...
    mainChain: ClassVar[int] = ...
    polar: ClassVar[int] = ...
    relativeApolar: ClassVar[int] = ...
    relativeMainChain: ClassVar[int] = ...
    relativePolar: ClassVar[int] = ...
    relativeSideChain: ClassVar[int] = ...
    relativeTotal: ClassVar[int] = ...
    residueNumber: ClassVar[str] = ...
    residueType: ClassVar[str] = ...
    sideChain: ClassVar[int] = ...
    total: ClassVar[int] = ...

class Result:
    def __init__(self, *args, **kwargs) -> None: ...
    def atomArea(self, *args, **kwargs): ...
    def nAtoms(self, *args, **kwargs): ...
    def residueAreas(self, *args, **kwargs): ...
    def totalArea(self, *args, **kwargs): ...
    def write_pdb(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Structure:
    defaultOptions: ClassVar[dict] = ...
    defaultStructureArrayOptions: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addAtom(self, *args, **kwargs): ...
    def addAtoms(self, *args, **kwargs): ...
    def atomName(self, *args, **kwargs): ...
    def chainLabel(self, *args, **kwargs): ...
    def coord(self, *args, **kwargs): ...
    def nAtoms(self, *args, **kwargs): ...
    def radius(self, *args, **kwargs): ...
    def residueName(self, *args, **kwargs): ...
    def residueNumber(self, *args, **kwargs): ...
    def setRadii(self, *args, **kwargs): ...
    def setRadiiWithClassifier(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    def __reduce__(self): ...
