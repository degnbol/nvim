local lsu = require"luasnip_util"
local in_math = lsu.in_math

return {
-- all snippets here are expected to be called within a math env

s({trig=";q", snippetType="autosnippet", wordTrig=false}, { t("\\theta"), }),
s({trig=";w", snippetType="autosnippet", wordTrig=false}, { t("\\omega"), }),
s({trig=";e", snippetType="autosnippet", wordTrig=false}, { t("\\epsilon"), }),
s({trig=";r", snippetType="autosnippet", wordTrig=false}, { t("\\rho"), }),
s({trig=";t", snippetType="autosnippet", wordTrig=false}, { t("\\tau"), }),
s({trig=";y", snippetType="autosnippet", wordTrig=false}, { t("\\psi"), }),
s({trig=";u", snippetType="autosnippet", wordTrig=false}, { t("\\upsilon"), }),
s({trig=";i", snippetType="autosnippet", wordTrig=false}, { t("\\iota"), }),
s({trig=";o", snippetType="autosnippet", wordTrig=false}, { t("\\omicron"), }),
s({trig=";p", snippetType="autosnippet", wordTrig=false}, { t("\\pi"), }),
s({trig=";a", snippetType="autosnippet", wordTrig=false}, { t("\\alpha"), }),
s({trig=";s", snippetType="autosnippet", wordTrig=false}, { t("\\sigma"), }),
s({trig=";d", snippetType="autosnippet", wordTrig=false}, { t("\\delta"), }),
s({trig=";f", snippetType="autosnippet", wordTrig=false}, { t("\\phi"), }),
s({trig=";g", snippetType="autosnippet", wordTrig=false}, { t("\\gamma"), }),
s({trig=";h", snippetType="autosnippet", wordTrig=false}, { t("\\eta"), }),
s({trig=";k", snippetType="autosnippet", wordTrig=false}, { t("\\kappa"), }),
s({trig=";l", snippetType="autosnippet", wordTrig=false}, { t("\\lambda"), }),
s({trig=";z", snippetType="autosnippet", wordTrig=false}, { t("\\zeta"), }),
s({trig=";x", snippetType="autosnippet", wordTrig=false}, { t("\\xi"), }),
s({trig=";c", snippetType="autosnippet", wordTrig=false}, { t("\\chi"), }),
s({trig=";v", snippetType="autosnippet", wordTrig=false}, { t("\\sqrt{"),i(1), t("}") }),
s({trig=";b", snippetType="autosnippet", wordTrig=false}, { t("\\beta"), }),
s({trig=";n", snippetType="autosnippet", wordTrig=false}, { t("\\nu"), }),
s({trig=";m", snippetType="autosnippet", wordTrig=false}, { t("\\mu"), }),

s({trig=";Q", snippetType="autosnippet", wordTrig=false}, { t("\\Theta"), }),
s({trig=";W", snippetType="autosnippet", wordTrig=false}, { t("\\Omega"), }),
s({trig=";E", snippetType="autosnippet", wordTrig=false}, { t("\\Epsilon"), }),
s({trig=";R", snippetType="autosnippet", wordTrig=false}, { t("\\Rho"), }),
s({trig=";T", snippetType="autosnippet", wordTrig=false}, { t("\\Tau"), }),
s({trig=";Y", snippetType="autosnippet", wordTrig=false}, { t("\\Psi"), }),
s({trig=";U", snippetType="autosnippet", wordTrig=false}, { t("\\Upsilon"), }),
s({trig=";I", snippetType="autosnippet", wordTrig=false}, { t("\\Iota"), }),
s({trig=";O", snippetType="autosnippet", wordTrig=false}, { t("\\Omicron"), }),
s({trig=";P", snippetType="autosnippet", wordTrig=false}, { t("\\Pi"), }),
s({trig=";A", snippetType="autosnippet", wordTrig=false}, { t("\\Alpha"), }),
s({trig=";S", snippetType="autosnippet", wordTrig=false}, { t("\\Sigma"), }),
s({trig=";D", snippetType="autosnippet", wordTrig=false}, { t("\\Delta"), }),
s({trig=";F", snippetType="autosnippet", wordTrig=false}, { t("\\Phi"), }),
s({trig=";G", snippetType="autosnippet", wordTrig=false}, { t("\\Gamma"), }),
s({trig=";H", snippetType="autosnippet", wordTrig=false}, { t("\\Eta"), }),
s({trig=";K", snippetType="autosnippet", wordTrig=false}, { t("\\Kappa"), }),
s({trig=";L", snippetType="autosnippet", wordTrig=false}, { t("\\Lambda"), }),
s({trig=";Z", snippetType="autosnippet", wordTrig=false}, { t("\\Zeta"), }),
s({trig=";X", snippetType="autosnippet", wordTrig=false}, { t("\\Xi"), }),
s({trig=";C", snippetType="autosnippet", wordTrig=false}, { t("\\Chi"), }),
s({trig=";B", snippetType="autosnippet", wordTrig=false}, { t("\\Beta"), }),
s({trig=";N", snippetType="autosnippet", wordTrig=false}, { t("\\Nu"), }),
s({trig=";M", snippetType="autosnippet", wordTrig=false}, { t("\\Mu"), }),

s(
{trig="*", dscr="cdot", wordTrig=false, snippetType="autosnippet"},
t("\\cdot"),
{condition=in_math}
),
s({trig="...", descr="ellipses", wordTrig=false, snippetType="autosnippet"},
t"\\ldots",
{condition=in_math}),

s(
{trig="xx", dscr="cross", wordTrig=false, snippetType="autosnippet"},
t("\\times"),
{condition=in_math}
),

-- lower priority so we can replace \oo first
s({trig="oo", descr="infinity", snippetType="autosnippet", priority=100},
t"\\infty",
{condition=in_math}),
s({trig="\\oo", descr="infinity", wordTrig=false, snippetType="autosnippet"},
t"\\infty",
{condition=in_math}),

s({trig="lim", descr="limit", snippetType="autosnippet"},
-- {t"\\lim_{", i(1, "n"), t"\\to\\infty}"},
-- space after \to since a vimtex "to" snippet completes on ls.expand_or_jump
-- other solutions than leaving the space would be removing the default "to" snippet somehow,
-- or having separate keys for expand and jump
{t"\\lim_{", i(1, "n"), t"\\to ", i(2, "\\infty"), t"}"},
{condition=in_math}),

s({trig="sum", descr="sum", snippetType="autosnippet"},
{t"\\sum_{", i(1, "n=1"), t"}^{", i(2,"\\infty"), t"}"},
{condition=in_math}),

s({trig="part", dscr="d/dx"},
{t"\\frac{\\partial ", i(1,"V"), t"}{\\partial ", i(2,"x"), t"}"},
{condition=in_math}),

s({trig="->", descr="to", snippetType="autosnippet"},
t"\\to",
{condition=in_math}),
s({trig="!>", descr="maps to", snippetType="autosnippet"},
t"\\mapsto",
{condition=in_math}),

s({trig="!=", descr="not equal", wordTrig=false, snippetType="autosnippet"},
t"\\neq",
{condition=in_math}),
s({trig="<=", descr="less than or equal", wordTrig=false, snippetType="autosnippet"},
{t"\\le"}), -- synonymous with \leq
s({trig=">=", descr="greater than or equal", wordTrig=false, snippetType="autosnippet"},
{t"\\ge"}), -- synonymous with \geq

s({trig="([^\\])notin", regTrig=true, wordTrig=false, descr="not in", snippetType="autosnippet"},
{re(1), t"\\notin"},
{condition=in_math}),

s({trig="EE", descr="E (set)", wordTrig=false, snippetType="autosnippet"},
t"\\exists",
{condition=in_math}),
s({trig="AA", descr="A (set)", wordTrig=false, snippetType="autosnippet"},
t"\\forall",
{condition=in_math}),

s({trig="cc", descr="subset", wordTrig=true, snippetType="autosnippet"},
t"\\subset",
{condition=in_math}),

s({trig="UU", descr="union", wordTrig=false, snippetType="autosnippet"},
t"\\cup",
{condition=in_math}),

s({trig="dint", descr="integral", snippetType="autosnippet", priority=300},
{t"\\int_{", i(1, "-\\infty"), t"}^{", i(2,"\\infty"), t"}", d(3, get_visual)},
{condition=in_math}),

}
